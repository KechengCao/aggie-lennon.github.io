<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LeedCode-Day4</title>
    <link href="/2023/12/12/LeedCode-20231212/"/>
    <url>/2023/12/12/LeedCode-20231212/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="1-罗马数字转整数"><a href="#1-罗马数字转整数" class="headerlink" title="1. 罗马数字转整数"></a>1. 罗马数字转整数</h1><p>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</p><p>字符          数值<br>I             1<br>V             5<br>X             10<br>L             50<br>C             100<br>D             500<br>M             1000<br>例如， 罗马数字 2 写做 II ，即为两个并列的 1 。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><p>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。<br>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。<br>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。<br>给定一个罗马数字，将其转换成整数。<br><img src="/img/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">romanToInt</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">char</span>,<span class="hljs-type">int</span>&gt; roam_mapping = &#123;&#123;<span class="hljs-string">&#x27;I&#x27;</span>,<span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-string">&#x27;V&#x27;</span>,<span class="hljs-number">5</span>&#125;, &#123;<span class="hljs-string">&#x27;X&#x27;</span>,<span class="hljs-number">10</span>&#125;,&#123;<span class="hljs-string">&#x27;L&#x27;</span>,<span class="hljs-number">50</span>&#125;,&#123;<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-number">100</span>&#125;,&#123;<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-number">500</span>&#125;,&#123;<span class="hljs-string">&#x27;M&#x27;</span>,<span class="hljs-number">1000</span>&#125;&#125;;<br>        <span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>)&#123;<span class="hljs-keyword">return</span> roam_mapping[s[<span class="hljs-number">0</span>]];&#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;s.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span> ; i++)&#123;<br>            <span class="hljs-keyword">if</span>((<span class="hljs-number">5</span>*roam_mapping[s[i]] == roam_mapping[s[i+<span class="hljs-number">1</span>]]) || (<span class="hljs-number">10</span>*roam_mapping[s[i]] == roam_mapping[s[i+<span class="hljs-number">1</span>]]))&#123;<br>                result = result + roam_mapping[s[i+<span class="hljs-number">1</span>]]-roam_mapping[s[i]];<br>                i++;<br>                <span class="hljs-keyword">if</span>(i == s.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>)&#123;flag = <span class="hljs-literal">true</span>;&#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                result +=roam_mapping[s[i]];<br>                flag = <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!flag)&#123;result+=roam_mapping[s[s.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>]];&#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="2-列举单词的全部缩写"><a href="#2-列举单词的全部缩写" class="headerlink" title="2.  列举单词的全部缩写"></a>2.  列举单词的全部缩写</h1><p>单词的 广义缩写词 可以通过下述步骤构造：先取任意数量的 不重叠、不相邻 的子字符串，再用它们各自的长度进行替换。</p><p>例如，”abcde” 可以缩写为：<br>“a3e”（”bcd” 变为 “3” ）<br>“1bcd1”（”a” 和 “e” 都变为 “1”）<br>“5” (“abcde” 变为 “5”)<br>“abcde” (没有子字符串被代替)<br>然而，这些缩写是 无效的 ：<br>“23”（”ab” 变为 “2” ，”cde” 变为 “3” ）是无效的，因为被选择的字符串是相邻的<br>“22de” (“ab” 变为 “2” ， “bc” 变为 “2”)  是无效的，因为被选择的字符串是重叠的<br>给你一个字符串 word ，返回 一个由 word 的所有可能 广义缩写词 组成的列表 。按 任意顺序 返回答案。<br><img src="/img/%E5%88%97%E4%B8%BE%E5%8D%95%E8%AF%8D%E7%9A%84%E5%85%A8%E9%83%A8%E7%BC%A9%E5%86%99.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;string&gt; res;<br>    <span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">generateAbbreviations</span><span class="hljs-params">(string word)</span> </span>&#123;<br>        <span class="hljs-built_in">traceback</span>(word,<span class="hljs-number">0</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">traceback</span><span class="hljs-params">(string word, <span class="hljs-type">int</span> i, string tmp, <span class="hljs-type">int</span> cnt)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(i == word.<span class="hljs-built_in">size</span>())&#123;<br>            <span class="hljs-keyword">if</span>(cnt&gt;<span class="hljs-number">0</span>)&#123;tmp += <span class="hljs-built_in">to_string</span>(cnt);&#125;<br>            res.<span class="hljs-built_in">push_back</span>(tmp);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">traceback</span>(word, i+<span class="hljs-number">1</span>, tmp, cnt+<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(cnt &gt; <span class="hljs-number">0</span>)&#123;<span class="hljs-built_in">traceback</span>(word, i+<span class="hljs-number">1</span>, tmp + <span class="hljs-built_in">to_string</span>(cnt) + word[i], <span class="hljs-number">0</span>);&#125;<br>            <span class="hljs-keyword">else</span>&#123;<span class="hljs-built_in">traceback</span>(word, i+<span class="hljs-number">1</span>, tmp+ word[i], <span class="hljs-number">0</span>);&#125;<br>        &#125;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="3-最长公共前缀"><a href="#3-最长公共前缀" class="headerlink" title="3. 最长公共前缀"></a>3. 最长公共前缀</h1><p>编写一个函数来查找字符串数组中的最长公共前缀。<br>如果不存在公共前缀，返回空字符串 “”。<br><img src="/img/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">longestCommonPrefix</span><span class="hljs-params">(vector&lt;string&gt;&amp; strs)</span> </span>&#123;<br>        string result = <span class="hljs-string">&quot;&quot;</span>;<br>        map&lt;<span class="hljs-type">int</span>, string&gt; strs_mapping;<br>        <span class="hljs-type">int</span> index = <span class="hljs-number">1</span>;<br>        <br><br>        <span class="hljs-keyword">if</span>(strs.<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>)&#123;<span class="hljs-keyword">return</span> strs[<span class="hljs-number">0</span>];&#125;<br>        <span class="hljs-built_in">sort</span>(strs.<span class="hljs-built_in">begin</span>(), strs.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">const</span> string&amp; a,<span class="hljs-type">const</span> string&amp; b)&#123;<span class="hljs-keyword">return</span> a.<span class="hljs-built_in">size</span>()&lt;b.<span class="hljs-built_in">size</span>();&#125;);<br>        string smallest_str = strs[<span class="hljs-number">0</span>];<br><br>        <span class="hljs-keyword">while</span>(index&lt;strs.<span class="hljs-built_in">size</span>())&#123;<br>            result = <span class="hljs-built_in">CommonStr</span>(smallest_str, strs[index]);<br>            <span class="hljs-keyword">if</span>(result == <span class="hljs-string">&quot;&quot;</span>)&#123;<span class="hljs-keyword">break</span>;&#125;<br>            smallest_str = result;<br>            index++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-function">string <span class="hljs-title">CommonStr</span><span class="hljs-params">(string a, string b)</span></span>&#123;<br>        string result = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;a.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-keyword">if</span>(a[i] == b[i])&#123;<br>                result += a[i];<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">break</span>;&#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result; <br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="4-下一个更大元素-IV"><a href="#4-下一个更大元素-IV" class="headerlink" title="4. 下一个更大元素 IV"></a>4. 下一个更大元素 IV</h1><p>给你一个下标从 0 开始的非负整数数组 nums 。对于 nums 中每一个整数，你必须找到对应元素的 第二大 整数。</p><p>如果 nums[j] 满足以下条件，那么我们称它为 nums[i] 的 第二大 整数：</p><p>j &gt; i<br>nums[j] &gt; nums[i]<br>恰好存在 一个 k 满足 i &lt; k &lt; j 且 nums[k] &gt; nums[i] 。<br>如果不存在 nums[j] ，那么第二大整数为 -1 。</p><p>比方说，数组 [1, 2, 4, 3] 中，1 的第二大整数是 4 ，2 的第二大整数是 3 ，3 和 4 的第二大整数是 -1 。<br>请你返回一个整数数组 answer ，其中 answer[i]是 nums[i] 的第二大整数。<br>![](&#x2F;img&#x2F;下一个更大元素 IV.png)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">secondGreaterElement</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">result</span><span class="hljs-params">(n, <span class="hljs-number">-1</span>)</span></span>;<br>        stack&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt; first_st, second_st;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;nums.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            vector&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt; tmp;<br>            <span class="hljs-keyword">while</span>(!second_st.<span class="hljs-built_in">empty</span>() &amp;&amp; nums[i]&gt;second_st.<span class="hljs-built_in">top</span>().second)&#123;<br>                result[second_st.<span class="hljs-built_in">top</span>().first] = nums[i];<br>                second_st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            <span class="hljs-keyword">while</span>(!first_st.<span class="hljs-built_in">empty</span>() &amp;&amp; nums[i]&gt;first_st.<span class="hljs-built_in">top</span>().second)&#123;<br>                tmp.<span class="hljs-built_in">push_back</span>(first_st.<span class="hljs-built_in">top</span>());<br>                first_st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            <span class="hljs-keyword">while</span>(!tmp.<span class="hljs-built_in">empty</span>())&#123;<br>                second_st.<span class="hljs-built_in">push</span>(tmp.<span class="hljs-built_in">back</span>());<br>                tmp.<span class="hljs-built_in">pop_back</span>();<br>            &#125;<br>            first_st.<span class="hljs-built_in">push</span>(&#123;i,nums[i]&#125;);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>@版权归LeedCode所有</p>]]></content>
    
    
    <categories>
      
      <category>Daily Algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeedCode-Day3</title>
    <link href="/2023/12/11/LeedCode-20231211/"/>
    <url>/2023/12/11/LeedCode-20231211/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="1-去除重复字母"><a href="#1-去除重复字母" class="headerlink" title="1. 去除重复字母"></a>1. 去除重复字母</h1><p>给你一个字符串 s ，请你去除字符串中重复的字母，使得每个字母只出现一次。需保证 返回结果的字典序最小（要求不能打乱其他字符的相对位置）。<br><img src="/img/%E5%8E%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E5%AD%97%E6%AF%8D.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">removeDuplicateLetters</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">alpha_list</span><span class="hljs-params">(<span class="hljs-number">26</span>,<span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">left_list</span><span class="hljs-params">(<span class="hljs-number">26</span>,<span class="hljs-number">0</span>)</span></span>;<br>        stack&lt;<span class="hljs-type">char</span>&gt; result;<br>        string res = <span class="hljs-string">&quot;&quot;</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;s.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            alpha_list[s[i]-<span class="hljs-string">&#x27;a&#x27;</span>]++;<br>        &#125;<br>        result.<span class="hljs-built_in">push</span>(s[<span class="hljs-number">0</span>]);<br>        alpha_list[s[<span class="hljs-number">0</span>]-<span class="hljs-string">&#x27;a&#x27;</span>]--;<br>        left_list[s[<span class="hljs-number">0</span>]-<span class="hljs-string">&#x27;a&#x27;</span>]++;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; <span class="hljs-built_in">i</span>&lt;s.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-type">int</span> s_num = s[i]-<span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span>(!result.<span class="hljs-built_in">empty</span>() &amp;&amp;(left_list[s_num]))&#123;<br>                alpha_list[s_num]--;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">while</span>(!result.<span class="hljs-built_in">empty</span>() &amp;&amp; (result.<span class="hljs-built_in">top</span>() - <span class="hljs-string">&#x27;a&#x27;</span>)&gt;(s_num) &amp;&amp; alpha_list[result.<span class="hljs-built_in">top</span>()-<span class="hljs-string">&#x27;a&#x27;</span>] &gt; <span class="hljs-number">0</span>)&#123;<br>                left_list[result.<span class="hljs-built_in">top</span>()-<span class="hljs-string">&#x27;a&#x27;</span>]--;<br>                result.<span class="hljs-built_in">pop</span>();   <br>            &#125;   <br>            <span class="hljs-keyword">if</span>(left_list[s_num])&#123;<span class="hljs-keyword">continue</span>;&#125;<br>            alpha_list[s_num]--;<br>            result.<span class="hljs-built_in">push</span>(s[i]);<br>            left_list[s_num]++;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(!result.<span class="hljs-built_in">empty</span>())&#123;<br>            res += result.<span class="hljs-built_in">top</span>();<br>            result.<span class="hljs-built_in">pop</span>();<br>        &#125;<br><br>        <span class="hljs-built_in">reverse</span>(res.<span class="hljs-built_in">begin</span>(), res.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">return</span> res;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="2-二叉树的垂直遍历"><a href="#2-二叉树的垂直遍历" class="headerlink" title="2.  二叉树的垂直遍历"></a>2.  二叉树的垂直遍历</h1><p>给你一个二叉树的根结点，返回其结点按 垂直方向（从上到下，逐列）遍历的结果。<br>如果两个结点在同一行和列，那么顺序则为 从左到右。<br><img src="/img/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9E%82%E7%9B%B4%E9%81%8D%E5%8E%86.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">maxTaxiEarnings</span><span class="hljs-params">(<span class="hljs-type">int</span> n, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; rides)</span> </span>&#123;<br>        <span class="hljs-built_in">sort</span>(rides.<span class="hljs-built_in">begin</span>(), rides.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; a, <span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; b) &#123;<span class="hljs-keyword">return</span> a[<span class="hljs-number">1</span>] &lt; b[<span class="hljs-number">1</span>];&#125;);<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(rides.size()+<span class="hljs-number">1</span>)</span></span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i&lt; rides.<span class="hljs-built_in">size</span>()+<span class="hljs-number">1</span>; i++)&#123;<br>            <span class="hljs-type">int</span> st = rides[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>];<br>            <span class="hljs-type">int</span> ed = rides[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>];<br>            <span class="hljs-type">int</span> tip = rides[i<span class="hljs-number">-1</span>][<span class="hljs-number">2</span>];<br>            <span class="hljs-keyword">auto</span> it = <span class="hljs-built_in">lower_bound</span>(rides.<span class="hljs-built_in">begin</span>(),rides.<span class="hljs-built_in">begin</span>()+i, st+<span class="hljs-number">1</span>, [](<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; a, <span class="hljs-type">int</span> val) &#123;<span class="hljs-keyword">return</span> a[<span class="hljs-number">1</span>]&lt; val;&#125;);<br>            <span class="hljs-type">int</span> j = <span class="hljs-built_in">distance</span>(rides.<span class="hljs-built_in">begin</span>(), it);<br>            dp[i] = <span class="hljs-built_in">max</span>(dp[i<span class="hljs-number">-1</span>], dp[j]+ed-st+tip);<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[rides.<span class="hljs-built_in">size</span>()];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="3-最大单词长度乘积"><a href="#3-最大单词长度乘积" class="headerlink" title="3. 最大单词长度乘积"></a>3. 最大单词长度乘积</h1><p>给你一个字符串数组 words ，找出并返回 length(words[i]) * length(words[j]) 的最大值，并且这两个单词不含有公共字母。如果不存在这样的两个单词，返回 0 。<br><img src="/img/%E6%9C%80%E5%A4%A7%E5%8D%95%E8%AF%8D%E9%95%BF%E5%BA%A6%E4%B9%98%E7%A7%AF.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProduct</span><span class="hljs-params">(vector&lt;string&gt;&amp; words)</span> </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">masks</span><span class="hljs-params">(words.size(), <span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;words.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            string str = words[i];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> s:str)&#123;<br>                masks[i] |= <span class="hljs-number">1</span> &lt;&lt; (s - <span class="hljs-string">&#x27;a&#x27;</span>);<br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;words.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i+<span class="hljs-number">1</span>; j&lt;words.<span class="hljs-built_in">size</span>(); j++)&#123;<br>                <span class="hljs-keyword">if</span>((masks[i] &amp; masks[j]) == <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-type">int</span> tmp = words[i].<span class="hljs-built_in">size</span>()*words[j].<span class="hljs-built_in">size</span>();<br>                    result = <span class="hljs-built_in">max</span>(result,tmp);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="4-寻找两个正序数组的中位数"><a href="#4-寻找两个正序数组的中位数" class="headerlink" title="4. 寻找两个正序数组的中位数"></a>4. 寻找两个正序数组的中位数</h1><p>给你一个字符串数组 words ，找出并返回 length(words[i]) * length(words[j]) 的最大值，并且这两个单词不含有公共字母。如果不存在这样的两个单词，返回 0 。<br><img src="/img/%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">kelement</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2, <span class="hljs-type">int</span> k)</span></span>&#123;<br>        <span class="hljs-type">int</span> m = nums1.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> n = nums2.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> index1 = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> index2 = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>(index1 == m)&#123;<br>                <span class="hljs-keyword">return</span> nums2[index2+k<span class="hljs-number">-1</span>];<br>            &#125;<br>            <span class="hljs-keyword">if</span>(index2 == n)&#123;<br>                <span class="hljs-keyword">return</span> nums1[index1+k<span class="hljs-number">-1</span>];<br>            &#125;<br>            <span class="hljs-keyword">if</span>(k==<span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(nums1[index1], nums2[index2]);<br>            &#125;<br>            <span class="hljs-type">int</span> newindex1 = <span class="hljs-built_in">min</span>(m<span class="hljs-number">-1</span>,index1+k/<span class="hljs-number">2</span><span class="hljs-number">-1</span>);<br>            <span class="hljs-type">int</span> newindex2 = <span class="hljs-built_in">min</span>(n<span class="hljs-number">-1</span>,index2+k/<span class="hljs-number">2</span><span class="hljs-number">-1</span>);<br>            <span class="hljs-type">int</span> val1 = nums1[newindex1];<br>            <span class="hljs-type">int</span> val2 = nums2[newindex2];<br>            <span class="hljs-keyword">if</span>(val1&lt;=val2)&#123;<br>                k -= newindex1-index1+<span class="hljs-number">1</span>;<br>                index1 = newindex1+<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                k -= newindex2-index2+<span class="hljs-number">1</span>;<br>                index2 = newindex2+<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">findMedianSortedArrays</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2)</span> </span>&#123;<br>        <span class="hljs-type">int</span> m = nums1.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> n = nums2.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> total = m+n;<br><br>        <span class="hljs-keyword">if</span>(total%<span class="hljs-number">2</span> == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">kelement</span>(nums1,nums2,(total+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">return</span> ((<span class="hljs-built_in">kelement</span>(nums1,nums2,(total)/<span class="hljs-number">2</span>)+<span class="hljs-built_in">kelement</span>(nums1,nums2,(total)/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>))/<span class="hljs-number">2.0</span>);<br>        &#125;<br>        <br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>@版权归LeedCode所有</p>]]></content>
    
    
    <categories>
      
      <category>Daily Algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeedCode-Day2</title>
    <link href="/2023/12/09/LeedCode-20231209/"/>
    <url>/2023/12/09/LeedCode-20231209/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="1-下一个更大的数值平衡数"><a href="#1-下一个更大的数值平衡数" class="headerlink" title="1. 下一个更大的数值平衡数"></a>1. 下一个更大的数值平衡数</h1><p>如果整数  x 满足：对于每个数位 d ，这个数位 恰好 在 x 中出现 d 次。那么整数 x 就是一个 数值平衡数 。<br>给你一个整数 n ，请你返回 严格大于 n 的 最小数值平衡数 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isBalance</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">count</span><span class="hljs-params">(<span class="hljs-number">10</span>,<span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-keyword">while</span> (x&gt;<span class="hljs-number">0</span>)&#123;<br>            count[x%<span class="hljs-number">10</span>]++;<br>            x = x/<span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10</span>; i++)&#123;<br>            <span class="hljs-keyword">if</span>(count[i] &gt; <span class="hljs-number">0</span> &amp;&amp; count[i] != i)&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">nextBeautifulNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n+<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">1224444</span>; i++)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isBalance</span>(i))&#123;<span class="hljs-keyword">return</span> i;&#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="2-出租车的最大盈利"><a href="#2-出租车的最大盈利" class="headerlink" title="2.  出租车的最大盈利"></a>2.  出租车的最大盈利</h1><p>你驾驶出租车行驶在一条有 n 个地点的路上。这 n 个地点从近到远编号为 1 到 n ，你想要从 1 开到 n ，通过接乘客订单盈利。你只能沿着编号递增的方向前进，不能改变方向。<br>乘客信息用一个下标从 0 开始的二维数组 rides 表示，其中 rides[i] &#x3D; [starti, endi, tipi] 表示第 i 位乘客需要从地点 starti 前往 endi ，愿意支付 tipi 元的小费。<br>每一位 你选择接单的乘客 i ，你可以 盈利 endi - starti + tipi 元。你同时 最多 只能接一个订单。<br>给你 n 和 rides ，请你返回在最优接单方案下，你能盈利 最多 多少元。<br>注意：你可以在一个地点放下一位乘客，并在同一个地点接上另一位乘客。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">maxTaxiEarnings</span><span class="hljs-params">(<span class="hljs-type">int</span> n, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; rides)</span> </span>&#123;<br>        <span class="hljs-built_in">sort</span>(rides.<span class="hljs-built_in">begin</span>(), rides.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; a, <span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; b) &#123;<span class="hljs-keyword">return</span> a[<span class="hljs-number">1</span>] &lt; b[<span class="hljs-number">1</span>];&#125;);<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(rides.size()+<span class="hljs-number">1</span>)</span></span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i&lt; rides.<span class="hljs-built_in">size</span>()+<span class="hljs-number">1</span>; i++)&#123;<br>            <span class="hljs-type">int</span> st = rides[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>];<br>            <span class="hljs-type">int</span> ed = rides[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>];<br>            <span class="hljs-type">int</span> tip = rides[i<span class="hljs-number">-1</span>][<span class="hljs-number">2</span>];<br>            <span class="hljs-keyword">auto</span> it = <span class="hljs-built_in">lower_bound</span>(rides.<span class="hljs-built_in">begin</span>(),rides.<span class="hljs-built_in">begin</span>()+i, st+<span class="hljs-number">1</span>, [](<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; a, <span class="hljs-type">int</span> val) &#123;<span class="hljs-keyword">return</span> a[<span class="hljs-number">1</span>]&lt; val;&#125;);<br>            <span class="hljs-type">int</span> j = <span class="hljs-built_in">distance</span>(rides.<span class="hljs-built_in">begin</span>(), it);<br>            dp[i] = <span class="hljs-built_in">max</span>(dp[i<span class="hljs-number">-1</span>], dp[j]+ed-st+tip);<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[rides.<span class="hljs-built_in">size</span>()];<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h1 id="3-超级丑数"><a href="#3-超级丑数" class="headerlink" title="3. 超级丑数"></a>3. 超级丑数</h1><p>超级丑数 是一个正整数，并满足其所有质因数都出现在质数数组 primes 中。<br>给你一个整数 n 和一个整数数组 primes ，返回第 n 个 超级丑数 。<br>题目数据保证第 n 个 超级丑数 在 32-bit 带符号整数范围内</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">nthSuperUglyNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> n, vector&lt;<span class="hljs-type">int</span>&gt;&amp; primes)</span> </span>&#123;<br>        <span class="hljs-type">int</span> m = primes.<span class="hljs-built_in">size</span>();<br>        vector&lt;<span class="hljs-type">long</span>&gt; result;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">primes_list</span><span class="hljs-params">(m, <span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-type">int</span> start_point= <span class="hljs-number">0</span>;<br>        result.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-type">long</span> primes_min = INT_MAX;<br>            <span class="hljs-type">long</span> tmp = <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> flag = <span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j&lt;m; j++)&#123;<br>                tmp = result[primes_list[j]]*primes[j];<br>                <span class="hljs-keyword">if</span>(tmp &gt; result.<span class="hljs-built_in">back</span>())&#123;<br>                    <span class="hljs-keyword">if</span>(tmp &lt; primes_min)&#123;<br>                        primes_min = tmp;<br>                        flag = j;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            result.<span class="hljs-built_in">push_back</span>(primes_min);<br>            primes_list[flag]++;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;m; i++)&#123;<br>                <span class="hljs-keyword">if</span>(i != flag &amp;&amp; result[primes_list[i]]*primes[i] == primes_min)&#123;<br>                    primes_list[i]++;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result.<span class="hljs-built_in">back</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>@版权归LeedCode所有</p><!--版权归LeedCode所有-->]]></content>
    
    
    <categories>
      
      <category>Daily Algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STL Sources Learning-1</title>
    <link href="/2023/12/09/STL%20Sources%20Learning-1/"/>
    <url>/2023/12/09/STL%20Sources%20Learning-1/</url>
    
    <content type="html"><![CDATA[<h1 id="查看GCC对各种C-特性的支持程度"><a href="#查看GCC对各种C-特性的支持程度" class="headerlink" title="查看GCC对各种C++特性的支持程度"></a>查看GCC对各种C++特性的支持程度</h1><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-meta"># <span class="hljs-keyword">if</span> defined(__sgi)</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;__sgi&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-meta"># <span class="hljs-keyword">if</span> defined(__GNUC__)</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;__GNUC__&quot;</span> &lt;&lt;endl;<br>    cout &lt;&lt; __GNUC__ &lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;__GNUC_MINOR__&lt;&lt;endl;<br>    <span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//case 2</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __STL_NO_DRAND48</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_NO_DRAND48 defined&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_NO_DRAND48 undefined&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//case 3</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __STL_STATIC_TEMPLATE_MEMBER_BUG</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_STATIC_TEMPLATE_MEMBER_BUG defined&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_STATIC_TEMPLATE_MEMBER_BUG undefined&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//case 4</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __STL_CLASS_PARTIAL_SPECIALIZATION</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_CLASS_PARTIAL_SPECIALIZATION defined&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_CLASS_PARTIAL_SPECIALIZATION undefined&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//case 5</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __STL_EXPLICIT_FUNCTION_TMPL_ARGS</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_EXPLICIT_FUNCTION_TMPL_ARGS defined&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_EXPLICIT_FUNCTION_TMPL_ARGS undefined&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//case 6</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __STL_MEMBER_TEMPLATES</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_MEMBER_TEMPLATES defined&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_MEMBER_TEMPLATES undefined&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//case 7</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __STL_LIMITED_DEFAULT_TEMPLATES</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_LIMITED_DEFAULT_TEMPLATES defined&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_LIMITED_DEFAULT_TEMPLATES undefined&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//case 8</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __STL_NON_TYPE_TMPL_PARAM_BUG</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_NON_TYPE_TMPL_PARAM_BUG defined&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_NON_TYPE_TMPL_PARAM_BUG undefined&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//case 9</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __SGI_STL_NO_ARROW_OPERATOR</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__SGI_STL_NO_ARROW_OPERATOR defined&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__SGI_STL_NO_ARROW_OPERATOR undefined&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//case 10</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __STL_USE_EXCEPTIONS</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_USE_EXCEPTIONS defined&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_USE_EXCEPTIONS undefined&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//case 11</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __STL_USE_NAMESPACES</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_USE_NAMESPACES defined&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_USE_NAMESPACES undefined&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//case 12</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __STL_SGI_THREADS</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_SGI_THREADS defined&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_SGI_THREADS undefined&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//case 13</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __STL_WIN32THREADS</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_WIN32THREADS defined&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_WIN32THREADS undefined&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//case 14</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __STL_NO_NAMESPACES</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_NO_NAMESPACES defined&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_NO_NAMESPACES undefined&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//case 15</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __STL_NEED_TYPENAME</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_NEED_TYPENAME defined&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_NEED_TYPENAME undefined&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//case 16</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __STL_NEED_BOOL</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_NEED_BOOL defined&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_NEED_BOOL undefined&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//case 17</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __STL_NEED_EXPLICIT</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_NEED_EXPLICIT defined&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_NEED_EXPLICIT undefined&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//case 18</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __STL_ASSERTIONS</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_ASSERTIONS defined&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_ASSERTIONS undefined&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeedCode-Day1</title>
    <link href="/2023/12/08/LeedCode-20231208/"/>
    <url>/2023/12/08/LeedCode-20231208/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="1-买卖股票的最佳时机含手续费"><a href="#1-买卖股票的最佳时机含手续费" class="headerlink" title="1. 买卖股票的最佳时机含手续费"></a>1. 买卖股票的最佳时机含手续费</h1><p>给定一个整数数组 prices，其中 prices[i]表示第 i 天的股票价格 ；整数 fee 代表了交易股票的手续费用。<br>你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。<br>返回获得利润的最大值。<br>注意：这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices, <span class="hljs-type">int</span> fee)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = prices.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> buy = -prices[<span class="hljs-number">0</span>]-fee;<br>        <span class="hljs-type">int</span> sell = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-type">int</span> newbuy = <span class="hljs-built_in">max</span>(buy, sell-prices[i]-fee);<br>            <span class="hljs-type">int</span> newsell = <span class="hljs-built_in">max</span>(sell, buy+prices[i]);<br>            buy = newbuy;<br>            sell = newsell;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sell;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="2-买卖芯片的最佳时机数组"><a href="#2-买卖芯片的最佳时机数组" class="headerlink" title="2. 买卖芯片的最佳时机数组"></a>2. 买卖芯片的最佳时机数组</h1><p>prices 记录了某芯片近期的交易价格，其中 prices[i] 表示的 i 天该芯片的价格。你只能选择 某一天 买入芯片，并选择在 未来的某一个不同的日子 卖出该芯片。请设计一个算法计算并返回你从这笔交易中能获取的最大利润。<br>如果你不能获取任何利润，返回 0。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bestTiming</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(prices.<span class="hljs-built_in">empty</span>()) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> smallest = prices[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i&lt;prices.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-keyword">if</span>(smallest &lt; prices[i]) result = <span class="hljs-built_in">max</span>(result, prices[i]-smallest);<br>            <span class="hljs-keyword">else</span> smallest = prices[i]; <br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="3-稀疏矩阵的乘法"><a href="#3-稀疏矩阵的乘法" class="headerlink" title="3. 稀疏矩阵的乘法"></a>3. 稀疏矩阵的乘法</h1><p>给定两个 稀疏矩阵 ：大小为 m x k 的稀疏矩阵 mat1 和大小为 k x n 的稀疏矩阵 mat2 ，返回 mat1 x mat2 的结果。你可以假设乘法总是可能的<br><img src="/img/%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">multiply</span>(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; mat1, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; mat2) &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; newmat2;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; result;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j&lt;mat2[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>(); j++)&#123;<br>            vector&lt;<span class="hljs-type">int</span>&gt; tmp;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;mat2.<span class="hljs-built_in">size</span>(); i++)&#123;<br>                tmp.<span class="hljs-built_in">push_back</span>(mat2[i][j]);<br>            &#125;<br>            newmat2.<span class="hljs-built_in">push_back</span>(tmp);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;mat1.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            vector&lt;<span class="hljs-type">int</span>&gt;tmp;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j&lt;newmat2.<span class="hljs-built_in">size</span>(); j++)&#123;<br>                <span class="hljs-type">int</span> value = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k&lt;mat1[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>(); k++)&#123;<br>                    value += mat1[i][k]*newmat2[j][k];<br>                &#125;<br>                tmp.<span class="hljs-built_in">push_back</span>(value);<br>            &#125;<br>            result.<span class="hljs-built_in">push_back</span>(tmp);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br>@版权归LeedCode所有<br><br></code></pre></td></tr></table></figure><!--版权归LeedCode所有-->]]></content>
    
    
    <categories>
      
      <category>Daily Algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
