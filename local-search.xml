<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LeetCode-Day21</title>
    <link href="/2024/02/01/Algorithms/LeetCode/LeetCode-20240201/"/>
    <url>/2024/02/01/Algorithms/LeetCode/LeetCode-20240201/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="1-使循环数组所有元素相等的最少秒数"><a href="#1-使循环数组所有元素相等的最少秒数" class="headerlink" title="1. 使循环数组所有元素相等的最少秒数"></a>1. 使循环数组所有元素相等的最少秒数</h1><p>给你一个下标从 0 开始长度为 n 的数组 nums 。</p><p>每一秒，你可以对数组执行以下操作：</p><ul><li>对于范围在 [0, n - 1] 内的每一个下标 i ，将 nums[i] 替换成 nums[i] ，nums[(i - 1 + n) % n] 或者 nums[(i + 1) % n] 三者之一。<br>注意，所有元素会被同时替换。</li></ul><p>请你返回将数组 nums 中所有元素变成相等元素所需要的 最少 秒数。<br><img src="/img/Leetcode/%E4%BD%BF%E5%BE%AA%E7%8E%AF%E6%95%B0%E7%BB%84%E6%89%80%E6%9C%89%E5%85%83%E7%B4%A0%E7%9B%B8%E7%AD%89%E7%9A%84%E6%9C%80%E5%B0%91%E7%A7%92%E6%95%B0.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minimumSeconds</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">int</span>,vector&lt;<span class="hljs-type">int</span>&gt;&gt; mp;<br>        <span class="hljs-type">int</span> result = INT_MAX;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            mp[nums[i]].<span class="hljs-built_in">push_back</span>(i);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it = mp.<span class="hljs-built_in">begin</span>(); it != mp.<span class="hljs-built_in">end</span>(); it++)&#123;<br>            vector&lt;<span class="hljs-type">int</span>&gt; tmp_vec = it-&gt;second;<br>            <span class="hljs-type">int</span> distance = <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> tmp_n = tmp_vec.<span class="hljs-built_in">size</span>();<br>            distance = <span class="hljs-built_in">max</span>(distance, (tmp_vec[<span class="hljs-number">0</span>]+n-tmp_vec[tmp_n<span class="hljs-number">-1</span>])/<span class="hljs-number">2</span>);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span> ;i&lt;tmp_n; i++)&#123;<br>                distance = <span class="hljs-built_in">max</span>(distance, (tmp_vec[i]-tmp_vec[i<span class="hljs-number">-1</span>])/<span class="hljs-number">2</span>);<br>            &#125;<br>            result = <span class="hljs-built_in">min</span>(result,distance);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="2-自由之路"><a href="#2-自由之路" class="headerlink" title="2.  自由之路"></a>2.  自由之路</h1><p>电子游戏“辐射4”中，任务 “通向自由” 要求玩家到达名为 “Freedom Trail Ring” 的金属表盘，并使用表盘拼写特定关键词才能开门。</p><p>给定一个字符串 ring ，表示刻在外环上的编码；给定另一个字符串 key ，表示需要拼写的关键词。您需要算出能够拼写关键词中所有字符的最少步数。</p><p>最初，ring 的第一个字符与 12:00 方向对齐。您需要顺时针或逆时针旋转 ring 以使 key 的一个字符在 12:00 方向对齐，然后按下中心按钮，以此逐个拼写完 key 中的所有字符。</p><p>旋转 ring 拼出 key 字符 key[i] 的阶段中：</p><ol><li>您可以将 ring 顺时针或逆时针旋转 一个位置 ，计为1步。旋转的最终目的是将字符串 ring 的一个字符与 12:00 方向对齐，并且这个字符必须等于字符 key[i] 。</li><li>如果字符 key[i] 已经对齐到12:00方向，您需要按下中心按钮进行拼写，这也将算作 1 步。按完之后，您可以开始拼写 key 的下一个字符（下一阶段）, 直至完成所有拼写。<br><img src="/img/Leetcode/%E8%87%AA%E7%94%B1%E4%B9%8B%E8%B7%AF.png"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findRotateSteps</span><span class="hljs-params">(string ring, string key)</span> </span>&#123;<br>        <span class="hljs-type">int</span> result = INT_MAX;<br>        <span class="hljs-type">int</span> ri = ring.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> ke = key.<span class="hljs-built_in">size</span>();<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(ke,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(ri,INT_MAX));<br>        array&lt;vector&lt;<span class="hljs-type">int</span>&gt;,26&gt; position;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;ri; i++)&#123;<br>            position[ring[i]-<span class="hljs-string">&#x27;a&#x27;</span>].<span class="hljs-built_in">push_back</span>(i);<br>        &#125;<br>        vector&lt;<span class="hljs-type">int</span>&gt; ke0 = position[key[<span class="hljs-number">0</span>]-<span class="hljs-string">&#x27;a&#x27;</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i:ke0)&#123;<br>            dp[<span class="hljs-number">0</span>][i] = <span class="hljs-built_in">min</span>(&#123;i, ri-i&#125;) + <span class="hljs-number">1</span>; <br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;ke; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> j:position[key[i]-<span class="hljs-string">&#x27;a&#x27;</span>])&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> k:position[key[i<span class="hljs-number">-1</span>]-<span class="hljs-string">&#x27;a&#x27;</span>])&#123;<br>                    dp[i][j] = <span class="hljs-built_in">min</span>(&#123;dp[i][j], dp[i<span class="hljs-number">-1</span>][k] + <span class="hljs-built_in">min</span>(<span class="hljs-built_in">abs</span>(j-k), ri-<span class="hljs-built_in">abs</span>(j-k)) + <span class="hljs-number">1</span>&#125;);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i:dp[ke<span class="hljs-number">-1</span>])&#123;<br>            result = <span class="hljs-built_in">min</span>(result,i);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ol><h1 id="3-美丽塔I"><a href="#3-美丽塔I" class="headerlink" title="3. 美丽塔I"></a>3. 美丽塔I</h1><p>给你一个长度为 n 下标从 0 开始的整数数组 maxHeights 。</p><p>你的任务是在坐标轴上建 n 座塔。第 i 座塔的下标为 i ，高度为 heights[i] 。</p><p>如果以下条件满足，我们称这些塔是 美丽 的：</p><ol><li>1 &lt;&#x3D; heights[i] &lt;&#x3D; maxHeights[i]</li><li>heights 是一个 山脉 数组。<br>如果存在下标 i 满足以下条件，那么我们称数组 heights 是一个 山脉 数组：</li></ol><ul><li>对于所有 0 &lt; j &lt;&#x3D; i ，都有 heights[j - 1] &lt;&#x3D; heights[j]</li><li>对于所有 i &lt;&#x3D; k &lt; n - 1 ，都有 heights[k + 1] &lt;&#x3D; heights[k]<br>请你返回满足 美丽塔 要求的方案中，高度和的最大值 。<br><img src="/img/Leetcode/%E7%BE%8E%E4%B8%BD%E5%A1%94I.png"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">maximumSumOfHeights</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; maxHeights)</span> </span>&#123;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> result = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> n = maxHeights.<span class="hljs-built_in">size</span>();<br>        stack&lt;<span class="hljs-type">int</span>&gt; st;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; <span class="hljs-title">pre</span><span class="hljs-params">(n+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> summation = <span class="hljs-number">0</span>;;<br><br>        st.<span class="hljs-built_in">push</span>(<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-keyword">while</span>(st.<span class="hljs-built_in">size</span>()&gt;<span class="hljs-number">1</span> &amp;&amp; maxHeights[i]&lt;maxHeights[st.<span class="hljs-built_in">top</span>()])&#123;<br>                <span class="hljs-type">int</span> j = st.<span class="hljs-built_in">top</span>();<br>                st.<span class="hljs-built_in">pop</span>();<br>                summation -= (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)(maxHeights[j])*(j-st.<span class="hljs-built_in">top</span>());<br>            &#125;<br>            summation += (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)maxHeights[i]*(i-st.<span class="hljs-built_in">top</span>());<br>            pre[i+<span class="hljs-number">1</span>]  =summation;<br>            st.<span class="hljs-built_in">push</span>(i);<br>        &#125;<br><br>        st = <span class="hljs-built_in">stack</span>&lt;<span class="hljs-type">int</span>&gt; ();<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> tmp = <span class="hljs-number">0</span>;<br>        st.<span class="hljs-built_in">push</span>(n);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-keyword">while</span>(st.<span class="hljs-built_in">size</span>()&gt;<span class="hljs-number">1</span> &amp;&amp; maxHeights[i]&lt;maxHeights[st.<span class="hljs-built_in">top</span>()])&#123;<br>                <span class="hljs-type">int</span> j = st.<span class="hljs-built_in">top</span>();<br>                st.<span class="hljs-built_in">pop</span>();<br>                tmp -= (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)(maxHeights[j])*(st.<span class="hljs-built_in">top</span>()-j);<br>            &#125;<br>            tmp += (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)maxHeights[i]*(st.<span class="hljs-built_in">top</span>()-i);<br>            st.<span class="hljs-built_in">push</span>(i);<br>            result = <span class="hljs-built_in">max</span>(result, tmp+pre[i]);<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="4-前序遍历构造二叉搜索树"><a href="#4-前序遍历构造二叉搜索树" class="headerlink" title="4. 前序遍历构造二叉搜索树"></a>4. 前序遍历构造二叉搜索树</h1><p>给定一个整数数组，它表示BST(即 二叉搜索树 )的 先序遍历 ，构造树并返回其根。</p><p>保证 对于给定的测试用例，总是有可能找到具有给定需求的二叉搜索树。</p><p>二叉搜索树 是一棵二叉树，其中每个节点， Node.left 的任何后代的值 严格小于 Node.val , Node.right 的任何后代的值 严格大于 Node.val。</p><p>二叉树的 前序遍历 首先显示节点的值，然后遍历Node.left，最后遍历Node.right。<br><img src="/img/Leetcode/%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">bstFromPreorder</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; preorder)</span> </span>&#123;<br>        TreeNode* result = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">-1</span>);<br>        stack&lt;TreeNode*&gt; st;<br>        <span class="hljs-type">int</span> n = preorder.<span class="hljs-built_in">size</span>();<br>        st.<span class="hljs-built_in">push</span>(result);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            TreeNode* tmp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(preorder[i]);<br>            TreeNode* root;<br>            <span class="hljs-keyword">if</span>(!st.<span class="hljs-built_in">empty</span>() &amp;&amp; preorder[i]&lt;st.<span class="hljs-built_in">top</span>()-&gt;val)&#123;<br>                st.<span class="hljs-built_in">top</span>()-&gt;left = tmp;<br>                st.<span class="hljs-built_in">push</span>(tmp);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>() &amp;&amp; preorder[i]&gt;st.<span class="hljs-built_in">top</span>()-&gt;val)&#123;<br>                root = st.<span class="hljs-built_in">top</span>();<br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            root-&gt;right = tmp;<br>            st.<span class="hljs-built_in">push</span>(tmp);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result-&gt;right;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="5-车队"><a href="#5-车队" class="headerlink" title="5. 车队"></a>5. 车队</h1><p>在一条单行道上，有 n 辆车开往同一目的地。目的地是几英里以外的 target 。</p><p>给定两个整数数组 position 和 speed ，长度都是 n ，其中 position[i] 是第 i 辆车的位置， speed[i] 是第 i 辆车的速度(单位是英里&#x2F;小时)。</p><p>一辆车永远不会超过前面的另一辆车，但它可以追上去，并与前车 以相同的速度 紧接着行驶。此时，我们会忽略这两辆车之间的距离，也就是说，它们被假定处于相同的位置。</p><p>车队 是一些由行驶在相同位置、具有相同速度的车组成的非空集合。注意，一辆车也可以是一个车队。</p><p>即便一辆车在目的地才赶上了一个车队，它们仍然会被视作是同一个车队。</p><p>返回到达目的地的 车队数量 。<br><img src="/img/Leetcode/%E8%BD%A6%E9%98%9F.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">carFleet</span><span class="hljs-params">(<span class="hljs-type">int</span> target, vector&lt;<span class="hljs-type">int</span>&gt;&amp; position, vector&lt;<span class="hljs-type">int</span>&gt;&amp; speed)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = position.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        vector&lt;vector&lt;<span class="hljs-type">double</span>&gt;&gt; <span class="hljs-built_in">time_list</span>(target);<br>        stack&lt;<span class="hljs-type">double</span>&gt; st;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-type">int</span> diff = target - position[i];<br>            time_list[position[i]].<span class="hljs-built_in">push_back</span>((<span class="hljs-type">double</span>) diff / (<span class="hljs-type">double</span>) speed[i]);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = time_list.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = time_list[i].<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>; j&gt;=<span class="hljs-number">0</span>; j--)&#123;<br>                <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">empty</span>() || (!st.<span class="hljs-built_in">empty</span>() &amp;&amp; time_list[i][j]&gt;st.<span class="hljs-built_in">top</span>()))&#123;<br>                    st.<span class="hljs-built_in">push</span>(time_list[i][j]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        result = st.<span class="hljs-built_in">size</span>();<br><br>        <span class="hljs-keyword">return</span> result;    <br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="6-最大交换"><a href="#6-最大交换" class="headerlink" title="6. 最大交换"></a>6. 最大交换</h1><p>给定一个非负整数，你至多可以交换一次数字中的任意两位。返回你能得到的最大值。<br><img src="/img/Leetcode/%E6%9C%80%E5%A4%A7%E4%BA%A4%E6%8D%A2.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maximumSwap</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> </span>&#123;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        string str = <span class="hljs-built_in">to_string</span>(num);<br>        <span class="hljs-type">int</span> n = str.<span class="hljs-built_in">size</span>();<br><br>        <span class="hljs-type">int</span> max_str = str[n<span class="hljs-number">-1</span>]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-type">int</span> max_index = n<span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> swap_index_l = <span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> swap_index_r;<br>        <span class="hljs-type">char</span> tmp;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-2</span>; i&gt;=<span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-keyword">if</span>((str[i]-<span class="hljs-string">&#x27;0&#x27;</span>)&gt;max_str)&#123;<br>                max_str = str[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>                max_index = i;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((str[i]-<span class="hljs-string">&#x27;0&#x27;</span>)&lt;max_str)&#123;<br>                swap_index_l = i;<br>                swap_index_r = max_index;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(swap_index_l&gt;=<span class="hljs-number">0</span>)&#123;<br>            tmp = str[swap_index_l];<br>            str[swap_index_l] = str[swap_index_r];<br>            str[swap_index_r] = tmp;<br>        &#125;<br><br>        result = <span class="hljs-built_in">stoi</span>(str);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>单调栈</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maximumSwap</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; num_vec;<br>        <span class="hljs-type">int</span> result = num;<br>        <span class="hljs-type">int</span> r_index = <span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> l_index = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> tmp_index;<br>        stack&lt;<span class="hljs-type">int</span>&gt; st;<br>        <span class="hljs-type">int</span> max_r_index;<br>        <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span>(num)&#123;<br>            num_vec.<span class="hljs-built_in">push_back</span>(num%<span class="hljs-number">10</span>);<br>            num /= <span class="hljs-number">10</span>;<br>            n++;<br>        &#125;<br>        <span class="hljs-built_in">reverse</span>(num_vec.<span class="hljs-built_in">begin</span>(), num_vec.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(!st.<span class="hljs-built_in">empty</span>() &amp;&amp; num_vec[i] &gt; num_vec[st.<span class="hljs-built_in">top</span>()])&#123;<br>                r_index = i;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            st.<span class="hljs-built_in">push</span>(i);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(r_index == <span class="hljs-number">-1</span>)&#123;<span class="hljs-keyword">return</span> result;&#125;<br>        max_r_index = num_vec[r_index];<br>        tmp_index = r_index;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>; i&gt;tmp_index; i--)&#123;<br>            <span class="hljs-keyword">if</span>(num_vec[i] &gt; max_r_index)&#123;<br>                r_index = i;<br>                max_r_index = num_vec[i];<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num_vec[i] == max_r_index)&#123;<br>                <span class="hljs-keyword">if</span>(i&gt;r_index)&#123;r_index = i;&#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>() &amp;&amp; num_vec[r_index] &gt; num_vec[st.<span class="hljs-built_in">top</span>()])&#123;<br>            l_index = st.<span class="hljs-built_in">top</span>();<br>            st.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        <span class="hljs-built_in">swap</span>(num_vec[l_index], num_vec[r_index]);<br>        result = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            result = <span class="hljs-number">10</span>*result + num_vec[i];<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>@题目版权归Leetcode所有</p>]]></content>
    
    
    <categories>
      
      <category>Daily Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL_exercises_2</title>
    <link href="/2024/01/30/SQL/Daily%20Exercises/SQL_exercises_2/"/>
    <url>/2024/01/30/SQL/Daily%20Exercises/SQL_exercises_2/</url>
    
    <content type="html"><![CDATA[<p><a href="https://sql-ex.ru/learn_exercises.php">SQL exercises-SELECT (learning stage)</a></p><span id="more"></span><p>The database of naval ships that took part in World War II is under consideration. The database consists of the following relations:<br>Classes(class, type, country, numGuns, bore, displacement)<br>Ships(name, class, launched)<br>Battles(name, date)<br>Outcomes(ship, battle, result)<br>Ships in classes all have the same general design. A class is normally assigned either the name of the first ship built according to the corresponding design, or a name that is different from any ship name in the database. The ship whose name is assigned to a class is called a lead ship.<br>The Classes relation includes the name of the class, type (can be either bb for a battle ship, or bc for a battle cruiser), country the ship was built in, the number of main guns, gun caliber (bore diameter in inches), and displacement (weight in tons). The Ships relation holds information about the ship name, the name of its corresponding class, and the year the ship was launched. The Battles relation contains names and dates of battles the ships participated in, and the Outcomes relation - the battle result for a given ship (may be sunk, damaged, or OK, the last value meaning the ship survived the battle unharmed).<br>Notes: 1) The Outcomes relation may contain ships not present in the Ships relation. 2) A ship sunk can’t participate in later battles. 3) For historical reasons, lead ships are referred to as head ships in many exercises.4) A ship found in the Outcomes table but not in the Ships table is still considered in the database. This is true even if it is sunk.</p><h1 id="Exercise-14"><a href="#Exercise-14" class="headerlink" title="Exercise: 14"></a>Exercise: 14</h1><p>For the ships in the Ships table that have at least 10 guns, get the class, name, and country.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Ships.class, name , country<br>  <span class="hljs-keyword">FROM</span> Classes<br><span class="hljs-keyword">JOIN</span> Ships<br>  <span class="hljs-keyword">ON</span>(Classes.class <span class="hljs-operator">=</span> Ships.class)<br><span class="hljs-keyword">WHERE</span> numGuns<span class="hljs-operator">&gt;=</span><span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-Day20</title>
    <link href="/2024/01/29/Algorithms/LeetCode/LeetCode-20240129/"/>
    <url>/2024/01/29/Algorithms/LeetCode/LeetCode-20240129/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="1-计算K置位下标对应元素的和"><a href="#1-计算K置位下标对应元素的和" class="headerlink" title="1. 计算K置位下标对应元素的和"></a>1. 计算K置位下标对应元素的和</h1><p>给你一个下标从 0 开始的整数数组 nums 和一个整数 k 。</p><p>请你用整数形式返回 nums 中的特定元素之 和 ，这些特定元素满足：其对应下标的二进制表示中恰存在 k 个置位。</p><p>整数的二进制表示中的 1 就是这个整数的 置位 。</p><p>例如，21 的二进制表示为 10101 ，其中有 3 个置位。<br><img src="/img/Leetcode/%E8%AE%A1%E7%AE%97K%E7%BD%AE%E4%BD%8D%E4%B8%8B%E6%A0%87%E5%AF%B9%E5%BA%94%E5%85%83%E7%B4%A0%E7%9A%84%E5%92%8C.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sumIndicesWithKSetBits</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br><br>        function&lt;<span class="hljs-type">int</span>(<span class="hljs-type">int</span>)&gt; cntbit = [&amp;](<span class="hljs-type">int</span> n)&#123;<br>            <span class="hljs-type">int</span> lb;<br>            <span class="hljs-type">int</span> res= <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(n)&#123;<br>                lb = n&amp;(-n);<br>                n ^= lb;<br>                res++;<br>            &#125;<br>            <span class="hljs-keyword">return</span> res; <br>        &#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">cntbit</span>(i) == k)&#123;result+=nums[i];&#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="2-水壶问题"><a href="#2-水壶问题" class="headerlink" title="2.  水壶问题"></a>2.  水壶问题</h1><p>有两个水壶，容量分别为 jug1Capacity 和 jug2Capacity 升。水的供应是无限的。确定是否有可能使用这两个壶准确得到 targetCapacity 升。<br>如果可以得到 targetCapacity 升水，最后请用以上水壶中的一或两个来盛放取得的 targetCapacity 升水。</p><p>你可以：</p><ul><li>装满任意一个水壶</li><li>清空任意一个水壶</li><li>从一个水壶向另外一个水壶倒水，直到装满或者倒空<br><img src="/img/Leetcode/%E6%B0%B4%E5%A3%B6%E9%97%AE%E9%A2%98.png"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">canMeasureWater</span><span class="hljs-params">(<span class="hljs-type">int</span> jug1Capacity, <span class="hljs-type">int</span> jug2Capacity, <span class="hljs-type">int</span> targetCapacity)</span> </span>&#123;<br>        <span class="hljs-type">int</span> large = <span class="hljs-built_in">max</span>(jug1Capacity, jug2Capacity);<br>        <span class="hljs-type">int</span> small = <span class="hljs-built_in">min</span>(jug1Capacity, jug2Capacity);<br>        <span class="hljs-type">int</span> total = small+large;<br><br>        <span class="hljs-keyword">while</span>(total)&#123;<br>            <span class="hljs-keyword">if</span>(total == targetCapacity)&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<br><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(total&gt;=small)&#123;total -= small;&#125;<br><br>            <span class="hljs-keyword">else</span>&#123;<br>                total += large;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="3-数组中的字符串匹配"><a href="#3-数组中的字符串匹配" class="headerlink" title="3. 数组中的字符串匹配"></a>3. 数组中的字符串匹配</h1><p>给你一个字符串数组 words ，数组中的每个字符串都可以看作是一个单词。请你按 任意 顺序返回 words 中是其他单词的子字符串的所有单词。</p><p>如果你可以删除 words[j] 最左侧和&#x2F;或最右侧的若干字符得到 words[i] ，那么字符串 words[i] 就是 words[j] 的一个子字符串。<br><img src="/img/Leetcode/%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">stringMatching</span><span class="hljs-params">(vector&lt;string&gt;&amp; words)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = words.<span class="hljs-built_in">size</span>();<br>        vector&lt;string&gt; result;<br>        <span class="hljs-type">int</span> index_s = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> index_e = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> len = <span class="hljs-number">0</span>;<br>        string st = <span class="hljs-string">&quot;&quot;</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> w:words)&#123;<br>            len += w.<span class="hljs-built_in">size</span>() + <span class="hljs-number">1</span>;<br>            st += w;<br>            st += <span class="hljs-string">&#x27;1&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> w:words)&#123;<br>            string tmp;<br>            index_e += w.<span class="hljs-built_in">size</span>()+<span class="hljs-number">1</span>;<br>            len = len - w.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>            tmp = st.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>,index_s);<br>            tmp += st.<span class="hljs-built_in">substr</span>(index_e,len);<br>            index_s = index_e;<br>            <span class="hljs-keyword">if</span>(tmp.<span class="hljs-built_in">find</span>(w) != string::npos)&#123;<br>                result.<span class="hljs-built_in">push_back</span>(w);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="4-最大合金数"><a href="#4-最大合金数" class="headerlink" title="4. 最大合金数"></a>4. 最大合金数</h1><p>假设你是一家合金制造公司的老板，你的公司使用多种金属来制造合金。现在共有 n 种不同类型的金属可以使用，并且你可以使用 k 台机器来制造合金。每台机器都需要特定数量的每种金属来创建合金。</p><p>对于第 i 台机器而言，创建合金需要 composition[i][j] 份 j 类型金属。最初，你拥有 stock[i] 份 i 类型金属，而每购入一份 i 类型金属需要花费 cost[i] 的金钱。</p><p>给你整数 n、k、budget，下标从 1 开始的二维数组 composition，两个下标从 1 开始的数组 stock 和 cost，请你在预算不超过 budget 金钱的前提下，最大化 公司制造合金的数量。</p><p>所有合金都需要由同一台机器制造。</p><p>返回公司可以制造的最大合金数。<br><img src="/img/Leetcode/%E6%9C%80%E5%A4%A7%E5%90%88%E9%87%91%E6%95%B0.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxNumberOfAlloys</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> budget, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; composition, vector&lt;<span class="hljs-type">int</span>&gt;&amp; stock, vector&lt;<span class="hljs-type">int</span>&gt;&amp; cost)</span> </span>&#123;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> result = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> right = <span class="hljs-number">1</span>*<span class="hljs-number">1e8</span>;<br>        <span class="hljs-type">int</span> middle;<br><br>        function&lt;<span class="hljs-type">bool</span>(vector&lt;<span class="hljs-type">int</span>&gt;, <span class="hljs-type">long</span> <span class="hljs-type">long</span>)&gt; produce_num = [&amp;](vector&lt;<span class="hljs-type">int</span>&gt; comp, <span class="hljs-type">long</span> <span class="hljs-type">long</span> num)&#123;<br>            <span class="hljs-type">int</span> cos = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>                cos += <span class="hljs-built_in">max</span>(<span class="hljs-number">0LL</span>, comp[i]*num - stock[i])*cost[i];<br>                <span class="hljs-keyword">if</span>(cos&gt;budget)&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;k; i++)&#123;<br>            left = <span class="hljs-number">0</span>;<br>            right = <span class="hljs-number">2</span>*<span class="hljs-number">1e8</span>;<br>            <span class="hljs-keyword">while</span>(left&lt;right)&#123;<br>                middle = (left+right+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">produce_num</span>(composition[i], middle))&#123;<br>                    left = middle; <br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;right = middle<span class="hljs-number">-1</span>;&#125;<br>            &#125;<br>            result = <span class="hljs-built_in">max</span>(result, left);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>@题目版权归Leetcode所有</p>]]></content>
    
    
    <categories>
      
      <category>Daily Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL_exercises_1</title>
    <link href="/2024/01/26/SQL/Daily%20Exercises/SQL_exercises_1/"/>
    <url>/2024/01/26/SQL/Daily%20Exercises/SQL_exercises_1/</url>
    
    <content type="html"><![CDATA[<p><a href="https://sql-ex.ru/learn_exercises.php">SQL exercises-SELECT (learning stage)</a></p><span id="more"></span><p>The database scheme consists of four tables:<br>Product(maker, model, type)<br>PC(code, model, speed, ram, hd, cd, price)<br>Laptop(code, model, speed, ram, hd, screen, price)<br>Printer(code, model, color, type, price)<br>The Product table contains data on the maker, model number, and type of product (‘PC’, ‘Laptop’, or ‘Printer’). It is assumed that model numbers in the Product table are unique for all makers and product types. Each personal computer in the PC table is unambiguously identified by a unique code, and is additionally characterized by its model (foreign key referring to the Product table), processor speed (in MHz) – speed field, RAM capacity (in Mb) - ram, hard disk drive capacity (in Gb) – hd, CD-ROM speed (e.g, ‘4x’) - cd, and its price. The Laptop table is similar to the PC table, except that instead of the CD-ROM speed, it contains the screen size (in inches) – screen. For each printer model in the Printer table, its output type (‘y’ for color and ‘n’ for monochrome) – color field, printing technology (‘Laser’, ‘Jet’, or ‘Matrix’) – type, and price are specified.</p><h1 id="Exercise-1"><a href="#Exercise-1" class="headerlink" title="Exercise: 1"></a>Exercise: 1</h1><p>Find the model number, speed and hard drive capacity for all the PCs with prices below $500.<br>Result set: model, speed, hd.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> model,speed,hd <span class="hljs-keyword">FROM</span> PC <span class="hljs-keyword">WHERE</span> price<span class="hljs-operator">&lt;</span><span class="hljs-number">500</span>;<br></code></pre></td></tr></table></figure><h1 id="Exercise-2"><a href="#Exercise-2" class="headerlink" title="Exercise: 2"></a>Exercise: 2</h1><p>List all printer makers. Result set: maker.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <br>  <span class="hljs-keyword">DISTINCT</span> maker <br><span class="hljs-keyword">FROM</span> <br>  Product <br><span class="hljs-keyword">WHERE</span> <br>  type <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Printer&#x27;</span>;<br></code></pre></td></tr></table></figure><h1 id="Exercise-3"><a href="#Exercise-3" class="headerlink" title="Exercise: 3"></a>Exercise: 3</h1><p>Find the model number, RAM and screen size of the laptops with prices over $1000.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>  model,ram,screen<br><span class="hljs-keyword">FROM</span><br>  Laptop<br><span class="hljs-keyword">WHERE</span><br>  price<span class="hljs-operator">&gt;</span><span class="hljs-number">1000</span>;<br></code></pre></td></tr></table></figure><h1 id="Exercise-4"><a href="#Exercise-4" class="headerlink" title="Exercise: 4"></a>Exercise: 4</h1><p>Find all records from the Printer table containing data about color printers.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <br>  <span class="hljs-operator">*</span> <br><span class="hljs-keyword">FROM</span> <br>  Printer <br><span class="hljs-keyword">WHERE</span> <br>  color<span class="hljs-operator">=</span><span class="hljs-string">&#x27;y&#x27;</span>;<br></code></pre></td></tr></table></figure><h1 id="Exercise-5"><a href="#Exercise-5" class="headerlink" title="Exercise: 5"></a>Exercise: 5</h1><p>Find the model number, speed and hard drive capacity of PCs cheaper than $600 having a 12x or a 24x CD drive.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <br>  model,speed,hd <br><span class="hljs-keyword">FROM</span><br>  PC<br><span class="hljs-keyword">WHERE</span> <br>  price<span class="hljs-operator">&lt;</span><span class="hljs-number">600</span> <span class="hljs-keyword">AND</span> (cd<span class="hljs-operator">=</span><span class="hljs-string">&#x27;12x&#x27;</span> <span class="hljs-keyword">OR</span> cd<span class="hljs-operator">=</span><span class="hljs-string">&#x27;24x&#x27;</span>);<br><br></code></pre></td></tr></table></figure><h1 id="Exercise-6"><a href="#Exercise-6" class="headerlink" title="Exercise: 6"></a>Exercise: 6</h1><p>For each maker producing laptops with a hard drive capacity of 10 Gb or higher, find the speed of such laptops. Result set: maker, speed.</p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> maker,speed<br>  <span class="hljs-keyword">FROM</span> Laptop<br><span class="hljs-keyword">JOIN</span> Product<br>  <span class="hljs-keyword">ON</span> Laptop.model <span class="hljs-operator">=</span> Product.model<br><span class="hljs-keyword">WHERE</span> hd<span class="hljs-operator">&gt;=</span><span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> Product.maker, Laptop.speed<br>  <span class="hljs-keyword">FROM</span> Product, Laptop <br><span class="hljs-keyword">WHERE</span> Laptop.hd <span class="hljs-operator">&gt;=</span> <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><h1 id="Exercise-7"><a href="#Exercise-7" class="headerlink" title="Exercise: 7"></a>Exercise: 7</h1><p>Get the models and prices for all commercially available products (of any type) produced by maker B.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> model,price<br>  <span class="hljs-keyword">FROM</span> PC<br><span class="hljs-keyword">WHERE</span> model <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> model <br>  <span class="hljs-keyword">FROM</span> Product <br><span class="hljs-keyword">WHERE</span> type <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;PC&#x27;</span> <span class="hljs-keyword">AND</span> maker<span class="hljs-operator">=</span><span class="hljs-string">&#x27;B&#x27;</span>)<br><br><span class="hljs-keyword">UNION</span> <br><br><span class="hljs-keyword">SELECT</span> model,price<br>  <span class="hljs-keyword">FROM</span> Laptop<br><span class="hljs-keyword">WHERE</span> model <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> model <br>  <span class="hljs-keyword">FROM</span> Product <br><span class="hljs-keyword">WHERE</span> type <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Laptop&#x27;</span> <span class="hljs-keyword">AND</span> maker<span class="hljs-operator">=</span><span class="hljs-string">&#x27;B&#x27;</span>)<br><br><span class="hljs-keyword">UNION</span> <br><br><span class="hljs-keyword">SELECT</span> model,price<br>  <span class="hljs-keyword">FROM</span> Printer<br><span class="hljs-keyword">WHERE</span> model <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> model <br>  <span class="hljs-keyword">FROM</span> Product <br><span class="hljs-keyword">WHERE</span> type <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Printer&#x27;</span> <span class="hljs-keyword">AND</span> maker<span class="hljs-operator">=</span><span class="hljs-string">&#x27;B&#x27;</span>);<br></code></pre></td></tr></table></figure><h1 id="Exercise-8"><a href="#Exercise-8" class="headerlink" title="Exercise: 8"></a>Exercise: 8</h1><p>Find the makers producing PCs but not laptops.</p><h2 id="解法一-1"><a href="#解法一-1" class="headerlink" title="解法一"></a>解法一</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> maker <br>  <span class="hljs-keyword">FROM</span> Product<br><span class="hljs-keyword">WHERE</span> TYPE <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;PC&#x27;</span>)<br>  <span class="hljs-keyword">EXCEPT</span><br><span class="hljs-keyword">SELECT</span> maker <br>  <span class="hljs-keyword">FROM</span> Product <br><span class="hljs-keyword">WHERE</span> TYPE <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;Laptop&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="解法二-1"><a href="#解法二-1" class="headerlink" title="解法二"></a>解法二</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> maker<br>  <span class="hljs-keyword">FROM</span> Product<br><span class="hljs-keyword">WHERE</span> TYPE <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;PC&#x27;</span><br>  <span class="hljs-keyword">AND</span> maker <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> maker<br><span class="hljs-keyword">FROM</span> Product<br><span class="hljs-keyword">WHERE</span> TYPE <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Laptop&#x27;</span><br>);<br></code></pre></td></tr></table></figure><h1 id="Exercise-9"><a href="#Exercise-9" class="headerlink" title="Exercise: 9"></a>Exercise: 9</h1><p>Find the makers of PCs with a processor speed of 450 MHz or more. Result set: maker.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> maker <br>  <span class="hljs-keyword">FROM</span> Product <br><span class="hljs-keyword">JOIN</span> PC<br>  <span class="hljs-keyword">ON</span>(Product.model<span class="hljs-operator">=</span>PC.model)<br><span class="hljs-keyword">WHERE</span> speed <span class="hljs-operator">&gt;=</span> <span class="hljs-number">450</span>;<br></code></pre></td></tr></table></figure><h1 id="Exercise-10"><a href="#Exercise-10" class="headerlink" title="Exercise: 10"></a>Exercise: 10</h1><p>Find the printer models having the highest price. Result set: model, price.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> model,price<br>  <span class="hljs-keyword">FROM</span> Printer<br><span class="hljs-keyword">WHERE</span> price <span class="hljs-operator">=</span> (<br>  <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(price)<br><span class="hljs-keyword">FROM</span> Printer);<br></code></pre></td></tr></table></figure><h1 id="Exercise-11"><a href="#Exercise-11" class="headerlink" title="Exercise: 11"></a>Exercise: 11</h1><p>Find out the average speed of PCs.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(speed) <span class="hljs-keyword">FROM</span> PC;<br></code></pre></td></tr></table></figure><h1 id="Exercise-12"><a href="#Exercise-12" class="headerlink" title="Exercise: 12"></a>Exercise: 12</h1><p>Find out the average speed of the laptops priced over $1000.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(speed) <br>  <span class="hljs-keyword">FROM</span> Laptop<br><span class="hljs-keyword">WHERE</span> price <span class="hljs-operator">&gt;</span><span class="hljs-number">1000</span>;<br></code></pre></td></tr></table></figure><h1 id="Exercise-12-1"><a href="#Exercise-12-1" class="headerlink" title="Exercise: 12"></a>Exercise: 12</h1><p>Find out the average speed of the laptops priced over $1000.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(speed) <br>  <span class="hljs-keyword">FROM</span> Laptop<br><span class="hljs-keyword">WHERE</span> price <span class="hljs-operator">&gt;</span><span class="hljs-number">1000</span>;<br></code></pre></td></tr></table></figure><h1 id="Exercise-12-2"><a href="#Exercise-12-2" class="headerlink" title="Exercise: 12"></a>Exercise: 12</h1><p>Find out the average speed of the laptops priced over $1000.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(speed) <br>  <span class="hljs-keyword">FROM</span> Laptop<br><span class="hljs-keyword">WHERE</span> price <span class="hljs-operator">&gt;</span><span class="hljs-number">1000</span>;<br></code></pre></td></tr></table></figure><h1 id="Exercise-13"><a href="#Exercise-13" class="headerlink" title="Exercise: 13"></a>Exercise: 13</h1><p>Find out the average speed of the PCs produced by maker A.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(speed)<br>  <span class="hljs-keyword">FROM</span> PC<br><span class="hljs-keyword">JOIN</span> Product<br>  <span class="hljs-keyword">ON</span>(PC.model <span class="hljs-operator">=</span> Product.model)<br><span class="hljs-keyword">WHERE</span> maker <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;A&#x27;</span>;<br></code></pre></td></tr></table></figure><h1 id="Exercise-15"><a href="#Exercise-15" class="headerlink" title="Exercise: 15"></a>Exercise: 15</h1><p>Get hard drive capacities that are identical for two or more PCs.<br>Result set: hd.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> hd<br>  <span class="hljs-keyword">FROM</span> PC<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> hd<br>  <span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(hd)<span class="hljs-operator">&gt;=</span><span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><h1 id="Exercise-16"><a href="#Exercise-16" class="headerlink" title="Exercise: 16"></a>Exercise: 16</h1><p>Get pairs of PC models with identical speeds and the same RAM capacity. Each resulting pair should be displayed only once, i.e. (i, j) but not (j, i).<br>Result set: model with the bigger number, model with the smaller number, speed, and RAM.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> pc1.model, pc2.model, pc1.speed, pc1.ram<br>  <span class="hljs-keyword">FROM</span> PC <span class="hljs-keyword">AS</span> pc1<br><span class="hljs-keyword">JOIN</span> PC <span class="hljs-keyword">AS</span> pc2<br>  <span class="hljs-keyword">ON</span> pc1.speed <span class="hljs-operator">=</span> pc2.speed<br><span class="hljs-keyword">AND</span> pc1.ram <span class="hljs-operator">=</span> pc2.ram<br>  <span class="hljs-keyword">WHERE</span> pc1.model<span class="hljs-operator">&gt;</span>pc2.model;<br></code></pre></td></tr></table></figure><h1 id="Exercise-17"><a href="#Exercise-17" class="headerlink" title="Exercise: 17"></a>Exercise: 17</h1><p>Get the laptop models that have a speed smaller than the speed of any PC.<br>Result set: type, model, speed.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> Product.type, Laptop.model, Laptop.speed<br>  <span class="hljs-keyword">FROM</span> Product<br><span class="hljs-keyword">JOIN</span> Laptop <span class="hljs-keyword">ON</span>(Product.model <span class="hljs-operator">=</span> Laptop.model)<br>  <span class="hljs-keyword">WHERE</span>  Laptop.speed <span class="hljs-operator">&lt;</span> <span class="hljs-keyword">ALL</span>(<br><span class="hljs-keyword">SELECT</span> speed <span class="hljs-keyword">FROM</span> PC);<br></code></pre></td></tr></table></figure><h1 id="Exercise-18"><a href="#Exercise-18" class="headerlink" title="Exercise: 18"></a>Exercise: 18</h1><p>Find the makers of the cheapest color printers.<br>Result set: maker, price.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> Product.maker, Printer.price<br><span class="hljs-keyword">FROM</span> Product<br><span class="hljs-keyword">JOIN</span> Printer <span class="hljs-keyword">ON</span>(Product.model <span class="hljs-operator">=</span> Printer.model)<br><span class="hljs-keyword">WHERE</span> Printer.color <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;y&#x27;</span> <span class="hljs-keyword">AND</span> Printer.price <span class="hljs-operator">=</span> (<br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MIN</span>(Printer.price)<br>    <span class="hljs-keyword">FROM</span> Printer<br>    <span class="hljs-keyword">WHERE</span> color <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;y&#x27;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-Day19</title>
    <link href="/2024/01/26/Algorithms/LeetCode/LeetCode-20240126/"/>
    <url>/2024/01/26/Algorithms/LeetCode/LeetCode-20240126/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="1-最长交替子数组"><a href="#1-最长交替子数组" class="headerlink" title="1. 最长交替子数组"></a>1. 最长交替子数组</h1><p>给你一个下标从 0 开始的整数数组 nums 。如果 nums 中长度为 m 的子数组 s 满足以下条件，我们称它是一个 交替子数组 ：</p><ul><li>m 大于 1 。</li><li>s1 &#x3D; s0 + 1 。</li><li>下标从 0 开始的子数组 s 与数组 [s0, s1, s0, s1,…,s(m-1) % 2] 一样。也就是说，s1 - s0 &#x3D; 1 ，s2 - s1 &#x3D; -1 ，s3 - s2 &#x3D; 1 ，s4 - s3 &#x3D; -1 ，以此类推，直到 s[m - 1] - s[m - 2] &#x3D; (-1)m 。<br>请你返回 nums 中所有 交替 子数组中，最长的长度，如果不存在交替子数组，请你返回 -1 。</li></ul><p>子数组是一个数组中一段连续 非空 的元素序列。<br><img src="/img/Leetcode/%E6%9C%80%E9%95%BF%E4%BA%A4%E6%9B%BF%E5%AD%90%E6%95%B0%E7%BB%84.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">alternatingSubarray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-type">int</span> res = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>(i+<span class="hljs-number">1</span>&lt;n &amp;&amp; nums[i]+<span class="hljs-number">1</span> == nums[i+<span class="hljs-number">1</span>])&#123;<br>                res ++;<br>                result = <span class="hljs-built_in">max</span>(result, res);<br>                <span class="hljs-keyword">if</span>(i+<span class="hljs-number">2</span>&lt;n &amp;&amp; nums[i] == nums[i+<span class="hljs-number">2</span>])&#123;<br>                    i += <span class="hljs-number">2</span>;<br>                    res++;<br>                    result = <span class="hljs-built_in">max</span>(result, res);<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">break</span>;&#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="2-所有奇数长度子数组的和"><a href="#2-所有奇数长度子数组的和" class="headerlink" title="2.  所有奇数长度子数组的和"></a>2.  所有奇数长度子数组的和</h1><p>给你一个正整数数组 arr ，请你计算所有可能的奇数长度子数组的和。</p><p>子数组 定义为原数组中的一个连续子序列。</p><p>请你返回 arr 中 所有奇数长度子数组的和 。<br><img src="/img/Leetcode/%E6%89%80%E6%9C%89%E5%A5%87%E6%95%B0%E9%95%BF%E5%BA%A6%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E5%92%8C.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sumOddLengthSubarrays</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = arr.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">presum</span><span class="hljs-params">(n+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)</span></span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            presum[i+<span class="hljs-number">1</span>] = arr[i] + presum[i];<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i; j&lt;n; j++)&#123;<br>                <span class="hljs-keyword">if</span>((j-i)%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>                    result += presum[j+<span class="hljs-number">1</span>]-presum[i];<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="3-二的幂数组中查询范围内的乘积"><a href="#3-二的幂数组中查询范围内的乘积" class="headerlink" title="3. 二的幂数组中查询范围内的乘积"></a>3. 二的幂数组中查询范围内的乘积</h1><p>给你一个正整数 n ，你需要找到一个下标从 0 开始的数组 powers ，它包含 最少 数目的 2 的幂，且它们的和为 n 。powers 数组是 非递减 顺序的。根据前面描述，构造 powers 数组的方法是唯一的。</p><p>同时给你一个下标从 0 开始的二维整数数组 queries ，其中 queries[i] &#x3D; [lefti, righti] ，其中 queries[i] 表示请你求出满足 lefti &lt;&#x3D; j &lt;&#x3D; righti 的所有 powers[j] 的乘积。</p><p>请你返回一个数组 answers ，长度与 queries 的长度相同，其中 answers[i]是第 i 个查询的答案。由于查询的结果可能非常大，请你将每个 answers[i] 都对 109 + 7 取余 。<br><img src="/img/Leetcode/%E4%BA%8C%E7%9A%84%E5%B9%82%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E8%AF%A2%E8%8C%83%E5%9B%B4%E5%86%85%E7%9A%84%E4%B9%98%E7%A7%AF.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; powers;<br>    <span class="hljs-type">int</span> MOD = <span class="hljs-number">7</span>+<span class="hljs-number">1e9</span>;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">productQueries</span><span class="hljs-params">(<span class="hljs-type">int</span> n, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; queries)</span> </span>&#123;<br>        <span class="hljs-type">int</span> m = queries.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">result</span><span class="hljs-params">(m)</span></span>;<br>        <br><br>        function&lt;<span class="hljs-type">int</span>(<span class="hljs-type">int</span>)&gt; cycle = [&amp;](<span class="hljs-type">int</span> num)&#123;<br>            <span class="hljs-keyword">if</span>(num == <span class="hljs-number">0</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>            <span class="hljs-type">int</span> tmp = num;<br>            <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(tmp&gt;<span class="hljs-number">1</span>)&#123;<br>                cnt++;<br>                tmp /= <span class="hljs-number">2</span>;<br>            &#125;<br>            res = <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,cnt);<br>            powers.<span class="hljs-built_in">push_back</span>(res);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">cycle</span>(num-res);<br>        &#125;;<br>        <span class="hljs-type">int</span> tmp = <span class="hljs-built_in">cycle</span>(n);<br>        <span class="hljs-built_in">reverse</span>(powers.<span class="hljs-built_in">begin</span>(), powers.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-type">int</span> k = powers.<span class="hljs-built_in">size</span>();<br>        vector&lt;vector&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt;&gt; <span class="hljs-built_in">multi</span>(k,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt;(k,<span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;k; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i; j&lt;k; j++)&#123;<br>                <span class="hljs-keyword">if</span>(i==j)&#123;multi[i][j] = powers[i];&#125;<br>                <span class="hljs-keyword">else</span>&#123;multi[i][j] = multi[i][j<span class="hljs-number">-1</span>]*powers[j]% MOD;&#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;m; i++)&#123;<br>            <span class="hljs-type">int</span> x = queries[i][<span class="hljs-number">0</span>];<br>            <span class="hljs-type">int</span> y = queries[i][<span class="hljs-number">1</span>];<br>            result[i] = multi[x][y] ;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>        <br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><p>优化解法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; powers;<br>    <span class="hljs-type">int</span> MOD = <span class="hljs-number">7</span>+<span class="hljs-number">1e9</span>;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">productQueries</span><span class="hljs-params">(<span class="hljs-type">int</span> n, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; queries)</span> </span>&#123;<br>        <span class="hljs-type">int</span> m = queries.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">result</span><span class="hljs-params">(m)</span></span>;<br>        <span class="hljs-type">int</span> lb;<br><br>        <span class="hljs-keyword">while</span>(n)&#123;<br>            lb = n&amp;-n;<br>            powers.<span class="hljs-built_in">push_back</span>(lb);<br>            n ^= lb;<br>        &#125;<br>        <span class="hljs-type">int</span> k = powers.<span class="hljs-built_in">size</span>();<br>        vector&lt;vector&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt;&gt; <span class="hljs-built_in">multi</span>(k,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt;(k,<span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;k; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i; j&lt;k; j++)&#123;<br>                <span class="hljs-keyword">if</span>(i==j)&#123;multi[i][j] = powers[i];&#125;<br>                <span class="hljs-keyword">else</span>&#123;multi[i][j] = multi[i][j<span class="hljs-number">-1</span>]*powers[j]% MOD;&#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;m; i++)&#123;<br>            <span class="hljs-type">int</span> x = queries[i][<span class="hljs-number">0</span>];<br>            <span class="hljs-type">int</span> y = queries[i][<span class="hljs-number">1</span>];<br>            result[i] = multi[x][y] ;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>        <br><br>    &#125;<br><br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="4-段式回文"><a href="#4-段式回文" class="headerlink" title="4. 段式回文"></a>4. 段式回文</h1><p>你会得到一个字符串 text 。你应该把它分成 k 个子字符串 (subtext1, subtext2，…， subtextk) ，要求满足:</p><ul><li>subtexti 是 非空 字符串</li><li>所有子字符串的连接等于 text ( 即subtext1 + subtext2 + … + subtextk &#x3D;&#x3D; text )</li><li>对于所有 i 的有效值( 即 1 &lt;&#x3D; i &lt;&#x3D; k ) ，subtexti &#x3D;&#x3D; subtextk - i + 1 均成立<br>返回k可能最大值。<br><img src="/img/Leetcode/%E6%AE%B5%E5%BC%8F%E5%9B%9E%E6%96%87.png"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">longestDecomposition</span><span class="hljs-params">(string text)</span> </span>&#123;<br>        function&lt;<span class="hljs-type">void</span>(string)&gt; cycle = [&amp;](string st)&#123;<br>            <span class="hljs-type">int</span> n = st.<span class="hljs-built_in">size</span>();<br>            string l_str=<span class="hljs-string">&quot;&quot;</span>;<br>            string r_str =<span class="hljs-string">&quot;&quot;</span>;<br>            string sub_str;<br>            <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>)&#123;<span class="hljs-keyword">return</span>;&#125;<br><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>                l_str += st[i];<br>                r_str = st[n<span class="hljs-number">-1</span>-i] + r_str;<br>                <span class="hljs-keyword">if</span>(i==n/<span class="hljs-number">2</span>)&#123;<br>                    result++;<br>                    <span class="hljs-keyword">return</span>;&#125;<br>                <span class="hljs-keyword">if</span>(l_str == r_str)&#123;<br>                    result += <span class="hljs-number">2</span>;<br>                    sub_str = st.<span class="hljs-built_in">substr</span>(i+<span class="hljs-number">1</span>, n<span class="hljs-number">-2</span>*(i+<span class="hljs-number">1</span>));<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">cycle</span>(sub_str);<br>        &#125;;<br>        <span class="hljs-built_in">cycle</span>(text);<br>        <br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>@题目版权归Leetcode所有</li></ul>]]></content>
    
    
    <categories>
      
      <category>Daily Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tips&amp;Tricks</title>
    <link href="/2024/01/26/Algorithms/%E6%8A%80%E5%B7%A7/Tips&amp;Tricks/"/>
    <url>/2024/01/26/Algorithms/%E6%8A%80%E5%B7%A7/Tips&amp;Tricks/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="1-二进制表示中1的个数"><a href="#1-二进制表示中1的个数" class="headerlink" title="1. 二进制表示中1的个数"></a>1. 二进制表示中1的个数</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">bitnum</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>    <span class="hljs-type">int</span> lb;<br>    vector&lt;<span class="hljs-type">int</span>&gt; powers;<br><br>    <span class="hljs-keyword">while</span>(n)&#123;<br>        lb = n&amp;-n;<br>        powers.<span class="hljs-built_in">push_back</span>(lb);<br>        n ^= lb;<br>    &#125;<br>    <span class="hljs-keyword">return</span> powers;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="2-查找字符串中是否包含指定的子字符串"><a href="#2-查找字符串中是否包含指定的子字符串" class="headerlink" title="2. 查找字符串中是否包含指定的子字符串"></a>2. 查找字符串中是否包含指定的子字符串</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">find_substr</span><span class="hljs-params">(string substr)</span></span>&#123;<br>    string str;<br><br>    <span class="hljs-keyword">if</span>(str.<span class="hljs-built_in">find</span>(sub_str) != string::npos)&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Daily Algorithm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>13.Alpha Blending</title>
    <link href="/2024/01/21/SDL/13.Alpha%20Blending/"/>
    <url>/2024/01/21/SDL/13.Alpha%20Blending/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>参考博客：<a href="https://lazyfoo.net/tutorials/SDL/13_alpha_blending/index.php">Lazy Foo’ Productions</a><br>示例代码取自Lazy Foo<br><br /><br>示例代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*This source code copyrighted by Lazy Foo&#x27; Productions 2004-2024</span><br><span class="hljs-comment">and may not be redistributed without written permission.*/</span><br><br><span class="hljs-comment">//Using SDL, SDL_image, standard IO, and strings</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SDL.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SDL_image.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-comment">//Screen dimension constants</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> SCREEN_WIDTH = <span class="hljs-number">640</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> SCREEN_HEIGHT = <span class="hljs-number">480</span>;<br><br><span class="hljs-comment">//Texture wrapper class</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LTexture</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//Initializes variables</span><br><span class="hljs-built_in">LTexture</span>();<br><br><span class="hljs-comment">//Deallocates memory</span><br>~<span class="hljs-built_in">LTexture</span>();<br><br><span class="hljs-comment">//Loads image at specified path</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadFromFile</span><span class="hljs-params">( std::string path )</span></span>;<br><br><span class="hljs-comment">//Deallocates texture</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">free</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Set color modulation</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setColor</span><span class="hljs-params">( Uint8 red, Uint8 green, Uint8 blue )</span></span>;<br><br><span class="hljs-comment">//Set blending</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setBlendMode</span><span class="hljs-params">( SDL_BlendMode blending )</span></span>;<br><br><span class="hljs-comment">//Set alpha modulation</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setAlpha</span><span class="hljs-params">( Uint8 alpha )</span></span>;<br><br><span class="hljs-comment">//Renders texture at given point</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">render</span><span class="hljs-params">( <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, SDL_Rect* clip = <span class="hljs-literal">NULL</span> )</span></span>;<br><br><span class="hljs-comment">//Gets image dimensions</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getWidth</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getHeight</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">//The actual hardware texture</span><br>SDL_Texture* mTexture;<br><br><span class="hljs-comment">//Image dimensions</span><br><span class="hljs-type">int</span> mWidth;<br><span class="hljs-type">int</span> mHeight;<br>&#125;;<br><br><span class="hljs-comment">//Starts up SDL and creates window</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Loads media</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadMedia</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Frees media and shuts down SDL</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//The window we&#x27;ll be rendering to</span><br>SDL_Window* gWindow = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//The window renderer</span><br>SDL_Renderer* gRenderer = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Scene textures</span><br>LTexture gModulatedTexture;<br>LTexture gBackgroundTexture;<br><br><br>LTexture::<span class="hljs-built_in">LTexture</span>()<br>&#123;<br><span class="hljs-comment">//Initialize</span><br>mTexture = <span class="hljs-literal">NULL</span>;<br>mWidth = <span class="hljs-number">0</span>;<br>mHeight = <span class="hljs-number">0</span>;<br>&#125;<br><br>LTexture::~<span class="hljs-built_in">LTexture</span>()<br>&#123;<br><span class="hljs-comment">//Deallocate</span><br><span class="hljs-built_in">free</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">LTexture::loadFromFile</span><span class="hljs-params">( std::string path )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Get rid of preexisting texture</span><br><span class="hljs-built_in">free</span>();<br><br><span class="hljs-comment">//The final texture</span><br>SDL_Texture* newTexture = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Load image at specified path</span><br>SDL_Surface* loadedSurface = <span class="hljs-built_in">IMG_Load</span>( path.<span class="hljs-built_in">c_str</span>() );<br><span class="hljs-keyword">if</span>( loadedSurface == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Unable to load image %s! SDL_image Error: %s\n&quot;</span>, path.<span class="hljs-built_in">c_str</span>(), <span class="hljs-built_in">IMG_GetError</span>() );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Color key image</span><br><span class="hljs-built_in">SDL_SetColorKey</span>( loadedSurface, SDL_TRUE, <span class="hljs-built_in">SDL_MapRGB</span>( loadedSurface-&gt;format, <span class="hljs-number">0</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span> ) );<br><br><span class="hljs-comment">//Create texture from surface pixels</span><br>        newTexture = <span class="hljs-built_in">SDL_CreateTextureFromSurface</span>( gRenderer, loadedSurface );<br><span class="hljs-keyword">if</span>( newTexture == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Unable to create texture from %s! SDL Error: %s\n&quot;</span>, path.<span class="hljs-built_in">c_str</span>(), <span class="hljs-built_in">SDL_GetError</span>() );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Get image dimensions</span><br>mWidth = loadedSurface-&gt;w;<br>mHeight = loadedSurface-&gt;h;<br>&#125;<br><br><span class="hljs-comment">//Get rid of old loaded surface</span><br><span class="hljs-built_in">SDL_FreeSurface</span>( loadedSurface );<br>&#125;<br><br><span class="hljs-comment">//Return success</span><br>mTexture = newTexture;<br><span class="hljs-keyword">return</span> mTexture != <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LTexture::free</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Free texture if it exists</span><br><span class="hljs-keyword">if</span>( mTexture != <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">SDL_DestroyTexture</span>( mTexture );<br>mTexture = <span class="hljs-literal">NULL</span>;<br>mWidth = <span class="hljs-number">0</span>;<br>mHeight = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LTexture::setColor</span><span class="hljs-params">( Uint8 red, Uint8 green, Uint8 blue )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Modulate texture rgb</span><br><span class="hljs-built_in">SDL_SetTextureColorMod</span>( mTexture, red, green, blue );<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LTexture::setBlendMode</span><span class="hljs-params">( SDL_BlendMode blending )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Set blending function</span><br><span class="hljs-built_in">SDL_SetTextureBlendMode</span>( mTexture, blending );<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LTexture::setAlpha</span><span class="hljs-params">( Uint8 alpha )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Modulate texture alpha</span><br><span class="hljs-built_in">SDL_SetTextureAlphaMod</span>( mTexture, alpha );<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LTexture::render</span><span class="hljs-params">( <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, SDL_Rect* clip )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Set rendering space and render to screen</span><br>SDL_Rect renderQuad = &#123; x, y, mWidth, mHeight &#125;;<br><br><span class="hljs-comment">//Set clip rendering dimensions</span><br><span class="hljs-keyword">if</span>( clip != <span class="hljs-literal">NULL</span> )<br>&#123;<br>renderQuad.w = clip-&gt;w;<br>renderQuad.h = clip-&gt;h;<br>&#125;<br><br><span class="hljs-comment">//Render to screen</span><br><span class="hljs-built_in">SDL_RenderCopy</span>( gRenderer, mTexture, clip, &amp;renderQuad );<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">LTexture::getWidth</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> mWidth;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">LTexture::getHeight</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> mHeight;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Initialization flag</span><br><span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//Initialize SDL</span><br><span class="hljs-keyword">if</span>( <span class="hljs-built_in">SDL_Init</span>( SDL_INIT_VIDEO ) &lt; <span class="hljs-number">0</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;SDL could not initialize! SDL Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Set texture filtering to linear</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">SDL_SetHint</span>( SDL_HINT_RENDER_SCALE_QUALITY, <span class="hljs-string">&quot;1&quot;</span> ) )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Warning: Linear texture filtering not enabled!&quot;</span> );<br>&#125;<br><br><span class="hljs-comment">//Create window</span><br>gWindow = <span class="hljs-built_in">SDL_CreateWindow</span>( <span class="hljs-string">&quot;SDL Tutorial&quot;</span>, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN );<br><span class="hljs-keyword">if</span>( gWindow == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Window could not be created! SDL Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Create renderer for window</span><br>gRenderer = <span class="hljs-built_in">SDL_CreateRenderer</span>( gWindow, <span class="hljs-number">-1</span>, SDL_RENDERER_ACCELERATED );<br><span class="hljs-keyword">if</span>( gRenderer == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Renderer could not be created! SDL Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Initialize renderer color</span><br><span class="hljs-built_in">SDL_SetRenderDrawColor</span>( gRenderer, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span> );<br><br><span class="hljs-comment">//Initialize PNG loading</span><br><span class="hljs-type">int</span> imgFlags = IMG_INIT_PNG;<br><span class="hljs-keyword">if</span>( !( <span class="hljs-built_in">IMG_Init</span>( imgFlags ) &amp; imgFlags ) )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;SDL_image could not initialize! SDL_image Error: %s\n&quot;</span>, <span class="hljs-built_in">IMG_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> success;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadMedia</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Loading success flag</span><br><span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//Load front alpha texture</span><br><span class="hljs-keyword">if</span>( !gModulatedTexture.<span class="hljs-built_in">loadFromFile</span>( <span class="hljs-string">&quot;fadeout.png&quot;</span> ) )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load front texture!\n&quot;</span> );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Set standard alpha blending</span><br>gModulatedTexture.<span class="hljs-built_in">setBlendMode</span>( SDL_BLENDMODE_BLEND );<br>&#125;<br><br><span class="hljs-comment">//Load background texture</span><br><span class="hljs-keyword">if</span>( !gBackgroundTexture.<span class="hljs-built_in">loadFromFile</span>( <span class="hljs-string">&quot;fadein.png&quot;</span> ) )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load background texture!\n&quot;</span> );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> success;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Free loaded images</span><br>gModulatedTexture.<span class="hljs-built_in">free</span>();<br>gBackgroundTexture.<span class="hljs-built_in">free</span>();<br><br><span class="hljs-comment">//Destroy window</span><br><span class="hljs-built_in">SDL_DestroyRenderer</span>( gRenderer );<br><span class="hljs-built_in">SDL_DestroyWindow</span>( gWindow );<br>gWindow = <span class="hljs-literal">NULL</span>;<br>gRenderer = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Quit SDL subsystems</span><br><span class="hljs-built_in">IMG_Quit</span>();<br><span class="hljs-built_in">SDL_Quit</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( <span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* args[] )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Start up SDL and create window</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">init</span>() )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to initialize!\n&quot;</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Load media</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">loadMedia</span>() )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load media!\n&quot;</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Main loop flag</span><br><span class="hljs-type">bool</span> quit = <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">//Event handler</span><br>SDL_Event e;<br><br><span class="hljs-comment">//Modulation component</span><br>Uint8 a = <span class="hljs-number">255</span>;<br><br><span class="hljs-comment">//While application is running</span><br><span class="hljs-keyword">while</span>( !quit )<br>&#123;<br><span class="hljs-comment">//Handle events on queue</span><br><span class="hljs-keyword">while</span>( <span class="hljs-built_in">SDL_PollEvent</span>( &amp;e ) != <span class="hljs-number">0</span> )<br>&#123;<br><span class="hljs-comment">//User requests quit</span><br><span class="hljs-keyword">if</span>( e.type == SDL_QUIT )<br>&#123;<br>quit = <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-comment">//Handle key presses</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( e.type == SDL_KEYDOWN )<br>&#123;<br><span class="hljs-comment">//Increase alpha on w</span><br><span class="hljs-keyword">if</span>( e.key.keysym.sym == SDLK_w )<br>&#123;<br><span class="hljs-comment">//Cap if over 255</span><br><span class="hljs-keyword">if</span>( a + <span class="hljs-number">32</span> &gt; <span class="hljs-number">255</span> )<br>&#123;<br>a = <span class="hljs-number">255</span>;<br>&#125;<br><span class="hljs-comment">//Increment otherwise</span><br><span class="hljs-keyword">else</span><br>&#123;<br>a += <span class="hljs-number">32</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">//Decrease alpha on s</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( e.key.keysym.sym == SDLK_s )<br>&#123;<br><span class="hljs-comment">//Cap if below 0</span><br><span class="hljs-keyword">if</span>( a - <span class="hljs-number">32</span> &lt; <span class="hljs-number">0</span> )<br>&#123;<br>a = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//Decrement otherwise</span><br><span class="hljs-keyword">else</span><br>&#123;<br>a -= <span class="hljs-number">32</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Clear screen</span><br><span class="hljs-built_in">SDL_SetRenderDrawColor</span>( gRenderer, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span> );<br><span class="hljs-built_in">SDL_RenderClear</span>( gRenderer );<br><br><span class="hljs-comment">//Render background</span><br>gBackgroundTexture.<span class="hljs-built_in">render</span>( <span class="hljs-number">0</span>, <span class="hljs-number">0</span> );<br><br><span class="hljs-comment">//Render front blended</span><br>gModulatedTexture.<span class="hljs-built_in">setAlpha</span>( a );<br>gModulatedTexture.<span class="hljs-built_in">render</span>( <span class="hljs-number">0</span>, <span class="hljs-number">0</span> );<br><br><span class="hljs-comment">//Update screen</span><br><span class="hljs-built_in">SDL_RenderPresent</span>( gRenderer );<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Free resources and close SDL</span><br><span class="hljs-built_in">close</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>今天博文将讲解阿尔法混合。对于一个图像，我想大家熟知的是r,g,b三色素，除此之外还有一个阿尔法参数，那阿尔法参数是什么呢？<br><br /></p><h3 id="Alpha-channel"><a href="#Alpha-channel" class="headerlink" title="Alpha channel"></a>Alpha channel</h3><p>阿尔法通道是为了实现图形的透明效果而增加的额外通道，其同r,g,b一样同样采用8位信息。由于其使用8位信息，其可以表示范围从0-255可表示256级灰度。255表示不透明，从255下降至0的过程中透明度增加，直至完全透明（值为0）。<br><br /></p><h3 id=""><a href="#" class="headerlink" title=""></a><a href="/1999/01/10/SDL/Dictionary/SDL_BlendMode/" title="SDL_BlendMode">SDLDictionary SDL_BlendMode()</a></h3><p>在SDL2中能使用到的SDL_BlendMode有5种，我们这里来一一讨论。在将之前先补充一点，有助于后期读者看SDL_BlendMode定义时的理解。在SDL_BlendMode定义中对于dst和src俩个解释不是很清楚。如果直观的解释下来就是源和目标地，但什么又是源，什么又是目标地呢。举个例子，现在我们想将一张图片放到屏幕上。那么在这种情况下，屏幕对应的渲染器就是dst，而图片就是src。<br><img src="/img/SDL/SDL_BlendMode.png"><br><br /></p><h4 id="SDL-BLENDMODE-NONE"><a href="#SDL-BLENDMODE-NONE" class="headerlink" title="SDL_BLENDMODE_NONE"></a>SDL_BLENDMODE_NONE</h4><p>这个mode代表不做任何操作，从公式上也可以看出是把src的像素信息直接赋值到dst上。</p><h4 id="SDL-BLENDMODE-BLEND"><a href="#SDL-BLENDMODE-BLEND" class="headerlink" title="SDL_BLENDMODE_BLEND"></a>SDL_BLENDMODE_BLEND</h4><p>这个模式我们分两个部分看，首先是dstRGB。 对于dstRGB公式，博主是这样理解的，将具有一定透明度的图片放进原来的渲染器中，而原来的渲染器采用图片相反的透明度。这里的相反的数学表达式便是1-srcA。那么经由这样的操作，其效果相当于英文中的fade，一种若影若现，彼此交融的感觉。对于第二部分dstA，这一部分的存在是为了递归调用SDL_BLENDMODE_BLNED,.举个例子，现在假设一个dstB, 将dstA作为dstB的src， 那么将有下列等式的出现<br>$$dstB &#x3D; dstB[1-(srcA+dstA-dstAsrcA)]$$<br>$$dstB_RGB &#x3D; (dstA_RGB<em>dstA) + (dstB_RGB</em>(1- dstA))$$</p><h4 id="SDL-BLENDMODE-ADD"><a href="#SDL-BLENDMODE-ADD" class="headerlink" title="SDL_BLENDMODE_ADD"></a>SDL_BLENDMODE_ADD</h4><p>加法混合从公式来看就是dst的RGB加上src进行透明度化出处理后的RGB。需要注意一点是这里src的RGB是经过透明度处理的，也正是这个原因dst的透明值阿尔法能保持不变。</p><h4 id="SDL-BLENDMODE-MOD-SDL-BLENDMODE-MUL"><a href="#SDL-BLENDMODE-MOD-SDL-BLENDMODE-MUL" class="headerlink" title="SDL_BLENDMODE_MOD &amp;&amp; SDL_BLENDMODE_MUL"></a>SDL_BLENDMODE_MOD &amp;&amp; SDL_BLENDMODE_MUL</h4><p><img src="/img/SDL/SDL_BLENDMODE_MOD_dst.png" title="dst"><br><img src="/img/SDL/SDL_BLENDMODE_MOD_src.png" title="src"><br><img src="/img/SDL/SDL_BLENDMODE_MOD.png" title="SDL_BLENDMODE_MOD"><br><img src="/img/SDL/SDL_BLENDMODE_MUL.png" title="SDL_BLENDMODE_MUL"><br><br /></p><p>本片博文照例采用分块分析的方式，对于重复的部分这里也不会再赘述，如需查看请看上篇博文</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LTexture::setBlendMode</span><span class="hljs-params">( SDL_BlendMode blending )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Set blending function</span><br><span class="hljs-built_in">SDL_SetTextureBlendMode</span>( mTexture, blending );<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LTexture::setAlpha</span><span class="hljs-params">( Uint8 alpha )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Modulate texture alpha</span><br><span class="hljs-built_in">SDL_SetTextureAlphaMod</span>( mTexture, alpha );<br>&#125;<br></code></pre></td></tr></table></figure><p>这是类LTexture新增的两个函数，但就是对<a href="/1999/01/10/SDL/Dictionary/SDL_SetTextureBlendMode/" title="SDL_SetTextureBlendMode">SDL_SetTextureBlendMode()</a>和<a href="/1999/01/10/SDL/Dictionary/SDL_SetTextureAlphaMod/" title="SDL_SetTextureAlphaMod">SDL_SetTextureAlphaMod()</a>进行了简单的封装。<br><br /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadMedia</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Loading success flag</span><br><span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//Load front alpha texture</span><br><span class="hljs-keyword">if</span>( !gModulatedTexture.<span class="hljs-built_in">loadFromFile</span>( <span class="hljs-string">&quot;fadeout.png&quot;</span> ) )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load front texture!\n&quot;</span> );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Set standard alpha blending</span><br>gModulatedTexture.<span class="hljs-built_in">setBlendMode</span>( SDL_BLENDMODE_MOD );<br>&#125;<br><br><span class="hljs-comment">//Load background texture</span><br><span class="hljs-keyword">if</span>( !gBackgroundTexture.<span class="hljs-built_in">loadFromFile</span>( <span class="hljs-string">&quot;fadein.png&quot;</span> ) )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load background texture!\n&quot;</span> );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> success;<br>&#125;<br></code></pre></td></tr></table></figure><p>在加载图片的时候就需要对图片进行BlendMode设置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//While application is running</span><br><span class="hljs-keyword">while</span>( !quit )<br>&#123;<br><span class="hljs-comment">//Handle events on queue</span><br><span class="hljs-keyword">while</span>( <span class="hljs-built_in">SDL_PollEvent</span>( &amp;e ) != <span class="hljs-number">0</span> )<br>&#123;<br><span class="hljs-comment">//User requests quit</span><br><span class="hljs-keyword">if</span>( e.type == SDL_QUIT )<br>&#123;<br>quit = <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-comment">//Handle key presses</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( e.type == SDL_KEYDOWN )<br>&#123;<br><span class="hljs-comment">//Increase alpha on w</span><br><span class="hljs-keyword">if</span>( e.key.keysym.sym == SDLK_w )<br>&#123;<br><span class="hljs-comment">//Cap if over 255</span><br><span class="hljs-keyword">if</span>( a + <span class="hljs-number">32</span> &gt; <span class="hljs-number">255</span> )<br>&#123;<br>a = <span class="hljs-number">255</span>;<br>&#125;<br><span class="hljs-comment">//Increment otherwise</span><br><span class="hljs-keyword">else</span><br>&#123;<br>a += <span class="hljs-number">32</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">//Decrease alpha on s</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( e.key.keysym.sym == SDLK_s )<br>&#123;<br><span class="hljs-comment">//Cap if below 0</span><br><span class="hljs-keyword">if</span>( a - <span class="hljs-number">32</span> &lt; <span class="hljs-number">0</span> )<br>&#123;<br>a = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//Decrement otherwise</span><br><span class="hljs-keyword">else</span><br>&#123;<br>a -= <span class="hljs-number">32</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Clear screen</span><br><span class="hljs-built_in">SDL_SetRenderDrawColor</span>( gRenderer, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span> );<br><span class="hljs-built_in">SDL_RenderClear</span>( gRenderer );<br><br><span class="hljs-comment">//Render background</span><br>gBackgroundTexture.<span class="hljs-built_in">render</span>( <span class="hljs-number">0</span>, <span class="hljs-number">0</span> );<br><br><span class="hljs-comment">//Render front blended</span><br>gModulatedTexture.<span class="hljs-built_in">setAlpha</span>( a );<br>gModulatedTexture.<span class="hljs-built_in">render</span>( <span class="hljs-number">0</span>, <span class="hljs-number">0</span> );<br><br><span class="hljs-comment">//Update screen</span><br><span class="hljs-built_in">SDL_RenderPresent</span>( gRenderer );<br>&#125;<br></code></pre></td></tr></table></figure><p>这是mian函数部分的事件轮询和窗口显示的部分，这里同样采用按键控制。为了达到由覆盖图片逐渐显示到背景图片的目的，在显示图片的时候需要先渲染背景图片然后先设置覆盖图片的阿尔法值再进行覆盖图片的渲染。需要注意的是这里的顺序不能颠倒。</p>]]></content>
    
    
    <categories>
      
      <category>Game Development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>12.Color Modulation</title>
    <link href="/2024/01/21/SDL/12.Color%20Modulation/"/>
    <url>/2024/01/21/SDL/12.Color%20Modulation/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>参考博客：<a href="https://lazyfoo.net/tutorials/SDL/12_color_modulation/index.php">Lazy Foo’ Productions</a><br>示例代码取自Lazy Foo<br><br /><br>示例代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*This source code copyrighted by Lazy Foo&#x27; Productions 2004-2024</span><br><span class="hljs-comment">and may not be redistributed without written permission.*/</span><br><br><span class="hljs-comment">//Using SDL, SDL_image, standard IO, and strings</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SDL.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SDL_image.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-comment">//Screen dimension constants</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> SCREEN_WIDTH = <span class="hljs-number">640</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> SCREEN_HEIGHT = <span class="hljs-number">480</span>;<br><br><span class="hljs-comment">//Texture wrapper class</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LTexture</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//Initializes variables</span><br><span class="hljs-built_in">LTexture</span>();<br><br><span class="hljs-comment">//Deallocates memory</span><br>~<span class="hljs-built_in">LTexture</span>();<br><br><span class="hljs-comment">//Loads image at specified path</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadFromFile</span><span class="hljs-params">( std::string path )</span></span>;<br><br><span class="hljs-comment">//Deallocates texture</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">free</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Set color modulation</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setColor</span><span class="hljs-params">( Uint8 red, Uint8 green, Uint8 blue )</span></span>;<br><br><span class="hljs-comment">//Renders texture at given point</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">render</span><span class="hljs-params">( <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, SDL_Rect* clip = <span class="hljs-literal">NULL</span> )</span></span>;<br><br><span class="hljs-comment">//Gets image dimensions</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getWidth</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getHeight</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">//The actual hardware texture</span><br>SDL_Texture* mTexture;<br><br><span class="hljs-comment">//Image dimensions</span><br><span class="hljs-type">int</span> mWidth;<br><span class="hljs-type">int</span> mHeight;<br>&#125;;<br><br><span class="hljs-comment">//Starts up SDL and creates window</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Loads media</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadMedia</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Frees media and shuts down SDL</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//The window we&#x27;ll be rendering to</span><br>SDL_Window* gWindow = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//The window renderer</span><br>SDL_Renderer* gRenderer = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Scene texture</span><br>LTexture gModulatedTexture;<br><br><br>LTexture::<span class="hljs-built_in">LTexture</span>()<br>&#123;<br><span class="hljs-comment">//Initialize</span><br>mTexture = <span class="hljs-literal">NULL</span>;<br>mWidth = <span class="hljs-number">0</span>;<br>mHeight = <span class="hljs-number">0</span>;<br>&#125;<br><br>LTexture::~<span class="hljs-built_in">LTexture</span>()<br>&#123;<br><span class="hljs-comment">//Deallocate</span><br><span class="hljs-built_in">free</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">LTexture::loadFromFile</span><span class="hljs-params">( std::string path )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Get rid of preexisting texture</span><br><span class="hljs-built_in">free</span>();<br><br><span class="hljs-comment">//The final texture</span><br>SDL_Texture* newTexture = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Load image at specified path</span><br>SDL_Surface* loadedSurface = <span class="hljs-built_in">IMG_Load</span>( path.<span class="hljs-built_in">c_str</span>() );<br><span class="hljs-keyword">if</span>( loadedSurface == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Unable to load image %s! SDL_image Error: %s\n&quot;</span>, path.<span class="hljs-built_in">c_str</span>(), <span class="hljs-built_in">IMG_GetError</span>() );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Color key image</span><br><span class="hljs-built_in">SDL_SetColorKey</span>( loadedSurface, SDL_TRUE, <span class="hljs-built_in">SDL_MapRGB</span>( loadedSurface-&gt;format, <span class="hljs-number">0</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span> ) );<br><br><span class="hljs-comment">//Create texture from surface pixels</span><br>        newTexture = <span class="hljs-built_in">SDL_CreateTextureFromSurface</span>( gRenderer, loadedSurface );<br><span class="hljs-keyword">if</span>( newTexture == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Unable to create texture from %s! SDL Error: %s\n&quot;</span>, path.<span class="hljs-built_in">c_str</span>(), <span class="hljs-built_in">SDL_GetError</span>() );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Get image dimensions</span><br>mWidth = loadedSurface-&gt;w;<br>mHeight = loadedSurface-&gt;h;<br>&#125;<br><br><span class="hljs-comment">//Get rid of old loaded surface</span><br><span class="hljs-built_in">SDL_FreeSurface</span>( loadedSurface );<br>&#125;<br><br><span class="hljs-comment">//Return success</span><br>mTexture = newTexture;<br><span class="hljs-keyword">return</span> mTexture != <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LTexture::free</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Free texture if it exists</span><br><span class="hljs-keyword">if</span>( mTexture != <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">SDL_DestroyTexture</span>( mTexture );<br>mTexture = <span class="hljs-literal">NULL</span>;<br>mWidth = <span class="hljs-number">0</span>;<br>mHeight = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LTexture::setColor</span><span class="hljs-params">( Uint8 red, Uint8 green, Uint8 blue )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Modulate texture</span><br><span class="hljs-built_in">SDL_SetTextureColorMod</span>( mTexture, red, green, blue );<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LTexture::render</span><span class="hljs-params">( <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, SDL_Rect* clip )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Set rendering space and render to screen</span><br>SDL_Rect renderQuad = &#123; x, y, mWidth, mHeight &#125;;<br><br><span class="hljs-comment">//Set clip rendering dimensions</span><br><span class="hljs-keyword">if</span>( clip != <span class="hljs-literal">NULL</span> )<br>&#123;<br>renderQuad.w = clip-&gt;w;<br>renderQuad.h = clip-&gt;h;<br>&#125;<br><br><span class="hljs-comment">//Render to screen</span><br><span class="hljs-built_in">SDL_RenderCopy</span>( gRenderer, mTexture, clip, &amp;renderQuad );<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">LTexture::getWidth</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> mWidth;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">LTexture::getHeight</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> mHeight;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Initialization flag</span><br><span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//Initialize SDL</span><br><span class="hljs-keyword">if</span>( <span class="hljs-built_in">SDL_Init</span>( SDL_INIT_VIDEO ) &lt; <span class="hljs-number">0</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;SDL could not initialize! SDL Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Set texture filtering to linear</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">SDL_SetHint</span>( SDL_HINT_RENDER_SCALE_QUALITY, <span class="hljs-string">&quot;1&quot;</span> ) )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Warning: Linear texture filtering not enabled!&quot;</span> );<br>&#125;<br><br><span class="hljs-comment">//Create window</span><br>gWindow = <span class="hljs-built_in">SDL_CreateWindow</span>( <span class="hljs-string">&quot;SDL Tutorial&quot;</span>, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN );<br><span class="hljs-keyword">if</span>( gWindow == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Window could not be created! %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Create renderer for window</span><br>gRenderer = <span class="hljs-built_in">SDL_CreateRenderer</span>( gWindow, <span class="hljs-number">-1</span>, SDL_RENDERER_ACCELERATED );<br><span class="hljs-keyword">if</span>( gRenderer == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Renderer could not be created! SDL Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Initialize renderer color</span><br><span class="hljs-built_in">SDL_SetRenderDrawColor</span>( gRenderer, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span> );<br><br><span class="hljs-comment">//Initialize PNG loading</span><br><span class="hljs-type">int</span> imgFlags = IMG_INIT_PNG;<br><span class="hljs-keyword">if</span>( !( <span class="hljs-built_in">IMG_Init</span>( imgFlags ) &amp; imgFlags ) )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;SDL_image could not initialize! SDL_image Error: %s\n&quot;</span>, <span class="hljs-built_in">IMG_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> success;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadMedia</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Loading success flag</span><br><span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//Load texture</span><br><span class="hljs-keyword">if</span>( !gModulatedTexture.<span class="hljs-built_in">loadFromFile</span>( <span class="hljs-string">&quot;colors.png&quot;</span> ) )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load colors texture!\n&quot;</span> );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> success;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Free loaded images</span><br>gModulatedTexture.<span class="hljs-built_in">free</span>();<br><br><span class="hljs-comment">//Destroy window</span><br><span class="hljs-built_in">SDL_DestroyRenderer</span>( gRenderer );<br><span class="hljs-built_in">SDL_DestroyWindow</span>( gWindow );<br>gWindow = <span class="hljs-literal">NULL</span>;<br>gRenderer = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Quit SDL subsystems</span><br><span class="hljs-built_in">IMG_Quit</span>();<br><span class="hljs-built_in">SDL_Quit</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( <span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* args[] )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Start up SDL and create window</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">init</span>() )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to initialize!\n&quot;</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Load media</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">loadMedia</span>() )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load media!\n&quot;</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Main loop flag</span><br><span class="hljs-type">bool</span> quit = <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">//Event handler</span><br>SDL_Event e;<br><br><span class="hljs-comment">//Modulation components</span><br>Uint8 r = <span class="hljs-number">255</span>;<br>Uint8 g = <span class="hljs-number">128</span>;<br>Uint8 b = <span class="hljs-number">255</span>;<br><br><span class="hljs-comment">//While application is running</span><br><span class="hljs-keyword">while</span>( !quit )<br>&#123;<br><span class="hljs-comment">//Handle events on queue</span><br><span class="hljs-keyword">while</span>( <span class="hljs-built_in">SDL_PollEvent</span>( &amp;e ) != <span class="hljs-number">0</span> )<br>&#123;<br><span class="hljs-comment">//User requests quit</span><br><span class="hljs-keyword">if</span>( e.type == SDL_QUIT )<br>&#123;<br>quit = <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-comment">//On keypress change rgb values</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( e.type == SDL_KEYDOWN )<br>&#123;<br><span class="hljs-keyword">switch</span>( e.key.keysym.sym )<br>&#123;<br><span class="hljs-comment">//Increase red</span><br><span class="hljs-keyword">case</span> SDLK_q:<br>r += <span class="hljs-number">32</span>;<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-comment">//Increase green</span><br><span class="hljs-keyword">case</span> SDLK_w:<br>g += <span class="hljs-number">32</span>;<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-comment">//Increase blue</span><br><span class="hljs-keyword">case</span> SDLK_e:<br>b += <span class="hljs-number">32</span>;<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-comment">//Decrease red</span><br><span class="hljs-keyword">case</span> SDLK_a:<br>r -= <span class="hljs-number">32</span>;<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-comment">//Decrease green</span><br><span class="hljs-keyword">case</span> SDLK_s:<br>g -= <span class="hljs-number">32</span>;<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-comment">//Decrease blue</span><br><span class="hljs-keyword">case</span> SDLK_d:<br>b -= <span class="hljs-number">32</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//Clear screen</span><br><span class="hljs-built_in">SDL_SetRenderDrawColor</span>( gRenderer, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span> );<br><span class="hljs-built_in">SDL_RenderClear</span>( gRenderer );<br><br><span class="hljs-comment">//Modulate and render texture</span><br>gModulatedTexture.<span class="hljs-built_in">setColor</span>( r, g, b );<br>gModulatedTexture.<span class="hljs-built_in">render</span>( <span class="hljs-number">0</span>, <span class="hljs-number">0</span> );<br><br><span class="hljs-comment">//Update screen</span><br><span class="hljs-built_in">SDL_RenderPresent</span>( gRenderer );<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Free resources and close SDL</span><br><span class="hljs-built_in">close</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>之前的博文中我们修改了图片中元素的位置，那这篇博文将尝试改变图像的颜色。<br><br /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LTexture::setColor</span><span class="hljs-params">( Uint8 red, Uint8 green, Uint8 blue )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Modulate texture</span><br><span class="hljs-built_in">SDL_SetTextureColorMod</span>( mTexture, red, green, blue );<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码便是设置颜色的核心代码，其中使用到了<a href="/2024/01/10/SDL/Dictionary/SDL_SetTextureColorMod/" title="SDL_SetTextureColorMod">SDL_SetTextureColorMod</a>函数用来调整图像的颜色。其调整颜色的公式遵循srcC &#x3D; srcC * (color &#x2F; 255)这个公式。其中srcC指原本图像的颜色，而color分别代表r,g,b各个像素的像素值。<br><br /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( <span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* args[] )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Start up SDL and create window</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">init</span>() )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to initialize!\n&quot;</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Load media</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">loadMedia</span>() )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load media!\n&quot;</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Main loop flag</span><br><span class="hljs-type">bool</span> quit = <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">//Event handler</span><br>SDL_Event e;<br><br><span class="hljs-comment">//Modulation components</span><br>Uint8 r = <span class="hljs-number">255</span>;<br>Uint8 g = <span class="hljs-number">128</span>;<br>Uint8 b = <span class="hljs-number">255</span>;<br><br><span class="hljs-comment">//While application is running</span><br><span class="hljs-keyword">while</span>( !quit )<br>&#123;<br><span class="hljs-comment">//Handle events on queue</span><br><span class="hljs-keyword">while</span>( <span class="hljs-built_in">SDL_PollEvent</span>( &amp;e ) != <span class="hljs-number">0</span> )<br>&#123;<br><span class="hljs-comment">//User requests quit</span><br><span class="hljs-keyword">if</span>( e.type == SDL_QUIT )<br>&#123;<br>quit = <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-comment">//On keypress change rgb values</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( e.type == SDL_KEYDOWN )<br>&#123;<br><span class="hljs-keyword">switch</span>( e.key.keysym.sym )<br>&#123;<br><span class="hljs-comment">//Increase red</span><br><span class="hljs-keyword">case</span> SDLK_q:<br>r += <span class="hljs-number">32</span>;<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-comment">//Increase green</span><br><span class="hljs-keyword">case</span> SDLK_w:<br>g += <span class="hljs-number">32</span>;<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-comment">//Increase blue</span><br><span class="hljs-keyword">case</span> SDLK_e:<br>b += <span class="hljs-number">32</span>;<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-comment">//Decrease red</span><br><span class="hljs-keyword">case</span> SDLK_a:<br>r -= <span class="hljs-number">32</span>;<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-comment">//Decrease green</span><br><span class="hljs-keyword">case</span> SDLK_s:<br>g -= <span class="hljs-number">32</span>;<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-comment">//Decrease blue</span><br><span class="hljs-keyword">case</span> SDLK_d:<br>b -= <span class="hljs-number">32</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//Clear screen</span><br><span class="hljs-built_in">SDL_SetRenderDrawColor</span>( gRenderer, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span> );<br><span class="hljs-built_in">SDL_RenderClear</span>( gRenderer );<br><br><span class="hljs-comment">//Modulate and render texture</span><br>gModulatedTexture.<span class="hljs-built_in">setColor</span>( r, g, b );<br>gModulatedTexture.<span class="hljs-built_in">render</span>( <span class="hljs-number">0</span>, <span class="hljs-number">0</span> );<br><br><span class="hljs-comment">//Update screen</span><br><span class="hljs-built_in">SDL_RenderPresent</span>( gRenderer );<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Free resources and close SDL</span><br><span class="hljs-built_in">close</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述是main函数，对于图像颜色的调整，这里结合了键盘的按键，按q键屏幕中红色的比例提高32&#x2F;255，按w时屏幕中绿色的比例提高32&#x2F;255，按e键蓝色的比例提高32&#x2F;255，而按a, s, d键则减少对应的颜色比例。关于其具体按键的判断可以参考<a href="/2024/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_Event</a>中关于SDL_KEYDOWN的介绍。<br>通过按键盘来调整颜色时需要注意一点，需要将输入法调成英文。</p>]]></content>
    
    
    <categories>
      
      <category>Game Development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>11.Clip Rendering and Sprite Sheets</title>
    <link href="/2024/01/21/SDL/11.Clip%20Rendering%20and%20Sprite%20Sheets/"/>
    <url>/2024/01/21/SDL/11.Clip%20Rendering%20and%20Sprite%20Sheets/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>参考博客：<a href="https://lazyfoo.net/tutorials/SDL/11_clip_rendering_and_sprite_sheets/index.php">Lazy Foo’ Productions</a><br>示例代码取自Lazy Foo<br><br /><br>示例代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br></pre></td><td class="code"><pre><code class="hljs cpp">示例代码来源：Lazy Foo’ Productions<br><span class="hljs-comment">/*This source code copyrighted by Lazy Foo&#x27; Productions 2004-2024</span><br><span class="hljs-comment">and may not be redistributed without written permission.*/</span><br><br><span class="hljs-comment">//Using SDL, SDL_image, standard math, and strings</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SDL.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SDL_image.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-comment">//Screen dimension constants</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> SCREEN_WIDTH = <span class="hljs-number">640</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> SCREEN_HEIGHT = <span class="hljs-number">480</span>;<br><br><span class="hljs-comment">//Texture wrapper class</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LTexture</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//Initializes variables</span><br><span class="hljs-built_in">LTexture</span>();<br><br><span class="hljs-comment">//Deallocates memory</span><br>~<span class="hljs-built_in">LTexture</span>();<br><br><span class="hljs-comment">//Loads image at specified path</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadFromFile</span><span class="hljs-params">( std::string path )</span></span>;<br><br><span class="hljs-comment">//Deallocates texture</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">free</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Renders texture at given point</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">render</span><span class="hljs-params">( <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, SDL_Rect* clip = <span class="hljs-literal">NULL</span> )</span></span>;<br><br><span class="hljs-comment">//Gets image dimensions</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getWidth</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getHeight</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">//The actual hardware texture</span><br>SDL_Texture* mTexture;<br><br><span class="hljs-comment">//Image dimensions</span><br><span class="hljs-type">int</span> mWidth;<br><span class="hljs-type">int</span> mHeight;<br>&#125;;<br><br><span class="hljs-comment">//Starts up SDL and creates window</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Loads media</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadMedia</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Frees media and shuts down SDL</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//The window we&#x27;ll be rendering to</span><br>SDL_Window* gWindow = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//The window renderer</span><br>SDL_Renderer* gRenderer = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Scene sprites</span><br>SDL_Rect gSpriteClips[ <span class="hljs-number">4</span> ];<br>LTexture gSpriteSheetTexture;<br><br><br>LTexture::<span class="hljs-built_in">LTexture</span>()<br>&#123;<br><span class="hljs-comment">//Initialize</span><br>mTexture = <span class="hljs-literal">NULL</span>;<br>mWidth = <span class="hljs-number">0</span>;<br>mHeight = <span class="hljs-number">0</span>;<br>&#125;<br><br>LTexture::~<span class="hljs-built_in">LTexture</span>()<br>&#123;<br><span class="hljs-comment">//Deallocate</span><br><span class="hljs-built_in">free</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">LTexture::loadFromFile</span><span class="hljs-params">( std::string path )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Get rid of preexisting texture</span><br><span class="hljs-built_in">free</span>();<br><br><span class="hljs-comment">//The final texture</span><br>SDL_Texture* newTexture = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Load image at specified path</span><br>SDL_Surface* loadedSurface = <span class="hljs-built_in">IMG_Load</span>( path.<span class="hljs-built_in">c_str</span>() );<br><span class="hljs-keyword">if</span>( loadedSurface == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Unable to load image %s! SDL_image Error: %s\n&quot;</span>, path.<span class="hljs-built_in">c_str</span>(), <span class="hljs-built_in">IMG_GetError</span>() );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Color key image</span><br><span class="hljs-built_in">SDL_SetColorKey</span>( loadedSurface, SDL_TRUE, <span class="hljs-built_in">SDL_MapRGB</span>( loadedSurface-&gt;format, <span class="hljs-number">0</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span> ) );<br><br><span class="hljs-comment">//Create texture from surface pixels</span><br>        newTexture = <span class="hljs-built_in">SDL_CreateTextureFromSurface</span>( gRenderer, loadedSurface );<br><span class="hljs-keyword">if</span>( newTexture == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Unable to create texture from %s! SDL Error: %s\n&quot;</span>, path.<span class="hljs-built_in">c_str</span>(), <span class="hljs-built_in">SDL_GetError</span>() );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Get image dimensions</span><br>mWidth = loadedSurface-&gt;w;<br>mHeight = loadedSurface-&gt;h;<br>&#125;<br><br><span class="hljs-comment">//Get rid of old loaded surface</span><br><span class="hljs-built_in">SDL_FreeSurface</span>( loadedSurface );<br>&#125;<br><br><span class="hljs-comment">//Return success</span><br>mTexture = newTexture;<br><span class="hljs-keyword">return</span> mTexture != <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LTexture::free</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Free texture if it exists</span><br><span class="hljs-keyword">if</span>( mTexture != <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">SDL_DestroyTexture</span>( mTexture );<br>mTexture = <span class="hljs-literal">NULL</span>;<br>mWidth = <span class="hljs-number">0</span>;<br>mHeight = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LTexture::render</span><span class="hljs-params">( <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, SDL_Rect* clip )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Set rendering space and render to screen</span><br>SDL_Rect renderQuad = &#123; x, y, mWidth, mHeight &#125;;<br><br><span class="hljs-comment">//Set clip rendering dimensions</span><br><span class="hljs-keyword">if</span>( clip != <span class="hljs-literal">NULL</span> )<br>&#123;<br>renderQuad.w = clip-&gt;w;<br>renderQuad.h = clip-&gt;h;<br>&#125;<br><br><span class="hljs-comment">//Render to screen</span><br><span class="hljs-built_in">SDL_RenderCopy</span>( gRenderer, mTexture, clip, &amp;renderQuad );<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">LTexture::getWidth</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> mWidth;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">LTexture::getHeight</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> mHeight;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Initialization flag</span><br><span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//Initialize SDL</span><br><span class="hljs-keyword">if</span>( <span class="hljs-built_in">SDL_Init</span>( SDL_INIT_VIDEO ) &lt; <span class="hljs-number">0</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;SDL could not initialize! SDL Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Set texture filtering to linear</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">SDL_SetHint</span>( SDL_HINT_RENDER_SCALE_QUALITY, <span class="hljs-string">&quot;1&quot;</span> ) )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Warning: Linear texture filtering not enabled!&quot;</span> );<br>&#125;<br><br><span class="hljs-comment">//Create window</span><br>gWindow = <span class="hljs-built_in">SDL_CreateWindow</span>( <span class="hljs-string">&quot;SDL Tutorial&quot;</span>, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN );<br><span class="hljs-keyword">if</span>( gWindow == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Window could not be created! SDL Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Create renderer for window</span><br>gRenderer = <span class="hljs-built_in">SDL_CreateRenderer</span>( gWindow, <span class="hljs-number">-1</span>, SDL_RENDERER_ACCELERATED );<br><span class="hljs-keyword">if</span>( gRenderer == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Renderer could not be created! SDL Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Initialize renderer color</span><br><span class="hljs-built_in">SDL_SetRenderDrawColor</span>( gRenderer, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span> );<br><br><span class="hljs-comment">//Initialize PNG loading</span><br><span class="hljs-type">int</span> imgFlags = IMG_INIT_PNG;<br><span class="hljs-keyword">if</span>( !( <span class="hljs-built_in">IMG_Init</span>( imgFlags ) &amp; imgFlags ) )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;SDL_image could not initialize! SDL_image Error: %s\n&quot;</span>, <span class="hljs-built_in">IMG_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> success;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadMedia</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Loading success flag</span><br><span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//Load sprite sheet texture</span><br><span class="hljs-keyword">if</span>( !gSpriteSheetTexture.<span class="hljs-built_in">loadFromFile</span>( <span class="hljs-string">&quot;dots.png&quot;</span> ) )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load sprite sheet texture!\n&quot;</span> );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Set top left sprite</span><br>gSpriteClips[ <span class="hljs-number">0</span> ].x =   <span class="hljs-number">0</span>;<br>gSpriteClips[ <span class="hljs-number">0</span> ].y =   <span class="hljs-number">0</span>;<br>gSpriteClips[ <span class="hljs-number">0</span> ].w = <span class="hljs-number">100</span>;<br>gSpriteClips[ <span class="hljs-number">0</span> ].h = <span class="hljs-number">100</span>;<br><br><span class="hljs-comment">//Set top right sprite</span><br>gSpriteClips[ <span class="hljs-number">1</span> ].x = <span class="hljs-number">100</span>;<br>gSpriteClips[ <span class="hljs-number">1</span> ].y =   <span class="hljs-number">0</span>;<br>gSpriteClips[ <span class="hljs-number">1</span> ].w = <span class="hljs-number">100</span>;<br>gSpriteClips[ <span class="hljs-number">1</span> ].h = <span class="hljs-number">100</span>;<br><br><span class="hljs-comment">//Set bottom left sprite</span><br>gSpriteClips[ <span class="hljs-number">2</span> ].x =   <span class="hljs-number">0</span>;<br>gSpriteClips[ <span class="hljs-number">2</span> ].y = <span class="hljs-number">100</span>;<br>gSpriteClips[ <span class="hljs-number">2</span> ].w = <span class="hljs-number">100</span>;<br>gSpriteClips[ <span class="hljs-number">2</span> ].h = <span class="hljs-number">100</span>;<br><br><span class="hljs-comment">//Set bottom right sprite</span><br>gSpriteClips[ <span class="hljs-number">3</span> ].x = <span class="hljs-number">100</span>;<br>gSpriteClips[ <span class="hljs-number">3</span> ].y = <span class="hljs-number">100</span>;<br>gSpriteClips[ <span class="hljs-number">3</span> ].w = <span class="hljs-number">100</span>;<br>gSpriteClips[ <span class="hljs-number">3</span> ].h = <span class="hljs-number">100</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> success;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Free loaded images</span><br>gSpriteSheetTexture.<span class="hljs-built_in">free</span>();<br><br><span class="hljs-comment">//Destroy window</span><br><span class="hljs-built_in">SDL_DestroyRenderer</span>( gRenderer );<br><span class="hljs-built_in">SDL_DestroyWindow</span>( gWindow );<br>gWindow = <span class="hljs-literal">NULL</span>;<br>gRenderer = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Quit SDL subsystems</span><br><span class="hljs-built_in">IMG_Quit</span>();<br><span class="hljs-built_in">SDL_Quit</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( <span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* args[] )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Start up SDL and create window</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">init</span>() )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to initialize!\n&quot;</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Load media</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">loadMedia</span>() )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load media!\n&quot;</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Main loop flag</span><br><span class="hljs-type">bool</span> quit = <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">//Event handler</span><br>SDL_Event e;<br><br><span class="hljs-comment">//While application is running</span><br><span class="hljs-keyword">while</span>( !quit )<br>&#123;<br><span class="hljs-comment">//Handle events on queue</span><br><span class="hljs-keyword">while</span>( <span class="hljs-built_in">SDL_PollEvent</span>( &amp;e ) != <span class="hljs-number">0</span> )<br>&#123;<br><span class="hljs-comment">//User requests quit</span><br><span class="hljs-keyword">if</span>( e.type == SDL_QUIT )<br>&#123;<br>quit = <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Clear screen</span><br><span class="hljs-built_in">SDL_SetRenderDrawColor</span>( gRenderer, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span> );<br><span class="hljs-built_in">SDL_RenderClear</span>( gRenderer );<br><br><span class="hljs-comment">//Render top left sprite</span><br>gSpriteSheetTexture.<span class="hljs-built_in">render</span>( <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;gSpriteClips[ <span class="hljs-number">0</span> ] );<br><br><span class="hljs-comment">//Render top right sprite</span><br>gSpriteSheetTexture.<span class="hljs-built_in">render</span>( SCREEN_WIDTH - gSpriteClips[ <span class="hljs-number">1</span> ].w, <span class="hljs-number">0</span>, &amp;gSpriteClips[ <span class="hljs-number">1</span> ] );<br><br><span class="hljs-comment">//Render bottom left sprite</span><br>gSpriteSheetTexture.<span class="hljs-built_in">render</span>( <span class="hljs-number">0</span>, SCREEN_HEIGHT - gSpriteClips[ <span class="hljs-number">2</span> ].h, &amp;gSpriteClips[ <span class="hljs-number">2</span> ] );<br><br><span class="hljs-comment">//Render bottom right sprite</span><br>gSpriteSheetTexture.<span class="hljs-built_in">render</span>( SCREEN_WIDTH - gSpriteClips[ <span class="hljs-number">3</span> ].w, SCREEN_HEIGHT - gSpriteClips[ <span class="hljs-number">3</span> ].h, &amp;gSpriteClips[ <span class="hljs-number">3</span> ] );<br><br><span class="hljs-comment">//Update screen</span><br><span class="hljs-built_in">SDL_RenderPresent</span>( gRenderer );<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Free resources and close SDL</span><br><span class="hljs-built_in">close</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>本篇博文为对上一篇博文的拓展延伸。现在有以下的图片1素材，我们针对图片一进行了一些设计，设计呈现在屏幕上为图片二。上述代码便是对这些圆形进行了一系列的拆分和整合。我们现在来对其中的关键代码块进行分析。<br><img src="/img/SDL/lazyfoo_10_origin.png" title="图片一"><br><img src="/img/SDL/lazyfoo_10_design.png" title="图片二"><br><br /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//Scene sprites</span><br>SDL_Rect gSpriteClips[ <span class="hljs-number">4</span> ];<br>LTexture gSpriteSheetTexture;<br><br>在变量声明的时候我们使用一个SDL_Rect数组进行管理，对于数组的每一个元素都含有x,y,w,h四个元素。<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadMedia</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Loading success flag</span><br><span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//Load sprite sheet texture</span><br><span class="hljs-keyword">if</span>( !gSpriteSheetTexture.<span class="hljs-built_in">loadFromFile</span>( <span class="hljs-string">&quot;dots.png&quot;</span> ) )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load sprite sheet texture!\n&quot;</span> );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Set top left sprite</span><br>gSpriteClips[ <span class="hljs-number">0</span> ].x =   <span class="hljs-number">0</span>;<br>gSpriteClips[ <span class="hljs-number">0</span> ].y =   <span class="hljs-number">0</span>;<br>gSpriteClips[ <span class="hljs-number">0</span> ].w = <span class="hljs-number">100</span>;<br>gSpriteClips[ <span class="hljs-number">0</span> ].h = <span class="hljs-number">100</span>;<br><br><span class="hljs-comment">//Set top right sprite</span><br>gSpriteClips[ <span class="hljs-number">1</span> ].x = <span class="hljs-number">100</span>;<br>gSpriteClips[ <span class="hljs-number">1</span> ].y =   <span class="hljs-number">0</span>;<br>gSpriteClips[ <span class="hljs-number">1</span> ].w = <span class="hljs-number">100</span>;<br>gSpriteClips[ <span class="hljs-number">1</span> ].h = <span class="hljs-number">100</span>;<br><br><span class="hljs-comment">//Set bottom left sprite</span><br>gSpriteClips[ <span class="hljs-number">2</span> ].x =   <span class="hljs-number">0</span>;<br>gSpriteClips[ <span class="hljs-number">2</span> ].y = <span class="hljs-number">100</span>;<br>gSpriteClips[ <span class="hljs-number">2</span> ].w = <span class="hljs-number">100</span>;<br>gSpriteClips[ <span class="hljs-number">2</span> ].h = <span class="hljs-number">100</span>;<br><br><span class="hljs-comment">//Set bottom right sprite</span><br>gSpriteClips[ <span class="hljs-number">3</span> ].x = <span class="hljs-number">100</span>;<br>gSpriteClips[ <span class="hljs-number">3</span> ].y = <span class="hljs-number">100</span>;<br>gSpriteClips[ <span class="hljs-number">3</span> ].w = <span class="hljs-number">100</span>;<br>gSpriteClips[ <span class="hljs-number">3</span> ].h = <span class="hljs-number">100</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> success;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码便是对原始的图像进行框定。经对图像信息的查看，其像素为200*200.所以数组中四个的SDL_Rect分别框定了图像中的四个圆。<br><br /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LTexture::render</span><span class="hljs-params">( <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, SDL_Rect* clip )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Set rendering space and render to screen</span><br>SDL_Rect renderQuad = &#123; x, y, mWidth, mHeight &#125;;<br><br><span class="hljs-comment">//Set clip rendering dimensions</span><br><span class="hljs-keyword">if</span>( clip != <span class="hljs-literal">NULL</span> )<br>&#123;<br>renderQuad.w = clip-&gt;w;<br>renderQuad.h = clip-&gt;h;<br>&#125;<br><br><span class="hljs-comment">//Render to screen</span><br><span class="hljs-built_in">SDL_RenderCopy</span>( gRenderer, mTexture, clip, &amp;renderQuad );<br>&#125;<br></code></pre></td></tr></table></figure><p>这个函数的作用便是将裁剪下来的图像放入屏幕之中的函数。在代码中clip为图像裁剪框，而x和y 分别代表放置裁剪下来图像左上角的位置。此代码中存在两个SDL_Rect。Clip为源图像中各个圆的框，而renderQuad代表将源图像放在屏幕中的矩形框，由此实现一一对应。</p>]]></content>
    
    
    <categories>
      
      <category>Game Development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10.Color Keying</title>
    <link href="/2024/01/21/SDL/10.Color%20Keying/"/>
    <url>/2024/01/21/SDL/10.Color%20Keying/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>参考博客：<a href="https://lazyfoo.net/tutorials/SDL/10_color_keying/index.php">Lazy Foo’ Productions</a><br>示例代码取自Lazy Foo<br><br /><br>示例代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*This source code copyrighted by Lazy Foo&#x27; Productions 2004-2024</span><br><span class="hljs-comment">and may not be redistributed without written permission.*/</span><br><br><span class="hljs-comment">//Using SDL, SDL_image, standard IO, and strings</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SDL.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SDL_image.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-comment">//Screen dimension constants</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> SCREEN_WIDTH = <span class="hljs-number">640</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> SCREEN_HEIGHT = <span class="hljs-number">480</span>;<br><br><span class="hljs-comment">//Texture wrapper class</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LTexture</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//Initializes variables</span><br><span class="hljs-built_in">LTexture</span>();<br><br><span class="hljs-comment">//Deallocates memory</span><br>~<span class="hljs-built_in">LTexture</span>();<br><br><span class="hljs-comment">//Loads image at specified path</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadFromFile</span><span class="hljs-params">( std::string path )</span></span>;<br><br><span class="hljs-comment">//Deallocates texture</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">free</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Renders texture at given point</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">render</span><span class="hljs-params">( <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y )</span></span>;<br><br><span class="hljs-comment">//Gets image dimensions</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getWidth</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getHeight</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">//The actual hardware texture</span><br>SDL_Texture* mTexture;<br><br><span class="hljs-comment">//Image dimensions</span><br><span class="hljs-type">int</span> mWidth;<br><span class="hljs-type">int</span> mHeight;<br>&#125;;<br><br><span class="hljs-comment">//Starts up SDL and creates window</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Loads media</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadMedia</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Frees media and shuts down SDL</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//The window we&#x27;ll be rendering to</span><br>SDL_Window* gWindow = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//The window renderer</span><br>SDL_Renderer* gRenderer = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Scene textures</span><br>LTexture gFooTexture;<br>LTexture gBackgroundTexture;<br><br><br>LTexture::<span class="hljs-built_in">LTexture</span>()<br>&#123;<br><span class="hljs-comment">//Initialize</span><br>mTexture = <span class="hljs-literal">NULL</span>;<br>mWidth = <span class="hljs-number">0</span>;<br>mHeight = <span class="hljs-number">0</span>;<br>&#125;<br><br>LTexture::~<span class="hljs-built_in">LTexture</span>()<br>&#123;<br><span class="hljs-comment">//Deallocate</span><br><span class="hljs-built_in">free</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">LTexture::loadFromFile</span><span class="hljs-params">( std::string path )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Get rid of preexisting texture</span><br><span class="hljs-built_in">free</span>();<br><br><span class="hljs-comment">//The final texture</span><br>SDL_Texture* newTexture = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Load image at specified path</span><br>SDL_Surface* loadedSurface = <span class="hljs-built_in">IMG_Load</span>( path.<span class="hljs-built_in">c_str</span>() );<br><span class="hljs-keyword">if</span>( loadedSurface == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Unable to load image %s! SDL_image Error: %s\n&quot;</span>, path.<span class="hljs-built_in">c_str</span>(), <span class="hljs-built_in">IMG_GetError</span>() );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Color key image</span><br><span class="hljs-built_in">SDL_SetColorKey</span>( loadedSurface, SDL_TRUE, <span class="hljs-built_in">SDL_MapRGB</span>( loadedSurface-&gt;format, <span class="hljs-number">0</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span> ) );<br><br><span class="hljs-comment">//Create texture from surface pixels</span><br>        newTexture = <span class="hljs-built_in">SDL_CreateTextureFromSurface</span>( gRenderer, loadedSurface );<br><span class="hljs-keyword">if</span>( newTexture == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Unable to create texture from %s! SDL Error: %s\n&quot;</span>, path.<span class="hljs-built_in">c_str</span>(), <span class="hljs-built_in">SDL_GetError</span>() );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Get image dimensions</span><br>mWidth = loadedSurface-&gt;w;<br>mHeight = loadedSurface-&gt;h;<br>&#125;<br><br><span class="hljs-comment">//Get rid of old loaded surface</span><br><span class="hljs-built_in">SDL_FreeSurface</span>( loadedSurface );<br>&#125;<br><br><span class="hljs-comment">//Return success</span><br>mTexture = newTexture;<br><span class="hljs-keyword">return</span> mTexture != <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LTexture::free</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Free texture if it exists</span><br><span class="hljs-keyword">if</span>( mTexture != <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">SDL_DestroyTexture</span>( mTexture );<br>mTexture = <span class="hljs-literal">NULL</span>;<br>mWidth = <span class="hljs-number">0</span>;<br>mHeight = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LTexture::render</span><span class="hljs-params">( <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Set rendering space and render to screen</span><br>SDL_Rect renderQuad = &#123; x, y, mWidth, mHeight &#125;;<br><span class="hljs-built_in">SDL_RenderCopy</span>( gRenderer, mTexture, <span class="hljs-literal">NULL</span>, &amp;renderQuad );<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">LTexture::getWidth</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> mWidth;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">LTexture::getHeight</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> mHeight;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Initialization flag</span><br><span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//Initialize SDL</span><br><span class="hljs-keyword">if</span>( <span class="hljs-built_in">SDL_Init</span>( SDL_INIT_VIDEO ) &lt; <span class="hljs-number">0</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;SDL could not initialize! SDL Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Set texture filtering to linear</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">SDL_SetHint</span>( SDL_HINT_RENDER_SCALE_QUALITY, <span class="hljs-string">&quot;1&quot;</span> ) )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Warning: Linear texture filtering not enabled!&quot;</span> );<br>&#125;<br><br><span class="hljs-comment">//Create window</span><br>gWindow = <span class="hljs-built_in">SDL_CreateWindow</span>( <span class="hljs-string">&quot;SDL Tutorial&quot;</span>, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN );<br><span class="hljs-keyword">if</span>( gWindow == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Window could not be created! SDL Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Create renderer for window</span><br>gRenderer = <span class="hljs-built_in">SDL_CreateRenderer</span>( gWindow, <span class="hljs-number">-1</span>, SDL_RENDERER_ACCELERATED );<br><span class="hljs-keyword">if</span>( gRenderer == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Renderer could not be created! SDL Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Initialize renderer color</span><br><span class="hljs-built_in">SDL_SetRenderDrawColor</span>( gRenderer, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span> );<br><br><span class="hljs-comment">//Initialize PNG loading</span><br><span class="hljs-type">int</span> imgFlags = IMG_INIT_PNG;<br><span class="hljs-keyword">if</span>( !( <span class="hljs-built_in">IMG_Init</span>( imgFlags ) &amp; imgFlags ) )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;SDL_image could not initialize! SDL_image Error: %s\n&quot;</span>, <span class="hljs-built_in">IMG_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> success;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadMedia</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Loading success flag</span><br><span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//Load Foo&#x27; texture</span><br><span class="hljs-keyword">if</span>( !gFooTexture.<span class="hljs-built_in">loadFromFile</span>( <span class="hljs-string">&quot;foo.png&quot;</span> ) )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load Foo&#x27; texture image!\n&quot;</span> );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">//Load background texture</span><br><span class="hljs-keyword">if</span>( !gBackgroundTexture.<span class="hljs-built_in">loadFromFile</span>( <span class="hljs-string">&quot;background.png&quot;</span> ) )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load background texture image!\n&quot;</span> );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> success;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Free loaded images</span><br>gFooTexture.<span class="hljs-built_in">free</span>();<br>gBackgroundTexture.<span class="hljs-built_in">free</span>();<br><br><span class="hljs-comment">//Destroy window</span><br><span class="hljs-built_in">SDL_DestroyRenderer</span>( gRenderer );<br><span class="hljs-built_in">SDL_DestroyWindow</span>( gWindow );<br>gWindow = <span class="hljs-literal">NULL</span>;<br>gRenderer = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Quit SDL subsystems</span><br><span class="hljs-built_in">IMG_Quit</span>();<br><span class="hljs-built_in">SDL_Quit</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( <span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* args[] )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Start up SDL and create window</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">init</span>() )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to initialize!\n&quot;</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Load media</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">loadMedia</span>() )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load media!\n&quot;</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Main loop flag</span><br><span class="hljs-type">bool</span> quit = <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">//Event handler</span><br>SDL_Event e;<br><br><span class="hljs-comment">//While application is running</span><br><span class="hljs-keyword">while</span>( !quit )<br>&#123;<br><span class="hljs-comment">//Handle events on queue</span><br><span class="hljs-keyword">while</span>( <span class="hljs-built_in">SDL_PollEvent</span>( &amp;e ) != <span class="hljs-number">0</span> )<br>&#123;<br><span class="hljs-comment">//User requests quit</span><br><span class="hljs-keyword">if</span>( e.type == SDL_QUIT )<br>&#123;<br>quit = <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Clear screen</span><br><span class="hljs-built_in">SDL_SetRenderDrawColor</span>( gRenderer, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span> );<br><span class="hljs-built_in">SDL_RenderClear</span>( gRenderer );<br><br><span class="hljs-comment">//Render background texture to screen</span><br>gBackgroundTexture.<span class="hljs-built_in">render</span>( <span class="hljs-number">0</span>, <span class="hljs-number">0</span> );<br><br><span class="hljs-comment">//Render Foo&#x27; to the screen</span><br>gFooTexture.<span class="hljs-built_in">render</span>( <span class="hljs-number">240</span>, <span class="hljs-number">190</span> );<br><br><span class="hljs-comment">//Update screen</span><br><span class="hljs-built_in">SDL_RenderPresent</span>( gRenderer );<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Free resources and close SDL</span><br><span class="hljs-built_in">close</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这次博客的题目是color keying，其主要用于处理图层重叠，并且需要进行透明化处理的情况。在本实例中由于需要两张图，示例采用面向对象的设计模式，这也将是以后设计大型项目的基础。下面我将先从class开始讲起。<br><br /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LTexture</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//Initializes variables</span><br><span class="hljs-built_in">LTexture</span>();<br><br><span class="hljs-comment">//Deallocates memory</span><br>~<span class="hljs-built_in">LTexture</span>();<br><br><span class="hljs-comment">//Loads image at specified path</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadFromFile</span><span class="hljs-params">( std::string path )</span></span>;<br><br><span class="hljs-comment">//Deallocates texture</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">free</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Renders texture at given point</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">render</span><span class="hljs-params">( <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y )</span></span>;<br><br><span class="hljs-comment">//Gets image dimensions</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getWidth</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getHeight</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-keyword">private</span>:<br><span class="hljs-comment">//The actual hardware texture</span><br>SDL_Texture* mTexture;<br><br><span class="hljs-comment">//Image dimensions</span><br><span class="hljs-type">int</span> mWidth;<br><span class="hljs-type">int</span> mHeight;<br>&#125;;<br></code></pre></td></tr></table></figure><p>上述代码是对于class LTexture的定义,其中包含了图像的基本信息和对图像所能进行的基本操作。Class member包含三个，mTexture是指向Texture的指针，mWeight是图像的宽度，mHeight是图像的高度。操作函数可以分为两类，第一类是想getWidth()和getHeight()这种针对class member的操作函数，第二类是对于其他面向功能类的函数。在第二类函数中，loadFromFile的作用便是从文件中获取图像，今天的主题color keying也是在这个函数中实现。Free()便是之前的释放资源，这个函数的定义和之前博客中的释放资源函数相同，不同之处在于这里需要通过相应的类示例去调用。最后一个函数是用来将图片渲染到屏幕的对应位置。<br><br /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Initialization flag</span><br><span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//Initialize SDL</span><br><span class="hljs-keyword">if</span>( <span class="hljs-built_in">SDL_Init</span>( SDL_INIT_VIDEO ) &lt; <span class="hljs-number">0</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;SDL could not initialize! SDL Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Set texture filtering to linear</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">SDL_SetHint</span>( SDL_HINT_RENDER_SCALE_QUALITY, <span class="hljs-string">&quot;1&quot;</span> ) )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Warning: Linear texture filtering not enabled!&quot;</span> );<br>&#125;<br><br><span class="hljs-comment">//Create window</span><br>gWindow = <span class="hljs-built_in">SDL_CreateWindow</span>( <span class="hljs-string">&quot;SDL Tutorial&quot;</span>, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN );<br><span class="hljs-keyword">if</span>( gWindow == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Window could not be created! SDL Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Create renderer for window</span><br>gRenderer = <span class="hljs-built_in">SDL_CreateRenderer</span>( gWindow, <span class="hljs-number">-1</span>, SDL_RENDERER_ACCELERATED );<br><span class="hljs-keyword">if</span>( gRenderer == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Renderer could not be created! SDL Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Initialize renderer color</span><br><span class="hljs-built_in">SDL_SetRenderDrawColor</span>( gRenderer, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span> );<br><br><span class="hljs-comment">//Initialize PNG loading</span><br><span class="hljs-type">int</span> imgFlags = IMG_INIT_PNG;<br><span class="hljs-keyword">if</span>( !( <span class="hljs-built_in">IMG_Init</span>( imgFlags ) &amp; imgFlags ) )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;SDL_image could not initialize! SDL_image Error: %s\n&quot;</span>, <span class="hljs-built_in">IMG_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> success;<br>&#125;<br></code></pre></td></tr></table></figure><p>如注释写的那样，Init函数主要做了6件事。初始化SDL的视频事件，设置texture filtering, 创建窗口，创建窗口渲染器，设置渲染器底色，初始化png图片加载器。需要注意一点的是，这些初始化操作有着严格的先后顺序，不能前后颠倒。<br><br /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadMedia</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Loading success flag</span><br><span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//Load Foo&#x27; texture</span><br><span class="hljs-keyword">if</span>( !gFooTexture.<span class="hljs-built_in">loadFromFile</span>( <span class="hljs-string">&quot;foo.png&quot;</span> ) )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load Foo&#x27; texture image!\n&quot;</span> );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">//Load background texture</span><br><span class="hljs-keyword">if</span>( !gBackgroundTexture.<span class="hljs-built_in">loadFromFile</span>( <span class="hljs-string">&quot;background.png&quot;</span> ) )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load background texture image!\n&quot;</span> );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> success;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码是加载媒体函数，这里没有采用直接加载的方式，而是通过调用class function的方式。在具体使用的使用只需要调用以此loadmedia函数便能同时完成两个图片的加载。<br><br /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Free loaded images</span><br>gFooTexture.<span class="hljs-built_in">free</span>();<br>gBackgroundTexture.<span class="hljs-built_in">free</span>();<br><br><span class="hljs-comment">//Destroy window</span><br><span class="hljs-built_in">SDL_DestroyRenderer</span>( gRenderer );<br><span class="hljs-built_in">SDL_DestroyWindow</span>( gWindow );<br>gWindow = <span class="hljs-literal">NULL</span>;<br>gRenderer = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Quit SDL subsystems</span><br><span class="hljs-built_in">IMG_Quit</span>();<br><span class="hljs-built_in">SDL_Quit</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LTexture::free</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Free texture if it exists</span><br><span class="hljs-keyword">if</span>( mTexture != <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">SDL_DestroyTexture</span>( mTexture );<br>mTexture = <span class="hljs-literal">NULL</span>;<br>mWidth = <span class="hljs-number">0</span>;<br>mHeight = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里是close函数和class function free函数。前一个是负责class之外的资源释放，后一个是负责class之内的资源释放。<br><br /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">LTexture::loadFromFile</span><span class="hljs-params">( std::string path )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Get rid of preexisting texture</span><br><span class="hljs-built_in">free</span>();<br><br><span class="hljs-comment">//The final texture</span><br>SDL_Texture* newTexture = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Load image at specified path</span><br>SDL_Surface* loadedSurface = <span class="hljs-built_in">IMG_Load</span>( path.<span class="hljs-built_in">c_str</span>() );<br><span class="hljs-keyword">if</span>( loadedSurface == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Unable to load image %s! SDL_image Error: %s\n&quot;</span>, path.<span class="hljs-built_in">c_str</span>(), <span class="hljs-built_in">IMG_GetError</span>() );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Color key image</span><br><span class="hljs-built_in">SDL_SetColorKey</span>( loadedSurface, SDL_TRUE, <span class="hljs-built_in">SDL_MapRGB</span>( loadedSurface-&gt;format, <span class="hljs-number">0</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span> ) );<br><br><span class="hljs-comment">//Create texture from surface pixels</span><br>        newTexture = <span class="hljs-built_in">SDL_CreateTextureFromSurface</span>( gRenderer, loadedSurface );<br><span class="hljs-keyword">if</span>( newTexture == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Unable to create texture from %s! SDL Error: %s\n&quot;</span>, path.<span class="hljs-built_in">c_str</span>(), <span class="hljs-built_in">SDL_GetError</span>() );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Get image dimensions</span><br>mWidth = loadedSurface-&gt;w;<br>mHeight = loadedSurface-&gt;h;<br>&#125;<br><br><span class="hljs-comment">//Get rid of old loaded surface</span><br><span class="hljs-built_in">SDL_FreeSurface</span>( loadedSurface );<br>&#125;<br><br><span class="hljs-comment">//Return success</span><br>mTexture = newTexture;<br><span class="hljs-keyword">return</span> mTexture != <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这块代码其实大部分用的是之前博客中的loadmedia函数，现在只是将其搬到了类之中进行了封装。需要注意这里的<a href="/2024/01/05/SDL/Dictionary/SDL_SetColorKey/" title="SDL_SetColorKey">SDL_SetColorKey</a>调用是在surface转texture之前的。另外对于如何获取SDL_SetColorKey中r,g,b的像素值，有许多工具可以选择，作者这里用到的是<a href="https://www.mathworks.com/matlabcentral/answers/1671444-how-to-find-the-colour-of-an-image-at-specific-pixel-values">MATLAB</a>。<br><br /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LTexture::render</span><span class="hljs-params">( <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Set rendering space and render to screen</span><br>SDL_Rect renderQuad = &#123; x, y, mWidth, mHeight &#125;;<br><span class="hljs-built_in">SDL_RenderCopy</span>( gRenderer, mTexture, <span class="hljs-literal">NULL</span>, &amp;renderQuad );<br>&#125;<br>上述代码是<span class="hljs-keyword">class</span> <span class="hljs-title class_">function</span> render的定义。结合上一篇博文，这里使用SDL_RenderCopy或者SDL_RenderCopy结合SDL_RenderSetViewport的方式都可以。<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( <span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* args[] )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Start up SDL and create window</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">init</span>() )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to initialize!\n&quot;</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Load media</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">loadMedia</span>() )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load media!\n&quot;</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Main loop flag</span><br><span class="hljs-type">bool</span> quit = <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">//Event handler</span><br>SDL_Event e;<br><br><span class="hljs-comment">//While application is running</span><br><span class="hljs-keyword">while</span>( !quit )<br>&#123;<br><span class="hljs-comment">//Handle events on queue</span><br><span class="hljs-keyword">while</span>( <span class="hljs-built_in">SDL_PollEvent</span>( &amp;e ) != <span class="hljs-number">0</span> )<br>&#123;<br><span class="hljs-comment">//User requests quit</span><br><span class="hljs-keyword">if</span>( e.type == SDL_QUIT )<br>&#123;<br>quit = <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Clear screen</span><br><span class="hljs-built_in">SDL_SetRenderDrawColor</span>( gRenderer, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span> );<br><span class="hljs-built_in">SDL_RenderClear</span>( gRenderer );<br><br><span class="hljs-comment">//Render background texture to screen</span><br>gBackgroundTexture.<span class="hljs-built_in">render</span>( <span class="hljs-number">0</span>, <span class="hljs-number">0</span> );<br><br><span class="hljs-comment">//Render Foo&#x27; to the screen</span><br>gFooTexture.<span class="hljs-built_in">render</span>( <span class="hljs-number">240</span>, <span class="hljs-number">190</span> );<br><br><span class="hljs-comment">//Update screen</span><br><span class="hljs-built_in">SDL_RenderPresent</span>( gRenderer );<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Free resources and close SDL</span><br><span class="hljs-built_in">close</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段便是主函数块，这里可以明显的感受到使用了面向设计的好处，使用者完全不需要知道class function内部的具体实现，只需要知道如何使用相应的class function。而且由于大量的代码封装在了class function内部，使得main函数整洁了许多。</p>]]></content>
    
    
    <categories>
      
      <category>Game Development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>9.The Viewport</title>
    <link href="/2024/01/21/SDL/9.The%20Viewport/"/>
    <url>/2024/01/21/SDL/9.The%20Viewport/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>参考博客：<a href="https://lazyfoo.net/tutorials/SDL/09_the_viewport/index.php">Lazy Foo’ Productions</a><br>示例代码取自Lazy Foo<br><br /><br>示例代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*This source code copyrighted by Lazy Foo&#x27; Productions 2004-2024</span><br><span class="hljs-comment">and may not be redistributed without written permission.*/</span><br><br><span class="hljs-comment">//Using SDL, SDL_image, standard IO, and strings</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SDL.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SDL_image.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-comment">//Screen dimension constants</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> SCREEN_WIDTH = <span class="hljs-number">640</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> SCREEN_HEIGHT = <span class="hljs-number">480</span>;<br><br><span class="hljs-comment">//Starts up SDL and creates window</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Loads media</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadMedia</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Frees media and shuts down SDL</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Loads individual image as texture</span><br><span class="hljs-function">SDL_Texture* <span class="hljs-title">loadTexture</span><span class="hljs-params">( std::string path )</span></span>;<br><br><span class="hljs-comment">//The window we&#x27;ll be rendering to</span><br>SDL_Window* gWindow = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//The window renderer</span><br>SDL_Renderer* gRenderer = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Current displayed texture</span><br>SDL_Texture* gTexture = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Initialization flag</span><br><span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//Initialize SDL</span><br><span class="hljs-keyword">if</span>( <span class="hljs-built_in">SDL_Init</span>( SDL_INIT_VIDEO ) &lt; <span class="hljs-number">0</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;SDL could not initialize! SDL Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Set texture filtering to linear</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">SDL_SetHint</span>( SDL_HINT_RENDER_SCALE_QUALITY, <span class="hljs-string">&quot;1&quot;</span> ) )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Warning: Linear texture filtering not enabled!&quot;</span> );<br>&#125;<br><br><span class="hljs-comment">//Create window</span><br>gWindow = <span class="hljs-built_in">SDL_CreateWindow</span>( <span class="hljs-string">&quot;SDL Tutorial&quot;</span>, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN );<br><span class="hljs-keyword">if</span>( gWindow == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Window could not be created! SDL Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Create renderer for window</span><br>gRenderer = <span class="hljs-built_in">SDL_CreateRenderer</span>( gWindow, <span class="hljs-number">-1</span>, SDL_RENDERER_ACCELERATED );<br><span class="hljs-keyword">if</span>( gRenderer == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Renderer could not be created! SDL Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Initialize renderer color</span><br><span class="hljs-built_in">SDL_SetRenderDrawColor</span>( gRenderer, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span> );<br><br><span class="hljs-comment">//Initialize PNG loading</span><br><span class="hljs-type">int</span> imgFlags = IMG_INIT_PNG;<br><span class="hljs-keyword">if</span>( !( <span class="hljs-built_in">IMG_Init</span>( imgFlags ) &amp; imgFlags ) )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;SDL_image could not initialize! SDL_image Error: %s\n&quot;</span>, <span class="hljs-built_in">IMG_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> success;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadMedia</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Loading success flag</span><br><span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//Load texture</span><br>gTexture = <span class="hljs-built_in">loadTexture</span>( <span class="hljs-string">&quot;viewport.png&quot;</span> );<br><span class="hljs-keyword">if</span>( gTexture == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load texture image!\n&quot;</span> );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">//Nothing to load</span><br><span class="hljs-keyword">return</span> success;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Free loaded image</span><br><span class="hljs-built_in">SDL_DestroyTexture</span>( gTexture );<br>gTexture = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Destroy window</span><br><span class="hljs-built_in">SDL_DestroyRenderer</span>( gRenderer );<br><span class="hljs-built_in">SDL_DestroyWindow</span>( gWindow );<br>gWindow = <span class="hljs-literal">NULL</span>;<br>gRenderer = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Quit SDL subsystems</span><br><span class="hljs-built_in">IMG_Quit</span>();<br><span class="hljs-built_in">SDL_Quit</span>();<br>&#125;<br><br><span class="hljs-function">SDL_Texture* <span class="hljs-title">loadTexture</span><span class="hljs-params">( std::string path )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//The final texture</span><br>SDL_Texture* newTexture = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Load image at specified path</span><br>SDL_Surface* loadedSurface = <span class="hljs-built_in">IMG_Load</span>( path.<span class="hljs-built_in">c_str</span>() );<br><span class="hljs-keyword">if</span>( loadedSurface == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Unable to load image %s! SDL_image Error: %s\n&quot;</span>, path.<span class="hljs-built_in">c_str</span>(), <span class="hljs-built_in">IMG_GetError</span>() );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Create texture from surface pixels</span><br>        newTexture = <span class="hljs-built_in">SDL_CreateTextureFromSurface</span>( gRenderer, loadedSurface );<br><span class="hljs-keyword">if</span>( newTexture == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Unable to create texture from %s! SDL Error: %s\n&quot;</span>, path.<span class="hljs-built_in">c_str</span>(), <span class="hljs-built_in">SDL_GetError</span>() );<br>&#125;<br><br><span class="hljs-comment">//Get rid of old loaded surface</span><br><span class="hljs-built_in">SDL_FreeSurface</span>( loadedSurface );<br>&#125;<br><br><span class="hljs-keyword">return</span> newTexture;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( <span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* args[] )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Start up SDL and create window</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">init</span>() )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to initialize!\n&quot;</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Load media</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">loadMedia</span>() )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load media!\n&quot;</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Main loop flag</span><br><span class="hljs-type">bool</span> quit = <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">//Event handler</span><br>SDL_Event e;<br><br><span class="hljs-comment">//While application is running</span><br><span class="hljs-keyword">while</span>( !quit )<br>&#123;<br><span class="hljs-comment">//Handle events on queue</span><br><span class="hljs-keyword">while</span>( <span class="hljs-built_in">SDL_PollEvent</span>( &amp;e ) != <span class="hljs-number">0</span> )<br>&#123;<br><span class="hljs-comment">//User requests quit</span><br><span class="hljs-keyword">if</span>( e.type == SDL_QUIT )<br>&#123;<br>quit = <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Clear screen</span><br><span class="hljs-built_in">SDL_SetRenderDrawColor</span>( gRenderer, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span> );<br><span class="hljs-built_in">SDL_RenderClear</span>( gRenderer );<br><br><span class="hljs-comment">//Top left corner viewport</span><br>SDL_Rect topLeftViewport;<br>topLeftViewport.x = <span class="hljs-number">0</span>;<br>topLeftViewport.y = <span class="hljs-number">0</span>;<br>topLeftViewport.w = SCREEN_WIDTH / <span class="hljs-number">2</span>;<br>topLeftViewport.h = SCREEN_HEIGHT / <span class="hljs-number">2</span>;<br><br><span class="hljs-built_in">SDL_RenderSetViewport</span>( gRenderer, &amp;topLeftViewport );<br><br><span class="hljs-comment">//Render texture to screen</span><br><span class="hljs-built_in">SDL_RenderCopy</span>( gRenderer, gTexture, &amp;topLeftViewport, <span class="hljs-literal">NULL</span> );<br><br><br><span class="hljs-comment">//Top right viewport</span><br>SDL_Rect topRightViewport;<br>topRightViewport.x = SCREEN_WIDTH / <span class="hljs-number">2</span>;<br>topRightViewport.y = <span class="hljs-number">0</span>;<br>topRightViewport.w = SCREEN_WIDTH / <span class="hljs-number">2</span>;<br>topRightViewport.h = SCREEN_HEIGHT / <span class="hljs-number">2</span>;<br><br><span class="hljs-built_in">SDL_RenderSetViewport</span>( gRenderer, &amp;topRightViewport );<br><br><span class="hljs-comment">//Render texture to screen</span><br><span class="hljs-built_in">SDL_RenderCopy</span>( gRenderer, gTexture, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> );<br><br><br><span class="hljs-comment">//Bottom viewport</span><br>SDL_Rect bottomViewport;<br>bottomViewport.x = <span class="hljs-number">0</span>;<br>bottomViewport.y = SCREEN_HEIGHT / <span class="hljs-number">2</span>;<br>bottomViewport.w = SCREEN_WIDTH;<br>bottomViewport.h = SCREEN_HEIGHT / <span class="hljs-number">2</span>;<br><span class="hljs-built_in">SDL_RenderSetViewport</span>( gRenderer, &amp;bottomViewport );<br><br><br><span class="hljs-comment">//Render texture to screen</span><br><span class="hljs-built_in">SDL_RenderCopy</span>( gRenderer, gTexture, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> );<br><br><br><span class="hljs-comment">//Update screen</span><br><span class="hljs-built_in">SDL_RenderPresent</span>( gRenderer );<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Free resources and close SDL</span><br><span class="hljs-built_in">close</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上一节中我们尝试了在屏幕上画出不同颜色的不同形状，但不难发现其处理方式十分笨拙。每次添加图案都是将整个屏幕作为一个编辑对象。现在如果我们需要对屏幕的不同区域进行不同的渲染又该如何操作呢？想必大家都知道雕版印刷和活字印刷的区别，解决知道就暗藏其中，如果还不明白就请耐心读完。<br>这次的示例代码重点在main函数中，其他的代码由于类同这里便不再赘述，不懂得请看之前得博文。<br><br /><br>示例代码中的许多内容我们在上有一节中都有所讨论，今天我们重点关注下面这段代码块</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//Top left corner viewport</span><br>SDL_Rect topLeftViewport;<br>topLeftViewport.x = <span class="hljs-number">0</span>;<br>topLeftViewport.y = <span class="hljs-number">0</span>;<br>topLeftViewport.w = SCREEN_WIDTH / <span class="hljs-number">2</span>;<br>topLeftViewport.h = SCREEN_HEIGHT / <span class="hljs-number">2</span>;<br><br><span class="hljs-built_in">SDL_RenderSetViewport</span>( gRenderer, &amp;topLeftViewport );<br><br><span class="hljs-comment">//Render texture to screen</span><br><span class="hljs-built_in">SDL_RenderCopy</span>( gRenderer, gTexture, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> );<br></code></pre></td></tr></table></figure><p>代码将需要渲染的整体目标（屏幕）分成了三块，分别是左上，右上，和下。首先我们来看左上，代码如上所示。我们先定义一个<a href="/2024/01/05/SDL/Dictionary/SDL_Rect/" title="SDL_Rect">SDL_Rect</a>,然后通过<a href="/2024/01/10/SDL/Dictionary/SDL_RenderSetViewport/" title="SDL_RenderSetViewport">SDL_RenderSetViewport()</a>函数来告诉渲染器我们现在只处理屏幕的左上部分。然后通过<a href="/2024/01/10/SDL/Dictionary/SDL_RenderCopy/" title="SDL_RenderCopy">SDL_RenderCopy()</a>将我们的图片拷贝至我们自定义大小的渲染区域。<br>对于右上区域和下区域的操作类似，只不过需要更改topLeftViewport的尺寸。如果说所分割的区域加起来比屏幕小，那么剩下的部分就是我们设置的渲染底色（在测试代码中设置为白）。<br>最终的效果图如下图显示。<br><img src="/img/SDL/lazyfoo_09.png"></p><br />在这篇博文结束之前我想补充一下对于SDL_RenderCopy的解释。为了方便读者的理解，我以左上部分的代码为模板做了几个简单的示例。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//Top left corner viewport</span><br>SDL_Rect topLeftViewport;<br>SDL_Rect topLeftViewport1;<br>topLeftViewport.x = <span class="hljs-number">0</span>;<br>topLeftViewport.y = <span class="hljs-number">0</span>;<br>topLeftViewport.w = SCREEN_WIDTH / <span class="hljs-number">2</span>;<br>topLeftViewport.h = SCREEN_HEIGHT / <span class="hljs-number">2</span>;<br><br>topLeftViewport1.x = <span class="hljs-number">0</span>;<br>topLeftViewport1.y = <span class="hljs-number">0</span>;<br>topLeftViewport1.w = SCREEN_WIDTH / <span class="hljs-number">4</span>;<br>topLeftViewport1.h = SCREEN_HEIGHT / <span class="hljs-number">4</span>;<br><br><span class="hljs-built_in">SDL_RenderSetViewport</span>( gRenderer, &amp;topLeftViewport );<br><br><span class="hljs-comment">//Render texture to screen</span><br><span class="hljs-built_in">SDL_RenderCopy</span>( gRenderer, gTexture, <span class="hljs-literal">NULL</span>, &amp;topLeftViewport1 );<br></code></pre></td></tr></table></figure><p><img src="/img/SDL/lazyfoo_09_test1.png"><br>测试代码和效果图如上，由于SDL_RenderCopy的第三个参数设置为NULL所以我们使用的是整个Texture,而第四个参数我们设置成了屏幕大小的1&#x2F;16，那么放在左上角的窗口中就是其大小的1&#x2F;4.<br><br /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//Top left corner viewport</span><br>SDL_Rect topLeftViewport;<br>SDL_Rect topLeftViewport1;<br>topLeftViewport.x = <span class="hljs-number">0</span>;<br>topLeftViewport.y = <span class="hljs-number">0</span>;<br>topLeftViewport.w = SCREEN_WIDTH / <span class="hljs-number">2</span>;<br>topLeftViewport.h = SCREEN_HEIGHT / <span class="hljs-number">2</span>;<br><br>topLeftViewport1.x = <span class="hljs-number">0</span>;<br>topLeftViewport1.y = <span class="hljs-number">0</span>;<br>topLeftViewport1.w = SCREEN_WIDTH / <span class="hljs-number">8</span>;<br>topLeftViewport1.h = SCREEN_HEIGHT / <span class="hljs-number">8</span>;<br><br><span class="hljs-built_in">SDL_RenderSetViewport</span>( gRenderer, &amp;topLeftViewport );<br><br><span class="hljs-comment">//Render texture to screen</span><br><span class="hljs-built_in">SDL_RenderCopy</span>( gRenderer, gTexture, &amp;topLeftViewport, &amp;topLeftViewport1 );<br></code></pre></td></tr></table></figure><p><img src="/img/SDL/lazyfoo_09_test2.png"></p><p>测试代码和效果图如上，在这次测试中第三个参数被设置为屏幕大小的1&#x2F;4，所以左上区域的图片只显示了图片的1&#x2F;4。对于第四个参数，我们设置为屏幕大小的1&#x2F;64那么相对于左上角便是1&#x2F;16.<br><br /></p><p>从上面两个实例中我们可以推出SDL_RenderCopy第三参数是针对于Texture的SDL_Rect。而第四个参数是针对于指定渲染窗口的的SDL_Rect。那这里就可能会有读者提出疑问了，那既然我们有了SDL_RenderCopy那还需要SDL_RenderSetViewport干嘛？作者试下来的结果都可以。下面是没有使用SDL_RenderSetViewport的代码块，但是实现了相同的效果。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//Top left corner viewport</span><br>SDL_Rect topLeftViewport;<br>topLeftViewport.x = <span class="hljs-number">0</span>;<br>topLeftViewport.y = <span class="hljs-number">0</span>;<br>topLeftViewport.w = SCREEN_WIDTH / <span class="hljs-number">2</span>;<br>topLeftViewport.h = SCREEN_HEIGHT / <span class="hljs-number">2</span>;<br><br><br><span class="hljs-comment">//SDL_RenderSetViewport( gRenderer, &amp;topLeftViewport );</span><br><br><span class="hljs-comment">//Render texture to screen</span><br><span class="hljs-built_in">SDL_RenderCopy</span>( gRenderer, gTexture, <span class="hljs-literal">NULL</span>, &amp;topLeftViewport );<br><br><br><span class="hljs-comment">//Top right viewport</span><br>SDL_Rect topRightViewport;<br>topRightViewport.x = SCREEN_WIDTH / <span class="hljs-number">2</span>;<br>topRightViewport.y = <span class="hljs-number">0</span>;<br>topRightViewport.w = SCREEN_WIDTH / <span class="hljs-number">2</span>;<br>topRightViewport.h = SCREEN_HEIGHT / <span class="hljs-number">2</span>;<br><br><span class="hljs-comment">//SDL_RenderSetViewport( gRenderer, &amp;topRightViewport );</span><br><br><span class="hljs-comment">//Render texture to screen</span><br><span class="hljs-built_in">SDL_RenderCopy</span>( gRenderer, gTexture, <span class="hljs-literal">NULL</span>, &amp;topRightViewport );<br><br><br><span class="hljs-comment">//Bottom viewport</span><br>SDL_Rect bottomViewport;<br>bottomViewport.x = <span class="hljs-number">0</span>;<br>bottomViewport.y = SCREEN_HEIGHT / <span class="hljs-number">2</span>;<br>bottomViewport.w = SCREEN_WIDTH;<br>bottomViewport.h = SCREEN_HEIGHT / <span class="hljs-number">2</span>;<br><span class="hljs-comment">//SDL_RenderSetViewport( gRenderer, &amp;bottomViewport );</span><br><br><br><span class="hljs-comment">//Render texture to screen</span><br><span class="hljs-built_in">SDL_RenderCopy</span>( gRenderer, gTexture, <span class="hljs-literal">NULL</span>, &amp;bottomViewport );<br><br><br><span class="hljs-comment">//Update screen</span><br><span class="hljs-built_in">SDL_RenderPresent</span>( gRenderer );<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Game Development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>8.Geometry Rendering</title>
    <link href="/2024/01/21/SDL/8.Geometry%20Rendering/"/>
    <url>/2024/01/21/SDL/8.Geometry%20Rendering/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>参考博客：<a href="https://lazyfoo.net/tutorials/SDL/08_geometry_rendering/index.php">Lazy Foo’ Productions</a><br>示例代码取自Lazy Foo<br><br /><br>示例代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*This source code copyrighted by Lazy Foo&#x27; Productions 2004-2024</span><br><span class="hljs-comment">and may not be redistributed without written permission.*/</span><br><br><span class="hljs-comment">//Using SDL, SDL_image, standard IO, math, and strings</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SDL.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SDL_image.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><br><span class="hljs-comment">//Screen dimension constants</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> SCREEN_WIDTH = <span class="hljs-number">640</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> SCREEN_HEIGHT = <span class="hljs-number">480</span>;<br><br><span class="hljs-comment">//Starts up SDL and creates window</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Loads media</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadMedia</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Frees media and shuts down SDL</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Loads individual image as texture</span><br><span class="hljs-function">SDL_Texture* <span class="hljs-title">loadTexture</span><span class="hljs-params">( std::string path )</span></span>;<br><br><span class="hljs-comment">//The window we&#x27;ll be rendering to</span><br>SDL_Window* gWindow = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//The window renderer</span><br>SDL_Renderer* gRenderer = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Initialization flag</span><br><span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//Initialize SDL</span><br><span class="hljs-keyword">if</span>( <span class="hljs-built_in">SDL_Init</span>( SDL_INIT_VIDEO ) &lt; <span class="hljs-number">0</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;SDL could not initialize! SDL Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Set texture filtering to linear</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">SDL_SetHint</span>( SDL_HINT_RENDER_SCALE_QUALITY, <span class="hljs-string">&quot;1&quot;</span> ) )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Warning: Linear texture filtering not enabled!&quot;</span> );<br>&#125;<br><br><span class="hljs-comment">//Create window</span><br>gWindow = <span class="hljs-built_in">SDL_CreateWindow</span>( <span class="hljs-string">&quot;SDL Tutorial&quot;</span>, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN );<br><span class="hljs-keyword">if</span>( gWindow == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Window could not be created! SDL Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Create renderer for window</span><br>gRenderer = <span class="hljs-built_in">SDL_CreateRenderer</span>( gWindow, <span class="hljs-number">-1</span>, SDL_RENDERER_ACCELERATED );<br><span class="hljs-keyword">if</span>( gRenderer == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Renderer could not be created! SDL Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Initialize renderer color</span><br><span class="hljs-built_in">SDL_SetRenderDrawColor</span>( gRenderer, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span> );<br><br><span class="hljs-comment">//Initialize PNG loading</span><br><span class="hljs-type">int</span> imgFlags = IMG_INIT_PNG;<br><span class="hljs-keyword">if</span>( !( <span class="hljs-built_in">IMG_Init</span>( imgFlags ) &amp; imgFlags ) )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;SDL_image could not initialize! SDL_image Error: %s\n&quot;</span>, <span class="hljs-built_in">IMG_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> success;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadMedia</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Loading success flag</span><br><span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//Nothing to load</span><br><span class="hljs-keyword">return</span> success;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Destroy window</span><br><span class="hljs-built_in">SDL_DestroyRenderer</span>( gRenderer );<br><span class="hljs-built_in">SDL_DestroyWindow</span>( gWindow );<br>gWindow = <span class="hljs-literal">NULL</span>;<br>gRenderer = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Quit SDL subsystems</span><br><span class="hljs-built_in">IMG_Quit</span>();<br><span class="hljs-built_in">SDL_Quit</span>();<br>&#125;<br><br><span class="hljs-function">SDL_Texture* <span class="hljs-title">loadTexture</span><span class="hljs-params">( std::string path )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//The final texture</span><br>SDL_Texture* newTexture = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Load image at specified path</span><br>SDL_Surface* loadedSurface = <span class="hljs-built_in">IMG_Load</span>( path.<span class="hljs-built_in">c_str</span>() );<br><span class="hljs-keyword">if</span>( loadedSurface == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Unable to load image %s! SDL_image Error: %s\n&quot;</span>, path.<span class="hljs-built_in">c_str</span>(), <span class="hljs-built_in">IMG_GetError</span>() );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Create texture from surface pixels</span><br>        newTexture = <span class="hljs-built_in">SDL_CreateTextureFromSurface</span>( gRenderer, loadedSurface );<br><span class="hljs-keyword">if</span>( newTexture == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Unable to create texture from %s! SDL Error: %s\n&quot;</span>, path.<span class="hljs-built_in">c_str</span>(), <span class="hljs-built_in">SDL_GetError</span>() );<br>&#125;<br><br><span class="hljs-comment">//Get rid of old loaded surface</span><br><span class="hljs-built_in">SDL_FreeSurface</span>( loadedSurface );<br>&#125;<br><br><span class="hljs-keyword">return</span> newTexture;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( <span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* args[] )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Start up SDL and create window</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">init</span>() )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to initialize!\n&quot;</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Load media</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">loadMedia</span>() )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load media!\n&quot;</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Main loop flag</span><br><span class="hljs-type">bool</span> quit = <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">//Event handler</span><br>SDL_Event e;<br><br><span class="hljs-comment">//While application is running</span><br><span class="hljs-keyword">while</span>( !quit )<br>&#123;<br><span class="hljs-comment">//Handle events on queue</span><br><span class="hljs-keyword">while</span>( <span class="hljs-built_in">SDL_PollEvent</span>( &amp;e ) != <span class="hljs-number">0</span> )<br>&#123;<br><span class="hljs-comment">//User requests quit</span><br><span class="hljs-keyword">if</span>( e.type == SDL_QUIT )<br>&#123;<br>quit = <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Clear screen</span><br><span class="hljs-built_in">SDL_SetRenderDrawColor</span>( gRenderer, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span> );<br><span class="hljs-built_in">SDL_RenderClear</span>( gRenderer );<br><br><span class="hljs-comment">//Render red filled quad</span><br>SDL_Rect fillRect = &#123; SCREEN_WIDTH / <span class="hljs-number">4</span>, SCREEN_HEIGHT / <span class="hljs-number">4</span>, SCREEN_WIDTH / <span class="hljs-number">2</span>, SCREEN_HEIGHT / <span class="hljs-number">2</span> &#125;;<br><span class="hljs-built_in">SDL_SetRenderDrawColor</span>( gRenderer, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xFF</span> );<br><span class="hljs-built_in">SDL_RenderFillRect</span>( gRenderer, &amp;fillRect );<br><br><span class="hljs-comment">//Render green outlined quad</span><br>SDL_Rect outlineRect = &#123; SCREEN_WIDTH / <span class="hljs-number">6</span>, SCREEN_HEIGHT / <span class="hljs-number">6</span>, SCREEN_WIDTH * <span class="hljs-number">2</span> / <span class="hljs-number">3</span>, SCREEN_HEIGHT * <span class="hljs-number">2</span> / <span class="hljs-number">3</span> &#125;;<br><span class="hljs-built_in">SDL_SetRenderDrawColor</span>( gRenderer, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xFF</span> );<br><span class="hljs-built_in">SDL_RenderDrawRect</span>( gRenderer, &amp;outlineRect );<br><br><span class="hljs-comment">//Draw blue horizontal line</span><br><span class="hljs-built_in">SDL_SetRenderDrawColor</span>( gRenderer, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span> );<br><span class="hljs-built_in">SDL_RenderDrawLine</span>( gRenderer, <span class="hljs-number">0</span>, SCREEN_HEIGHT / <span class="hljs-number">2</span>, SCREEN_WIDTH, SCREEN_HEIGHT / <span class="hljs-number">2</span> );<br><br><span class="hljs-comment">//Draw vertical line of yellow dots</span><br><span class="hljs-built_in">SDL_SetRenderDrawColor</span>( gRenderer, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xFF</span> );<br><span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; SCREEN_HEIGHT; i += <span class="hljs-number">4</span> )<br>&#123;<br><span class="hljs-built_in">SDL_RenderDrawPoint</span>( gRenderer, SCREEN_WIDTH / <span class="hljs-number">2</span>, i );<br>&#125;<br><br><span class="hljs-comment">//Update screen</span><br><span class="hljs-built_in">SDL_RenderPresent</span>( gRenderer );<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Free resources and close SDL</span><br><span class="hljs-built_in">close</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上一篇博文中，我们使用了新的一种数据格式Texture和图片格式，并采用硬件加速渲染的方式来讲PNG图片格式显示到屏幕上。但渲染器能做到的可不止于此，相比于直接使用Surface显示图片的方式，渲染器能在原本的图片中添加内容。相信很多读者都玩过电脑自带的程序“画图”，今天我们就来用SDL来作图。<br><br /><br>示例代码中的许多内容我们在上有一节中都有所讨论，今天我们重点关注下面这段代码块</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( <span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* args[] )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Start up SDL and create window</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">init</span>() )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to initialize!\n&quot;</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Load media</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">loadMedia</span>() )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load media!\n&quot;</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Main loop flag</span><br><span class="hljs-type">bool</span> quit = <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">//Event handler</span><br>SDL_Event e;<br><br><span class="hljs-comment">//While application is running</span><br><span class="hljs-keyword">while</span>( !quit )<br>&#123;<br><span class="hljs-comment">//Handle events on queue</span><br><span class="hljs-keyword">while</span>( <span class="hljs-built_in">SDL_PollEvent</span>( &amp;e ) != <span class="hljs-number">0</span> )<br>&#123;<br><span class="hljs-comment">//User requests quit</span><br><span class="hljs-keyword">if</span>( e.type == SDL_QUIT )<br>&#123;<br>quit = <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Clear screen</span><br><span class="hljs-built_in">SDL_SetRenderDrawColor</span>( gRenderer, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span> );<br><span class="hljs-built_in">SDL_RenderClear</span>( gRenderer );<br><br><span class="hljs-comment">//Render red filled quad</span><br>SDL_Rect fillRect = &#123; SCREEN_WIDTH / <span class="hljs-number">4</span>, SCREEN_HEIGHT / <span class="hljs-number">4</span>, SCREEN_WIDTH / <span class="hljs-number">2</span>, SCREEN_HEIGHT / <span class="hljs-number">2</span> &#125;;<br><span class="hljs-built_in">SDL_SetRenderDrawColor</span>( gRenderer, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xFF</span> );<br><span class="hljs-built_in">SDL_RenderFillRect</span>( gRenderer, &amp;fillRect );<br><br><span class="hljs-comment">//Render green outlined quad</span><br>SDL_Rect outlineRect = &#123; SCREEN_WIDTH / <span class="hljs-number">6</span>, SCREEN_HEIGHT / <span class="hljs-number">6</span>, SCREEN_WIDTH * <span class="hljs-number">2</span> / <span class="hljs-number">3</span>, SCREEN_HEIGHT * <span class="hljs-number">2</span> / <span class="hljs-number">3</span> &#125;;<br><span class="hljs-built_in">SDL_SetRenderDrawColor</span>( gRenderer, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xFF</span> );<br><span class="hljs-built_in">SDL_RenderDrawRect</span>( gRenderer, &amp;outlineRect );<br><br><span class="hljs-comment">//Draw blue horizontal line</span><br><span class="hljs-built_in">SDL_SetRenderDrawColor</span>( gRenderer, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span> );<br><span class="hljs-built_in">SDL_RenderDrawLine</span>( gRenderer, <span class="hljs-number">0</span>, SCREEN_HEIGHT / <span class="hljs-number">2</span>, SCREEN_WIDTH, SCREEN_HEIGHT / <span class="hljs-number">2</span> );<br><br><span class="hljs-comment">//Draw vertical line of yellow dots</span><br><span class="hljs-built_in">SDL_SetRenderDrawColor</span>( gRenderer, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xFF</span> );<br><span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; SCREEN_HEIGHT; i += <span class="hljs-number">4</span> )<br>&#123;<br><span class="hljs-built_in">SDL_RenderDrawPoint</span>( gRenderer, SCREEN_WIDTH / <span class="hljs-number">2</span>, i );<br>&#125;<br><br><span class="hljs-comment">//Update screen</span><br><span class="hljs-built_in">SDL_RenderPresent</span>( gRenderer );<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Free resources and close SDL</span><br><span class="hljs-built_in">close</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码块是程序的主程序，其意图也能通过代码的注释很好的理解。简单来说这段函数其实就是在重复三个步骤：1. 绘制填充颜色的形状。2. 设定填充的颜色3. 使用合适的填充函数填充设定的形状。对于第一步，代码中分别使用了fillRect和<a href="/2024/01/05/SDL/Dictionary/SDL_PixelFormat/" title="SDL_PixelFormat">outlineRect()</a>来设置填充矩形和矩形框的形状。由于水平线和点的形状是唯一的所以不用设置。第二部就是使用SDL_SetRenderDrawColor(),对于如何选择颜色可以参照<a href="https://en.wikipedia.org/wiki/RGB_color_model">RGB表</a>。第三步，对于矩形我们使用<a href="/2024/01/10/SDL/Dictionary/SDL_RenderFillRect/" title="SDL_RenderFillRect">SDL_RenderFillRect()</a>。对于矩形框我们使用<a href="/2024/01/10/SDL/Dictionary/SDL_RenderDrawRect/" title="SDL_RenderDrawRect">SDL_RenderDrawRect()</a>。 对于直线我们使用<a href="/2024/01/10/SDL/Dictionary/SDL_RenderDrawLine/" title="SDL_RenderDrawLine">SDL_RenderDrawLine()</a>。对于点状线，我们使用类似于打点计数器的方式循环调用画点函数<a href="/2024/01/10/SDL/Dictionary/SDL_RenderDrawPoint/" title="SDL_RenderDrawPoint">SDL_RenderDrawPoint()</a>。</p>]]></content>
    
    
    <categories>
      
      <category>Game Development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7.Texture Loading and Rendering</title>
    <link href="/2024/01/15/SDL/7.Texture%20Loading%20and%20Rendering/"/>
    <url>/2024/01/15/SDL/7.Texture%20Loading%20and%20Rendering/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>参考博客：<a href="https://lazyfoo.net/tutorials/SDL/07_texture_loading_and_rendering/index.php">Lazy Foo’ Productions</a><br>示例代码取自Lazy Foo’<br><br /><br>示例代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*This source code copyrighted by Lazy Foo&#x27; Productions 2004-2024</span><br><span class="hljs-comment">and may not be redistributed without written permission.*/</span><br><br><span class="hljs-comment">//Using SDL, SDL_image, standard IO, and strings</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SDL.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SDL_image.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-comment">//Screen dimension constants</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> SCREEN_WIDTH = <span class="hljs-number">640</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> SCREEN_HEIGHT = <span class="hljs-number">480</span>;<br><br><span class="hljs-comment">//Starts up SDL and creates window</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Loads media</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadMedia</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Frees media and shuts down SDL</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Loads individual image as texture</span><br><span class="hljs-function">SDL_Texture* <span class="hljs-title">loadTexture</span><span class="hljs-params">( std::string path )</span></span>;<br><br><span class="hljs-comment">//The window we&#x27;ll be rendering to</span><br>SDL_Window* gWindow = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//The window renderer</span><br>SDL_Renderer* gRenderer = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Current displayed texture</span><br>SDL_Texture* gTexture = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Initialization flag</span><br><span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//Initialize SDL</span><br><span class="hljs-keyword">if</span>( <span class="hljs-built_in">SDL_Init</span>( SDL_INIT_VIDEO ) &lt; <span class="hljs-number">0</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;SDL could not initialize! SDL Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Set texture filtering to linear</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">SDL_SetHint</span>( SDL_HINT_RENDER_SCALE_QUALITY, <span class="hljs-string">&quot;1&quot;</span> ) )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Warning: Linear texture filtering not enabled!&quot;</span> );<br>&#125;<br><br><span class="hljs-comment">//Create window</span><br>gWindow = <span class="hljs-built_in">SDL_CreateWindow</span>( <span class="hljs-string">&quot;SDL Tutorial&quot;</span>, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN );<br><span class="hljs-keyword">if</span>( gWindow == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Window could not be created! SDL Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Create renderer for window</span><br>gRenderer = <span class="hljs-built_in">SDL_CreateRenderer</span>( gWindow, <span class="hljs-number">-1</span>, SDL_RENDERER_ACCELERATED );<br><span class="hljs-keyword">if</span>( gRenderer == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Renderer could not be created! SDL Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Initialize renderer color</span><br><span class="hljs-built_in">SDL_SetRenderDrawColor</span>( gRenderer, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span> );<br><br><span class="hljs-comment">//Initialize PNG loading</span><br><span class="hljs-type">int</span> imgFlags = IMG_INIT_PNG;<br><span class="hljs-keyword">if</span>( !( <span class="hljs-built_in">IMG_Init</span>( imgFlags ) &amp; imgFlags ) )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;SDL_image could not initialize! SDL_image Error: %s\n&quot;</span>, <span class="hljs-built_in">IMG_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> success;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadMedia</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Loading success flag</span><br><span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//Load PNG texture</span><br>gTexture = <span class="hljs-built_in">loadTexture</span>( <span class="hljs-string">&quot;texture.png&quot;</span> );<br><span class="hljs-keyword">if</span>( gTexture == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load texture image!\n&quot;</span> );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> success;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Free loaded image</span><br><span class="hljs-built_in">SDL_DestroyTexture</span>( gTexture );<br>gTexture = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Destroy window</span><br><span class="hljs-built_in">SDL_DestroyRenderer</span>( gRenderer );<br><span class="hljs-built_in">SDL_DestroyWindow</span>( gWindow );<br>gWindow = <span class="hljs-literal">NULL</span>;<br>gRenderer = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Quit SDL subsystems</span><br><span class="hljs-built_in">IMG_Quit</span>();<br><span class="hljs-built_in">SDL_Quit</span>();<br>&#125;<br><br><span class="hljs-function">SDL_Texture* <span class="hljs-title">loadTexture</span><span class="hljs-params">( std::string path )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//The final texture</span><br>SDL_Texture* newTexture = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Load image at specified path</span><br>SDL_Surface* loadedSurface = <span class="hljs-built_in">IMG_Load</span>( path.<span class="hljs-built_in">c_str</span>() );<br><span class="hljs-keyword">if</span>( loadedSurface == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Unable to load image %s! SDL_image Error: %s\n&quot;</span>, path.<span class="hljs-built_in">c_str</span>(), <span class="hljs-built_in">IMG_GetError</span>() );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Create texture from surface pixels</span><br>        newTexture = <span class="hljs-built_in">SDL_CreateTextureFromSurface</span>( gRenderer, loadedSurface );<br><span class="hljs-keyword">if</span>( newTexture == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Unable to create texture fromkeyi %s! SDL Error: %s\n&quot;</span>, path.<span class="hljs-built_in">c_str</span>(), <span class="hljs-built_in">SDL_GetError</span>() );<br>&#125;<br><br><span class="hljs-comment">//Get rid of old loaded surface</span><br><span class="hljs-built_in">SDL_FreeSurface</span>( loadedSurface );<br>&#125;<br><br><span class="hljs-keyword">return</span> newTexture;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( <span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* args[] )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Start up SDL and create window</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">init</span>() )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to initialize!\n&quot;</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Load media</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">loadMedia</span>() )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load media!\n&quot;</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Main loop flag</span><br><span class="hljs-type">bool</span> quit = <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">//Event handler</span><br>SDL_Event e;<br><br><span class="hljs-comment">//While application is running</span><br><span class="hljs-keyword">while</span>( !quit )<br>&#123;<br><span class="hljs-comment">//Handle events on queue</span><br><span class="hljs-keyword">while</span>( <span class="hljs-built_in">SDL_PollEvent</span>( &amp;e ) != <span class="hljs-number">0</span> )<br>&#123;<br><span class="hljs-comment">//User requests quit</span><br><span class="hljs-keyword">if</span>( e.type == SDL_QUIT )<br>&#123;<br>quit = <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Clear screen</span><br><span class="hljs-built_in">SDL_RenderClear</span>( gRenderer );<br><br><span class="hljs-comment">//Render texture to screen</span><br><span class="hljs-built_in">SDL_RenderCopy</span>( gRenderer, gTexture, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> );<br><br><span class="hljs-comment">//Update screen</span><br><span class="hljs-built_in">SDL_RenderPresent</span>( gRenderer );<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Free resources and close SDL</span><br><span class="hljs-built_in">close</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在之前的例子中我们用到的是基于软件的渲染，其中用到的结构体是Surface。这期教程我们将使用到的是基于硬件加速渲染的Texture结构。在将如何使用texture之前，很是有必要先讨论一下surface和texture的区别, Renderer, 以及SDL_Surface和SDL_Texture的区别<br><br /><br><br /></p><h3 id="Renderer"><a href="#Renderer" class="headerlink" title="Renderer"></a>Renderer</h3><p>渲染器为3D引擎的核心，它负责将3D物体投射到屏幕上。渲染还分为硬件渲染和软件渲染。下面是从网上摘录下来的对于硬件渲染器和软件渲染器的描述。<br>硬件渲染器：<br>硬件渲染器通常基于底层图形API(应用程序接口)构建，采用适合硬件架构的光栅化方法进行渲染。图形API负责与硬件的通信，常用的图形API包括DirectX和OpenGL。 OpenGL API通过OpenGL图形库来使用3D硬件，多数3D卡支持这种方法。而DirectX API使用微软的DirectX库——归并到 Windows操作系统中。在老的3D卡上面，OpenGL一般绘制速度较快一些，而在现代的3D卡上面，DirectX表现则更加出色。OpenGL版本只有一个，而DirectX版本有很多。DirectX通过提供更新版本的方式来扩展功能，而OpenGL通过一个通用的扩展（OpenGL Ext）来对功能进行扩展。</p><p>软件渲染器：<br>软件渲染器则纯粹利用CPU的能力进行计算，通常采用光线追踪的方法进行渲染。软件渲染器没有统一的应用程序标准，但是有很多通用的渲染算法，如光子映射，蒙特卡洛，辐射度等等。<br><br /><br><br /></p><h3 id="Surface-和-Texture"><a href="#Surface-和-Texture" class="headerlink" title="Surface 和 Texture"></a>Surface 和 Texture</h3><p>首先我们先从使用场景讲起，surface通常用于表示模型的基本形状，一般就是指模型的大小，位置，方向等信息。<br>Texture一般是用来提高模型逼真度的，模拟模型的细节纹理信息，如木纹，石纹和皮肤纹理。<br><br /><br><br /></p><h3 id="SDL-Surface-和-SDL-Texture"><a href="#SDL-Surface-和-SDL-Texture" class="headerlink" title="SDL_Surface 和 SDL_Texture"></a>SDL_Surface 和 SDL_Texture</h3><p>SDL_Surface是一个像素的集合，适用于软件渲染，其图像数据储存于常规的RAM中，由CPU参与计算。<br>SDL_Texture是像素数据，适用于硬件加速渲染，其数据存储于VRAM，由GPU加速运算。<br>正是由于GPU参与运算，使得硬件渲染的速度高于软件渲染。但软件渲染也不是一无是处，由于数据存储于RAM中，使得数据可以直接写入，整个过程都可以由程序员掌控，但对于GPU而言，许多访问存在限制，灵活性不足，这也使得其经常犯一些愚蠢的错误。</p><h3 id="SDL-Renderer"><a href="#SDL-Renderer" class="headerlink" title="SDL_Renderer"></a>SDL_Renderer</h3><a href="/2024/01/10/SDL/Dictionary/SDL_CreateRenderer/" title="SDL_CreateRenderer">SDL_CreateRenderer</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_CreateSoftwareRenderer/" title="SDL_CreateSoftwareRenderer">SDL_CreateSoftwareRenderer</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_CreateTexture/" title="SDL_CreateTexture">SDL_CreateTexture</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_CreateTextureFromSurface/" title="SDL_CreateTextureFromSurface">SDL_CreateTextureFromSurface</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_CreateWindowAndRenderer/" title="SDL_CreateWindowAndRenderer">SDL_CreateWindowAndRenderer</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_DestroyRenderer/" title="SDL_DestroyRenderer">SDL_DestroyRenderer</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_GetRenderDrawBlendMode/" title="SDL_GetRenderDrawBlendMode">SDL_GetRenderDrawBlendMode</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_GetRenderDrawColor/" title="SDL_GetRenderDrawColor">SDL_GetRenderDrawColor</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_GetRendererInfo/" title="SDL_GetRendererInfo">SDL_GetRendererInfo</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_GetRendererOutputSize/" title="SDL_GetRendererOutputSize">SDL_GetRendererOutputSize</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_GetRenderTarget/" title="SDL_GetRenderTarget">SDL_GetRenderTarget</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderClear/" title="SDL_RenderClear">SDL_RenderClear</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderCopy/" title="SDL_RenderCopy">SDL_RenderCopy</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderCopyEx/" title="SDL_RenderCopyEx">SDL_RenderCopyEx</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderCopyExF/" title="SDL_RenderCopyExF">SDL_RenderCopyExF</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderCopyF/" title="SDL_RenderCopyF">SDL_RenderCopyF</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderDrawLine/" title="SDL_RenderDrawLine">SDL_RenderDrawLine</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderDrawLineF/" title="SDL_RenderDrawLineF">SDL_RenderDrawLineF</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderDrawLines/" title="SDL_RenderDrawLines">SDL_RenderDrawLines</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderDrawLinesF/" title="SDL_RenderDrawLinesF">SDL_RenderDrawLinesF</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderDrawPoint/" title="SDL_RenderDrawPoint">SDL_RenderDrawPoint</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderDrawPointF/" title="SDL_RenderDrawPointF">SDL_RenderDrawPointF</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderDrawPoints/" title="SDL_RenderDrawPoints">SDL_RenderDrawPoints</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderDrawPointsF/" title="SDL_RenderDrawPointsF">SDL_RenderDrawPointsF</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderDrawRect/" title="SDL_RenderDrawRect">SDL_RenderDrawRect</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderDrawRectF/" title="SDL_RenderDrawRectF">SDL_RenderDrawRectF</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderDrawRects/" title="SDL_RenderDrawRects">SDL_RenderDrawRects</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderDrawRectsF/" title="SDL_RenderDrawRectsF">SDL_RenderDrawRectsF</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderFillRect/" title="SDL_RenderFillRect">SDL_RenderFillRect</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderFillRectF/" title="SDL_RenderFillRectF">SDL_RenderFillRectF</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderFillRects/" title="SDL_RenderFillRects">SDL_RenderFillRects</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderFillRectsF/" title="SDL_RenderFillRectsF">SDL_RenderFillRectsF</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderFlush/" title="SDL_RenderFlush">SDL_RenderFlush</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderGeometry/" title="SDL_RenderGeometry">SDL_RenderGeometry</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderGeometryRaw/" title="SDL_RenderGeometryRaw">SDL_RenderGeometryRaw</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderGetClipRect/" title="SDL_RenderGetClipRect">SDL_RenderGetClipRect</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderGetD3D11Device/" title="SDL_RenderGetD3D11Device">SDL_RenderGetD3D11Device</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderGetD3D12Device/" title="SDL_RenderGetD3D12Device">SDL_RenderGetD3D12Device</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderGetD3D9Device/" title="SDL_RenderGetD3D9Device">SDL_RenderGetD3D9Device</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderGetIntegerScale/" title="SDL_RenderGetIntegerScale">SDL_RenderGetIntegerScale</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderGetLogicalSize/" title="SDL_RenderGetLogicalSize">SDL_RenderGetLogicalSize</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderGetMetalCommandEncoder/" title="SDL_RenderGetMetalCommandEncoder">SDL_RenderGetMetalCommandEncoder</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderGetMetalLayer/" title="SDL_RenderGetMetalLayer">SDL_RenderGetMetalLayer</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderGetScale/" title="SDL_RenderGetScale">SDL_RenderGetScale</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderGetViewport/" title="SDL_RenderGetViewport">SDL_RenderGetViewport</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderGetWindow/" title="SDL_RenderGetWindow">SDL_RenderGetWindow</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderIsClipEnabled/" title="SDL_RenderIsClipEnabled">SDL_RenderIsClipEnabled</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderLogicalToWindow/" title="SDL_RenderLogicalToWindow">SDL_RenderLogicalToWindow</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderPresent/" title="SDL_RenderPresent">SDL_RenderPresent</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderReadPixels/" title="SDL_RenderReadPixels">SDL_RenderReadPixels</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderSetClipRect/" title="SDL_RenderSetClipRect">SDL_RenderSetClipRect</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderSetIntegerScale/" title="SDL_RenderSetIntegerScale">SDL_RenderSetIntegerScale</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderSetLogicalSize/" title="SDL_RenderSetLogicalSize">SDL_RenderSetLogicalSize</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderSetScale/" title="SDL_RenderSetScale">SDL_RenderSetScale</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderSetViewport/" title="SDL_RenderSetViewport">SDL_RenderSetViewport</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderSetVSync/" title="SDL_RenderSetVSync">SDL_RenderSetVSync</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderTargetSupported/" title="SDL_RenderTargetSupported">SDL_RenderTargetSupported</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderWindowToLogical/" title="SDL_RenderWindowToLogical">SDL_RenderWindowToLogical</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_SetRenderDrawBlendMode/" title="SDL_SetRenderDrawBlendMode">SDL_SetRenderDrawBlendMode</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_SetRenderDrawColor/" title="SDL_SetRenderDrawColor">SDL_SetRenderDrawColor</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_SetRenderTarget/" title="SDL_SetRenderTarget">SDL_SetRenderTarget</a><br /><br /><h3 id="SDL-Texture"><a href="#SDL-Texture" class="headerlink" title="SDL_Texture"></a>SDL_Texture</h3><a href="/2024/01/10/SDL/Dictionary/SDL_CreateTexture/" title="SDL_CreateTexture">SDL_CreateTexture</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_CreateTextureFromSurface/" title="SDL_CreateTextureFromSurface">SDL_CreateTextureFromSurface</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_DestroyTexture/" title="SDL_DestroyTexture">SDL_DestroyTexture</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_GetTextureAlphaMode/" title="SDL_GetTextureAlphaMod">SDL_GetTextureAlphaMode</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_GetTextureBlendMode/" title="SDL_GetTextureBlendMode">SDL_GetTextureBlendMode</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_GetTextureColorMod/" title="SDL_GetTextureColorMod">SDL_GetTextureColorMod</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_LockTexture/" title="SDL_LockTexture">SDL_LockTexture</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_QueryTexture/" title="SDL_QueryTexture">SDL_QueryTexture</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_RenderCopy/" title="SDL_RenderCopy">SDL_RenderCopy</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_SetTextureAlphaMod/" title="SDL_SetTextureAlphaMod">SDL_SetTextureAlphaMod</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_SetTextureBlendMode/" title="SDL_SetTextureBlendMode">SDL_SetTextureBlendMode</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_SetTextureColorMod/" title="SDL_SetTextureColorMod">SDL_SetTextureColorMod</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_UnlockTexture/" title="SDL_UnlockTexture">SDL_UnlockTexture</a><br /><a href="/2024/01/10/SDL/Dictionary/SDL_UpdateTexture/" title="SDL_UpdateTexture">SDL_UpdateTexture</a><br /><br /><p>讲完了一些前置知识，我们来进入今天的正题。按照惯例，我们还是采用代码分块分析的方式。</p><h3 id="示例代码分析"><a href="#示例代码分析" class="headerlink" title="示例代码分析"></a>示例代码分析</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//Using SDL, SDL_image, standard IO, and strings</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SDL.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SDL_image.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-comment">//Screen dimension constants</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> SCREEN_WIDTH = <span class="hljs-number">640</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> SCREEN_HEIGHT = <span class="hljs-number">480</span>;<br><br><span class="hljs-comment">//Starts up SDL and creates window</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Loads media</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadMedia</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Frees media and shuts down SDL</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p>这段代码和之前的区别就在于include &lt;SDL_image.h&gt;，原因就是我们在这边博文中将使用到的新渲染技术。<br><br /><br><br /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//Loads individual image as texture</span><br><span class="hljs-function">SDL_Texture* <span class="hljs-title">loadTexture</span><span class="hljs-params">( std::string path )</span></span>;<br><br><span class="hljs-comment">//The window we&#x27;ll be rendering to</span><br>SDL_Window* gWindow = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//The window renderer</span><br>SDL_Renderer* gRenderer = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Current displayed texture</span><br>SDL_Texture* gTexture = <span class="hljs-literal">NULL</span>;<br></code></pre></td></tr></table></figure><p>loadTexture是加载SDL_Texture的函数，其余的是SDL变量的声明。<br><br /><br><br /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Initialization flag</span><br><span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//Initialize SDL</span><br><span class="hljs-keyword">if</span>( <span class="hljs-built_in">SDL_Init</span>( SDL_INIT_VIDEO ) &lt; <span class="hljs-number">0</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;SDL could not initialize! SDL Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Set texture filtering to linear</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">SDL_SetHint</span>( SDL_HINT_RENDER_SCALE_QUALITY, <span class="hljs-string">&quot;1&quot;</span> ) )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Warning: Linear texture filtering not enabled!&quot;</span> );<br>&#125;<br><br><span class="hljs-comment">//Create window</span><br>gWindow = <span class="hljs-built_in">SDL_CreateWindow</span>( <span class="hljs-string">&quot;SDL Tutorial&quot;</span>, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN );<br><span class="hljs-keyword">if</span>( gWindow == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Window could not be created! SDL Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Create renderer for window</span><br>gRenderer = <span class="hljs-built_in">SDL_CreateRenderer</span>( gWindow, <span class="hljs-number">-1</span>, SDL_RENDERER_ACCELERATED );<br><span class="hljs-keyword">if</span>( gRenderer == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Renderer could not be created! SDL Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Initialize renderer color</span><br><span class="hljs-built_in">SDL_SetRenderDrawColor</span>( gRenderer, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span> );<br><br><span class="hljs-comment">//Initialize PNG loading</span><br><span class="hljs-type">int</span> imgFlags = IMG_INIT_PNG;<br><span class="hljs-keyword">if</span>( !( <span class="hljs-built_in">IMG_Init</span>( imgFlags ) &amp; imgFlags ) )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;SDL_image could not initialize! SDL_image Error: %s\n&quot;</span>, <span class="hljs-built_in">IMG_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> success;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在我们来分析init函数，首先通过SDL_init初始化视频子系统。然后这里通过<a href="/2024/01/14/SDL/Dictionary/SDL_SetHint/" title="SDL_SetHint">SDL_SetHint</a>函数来设置提示的值。其中将<a href="/2024/01/14/SDL/Dictionary/SDL_HINT_RENDER_SCALE_QUALITY/" title="SDL_HINT_RENDER_SCALE_QUALITY">SDL_HINT_RENDER_SCALE_QUALITY</a>函设置为1，表示将采用opengl和direct3d支持的线性滤波。下一步便是创建窗口，这一步和之前一样，这里不多赘述。在创建成功窗口之后便是创建窗口对应的渲染器，根据<a href="/2024/01/10/SDL/Dictionary/SDL_CreateRenderer/" title="SDL_CreateRenderer">SDL_CreateRenderer</a>的参数设置可知，这里初始化的渲染器对应的是硬件加速渲染器列表的第一种渲染器。再创建完渲染器便使用<a href="/2024/01/10/SDL/Dictionary/SDL_SetRenderDrawColor/" title="SDL_SetRenderDrawColor">SDL_SetRenderDrawColor</a>来设置渲染器所使用的颜色值。之后一部就是初始化图片，在之前我们新添了SDL_image mode， 我们这里就不采用bmp格式，而是采用png的格式。以上这些就是init函数完成的工作。<br><br /><br><br /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Texture* <span class="hljs-title">loadTexture</span><span class="hljs-params">( std::string path )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//The final texture</span><br>SDL_Texture* newTexture = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Load image at specified path</span><br>SDL_Surface* loadedSurface = <span class="hljs-built_in">IMG_Load</span>( path.<span class="hljs-built_in">c_str</span>() );<br><span class="hljs-keyword">if</span>( loadedSurface == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Unable to load image %s! SDL_image Error: %s\n&quot;</span>, path.<span class="hljs-built_in">c_str</span>(), <span class="hljs-built_in">IMG_GetError</span>() );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Create texture from surface pixels</span><br>        newTexture = <span class="hljs-built_in">SDL_CreateTextureFromSurface</span>( gRenderer, loadedSurface );<br><span class="hljs-keyword">if</span>( newTexture == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Unable to create texture from %s! SDL Error: %s\n&quot;</span>, path.<span class="hljs-built_in">c_str</span>(), <span class="hljs-built_in">SDL_GetError</span>() );<br>&#125;<br><br><span class="hljs-comment">//Get rid of old loaded surface</span><br><span class="hljs-built_in">SDL_FreeSurface</span>( loadedSurface );<br>&#125;<br><br><span class="hljs-keyword">return</span> newTexture;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来看的是<a href="/2024/01/15/SDL/Dictionary/IMG_Load/" title="IMG_Load">IMG_Load</a>函数，由于我们装的SDL_image支持的是读取不同图片文件到Surface,所以在调用IMG_Load将图片像素存入surface中之后还需要调用<a href="/2024/01/10/SDL/Dictionary/SDL_CreateTextureFromSurface/" title="SDL_CreateTextureFromSurface">SDL_CreateTextureFromSurface</a>在渲染器的帮助下转换成Texture数据格式。在完成这部后不要忘记清楚中间变量surface的内存。<br><br /><br><br /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadMedia</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Loading success flag</span><br><span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//Load PNG texture</span><br>gTexture = <span class="hljs-built_in">loadTexture</span>( <span class="hljs-string">&quot;texture.png&quot;</span> );<br><span class="hljs-keyword">if</span>( gTexture == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load texture image!\n&quot;</span> );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> success;<br>&#125;<br>Loadmedia的定义更多的是对之前loadTexture功能的封装。<br><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Free loaded image</span><br><span class="hljs-built_in">SDL_DestroyTexture</span>( gTexture );<br>gTexture = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Destroy window</span><br><span class="hljs-built_in">SDL_DestroyRenderer</span>( gRenderer );<br><span class="hljs-built_in">SDL_DestroyWindow</span>( gWindow );<br>gWindow = <span class="hljs-literal">NULL</span>;<br>gRenderer = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Quit SDL subsystems</span><br><span class="hljs-built_in">IMG_Quit</span>();<br><span class="hljs-built_in">SDL_Quit</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>除了Window需要释放之外，不要忘记释放渲染器和Texture的内存。<br><br /><br><br /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( <span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* args[] )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Start up SDL and create window</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">init</span>() )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to initialize!\n&quot;</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Load media</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">loadMedia</span>() )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load media!\n&quot;</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Main loop flag</span><br><span class="hljs-type">bool</span> quit = <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">//Event handler</span><br>SDL_Event e;<br><br><span class="hljs-comment">//While application is running</span><br><span class="hljs-keyword">while</span>( !quit )<br>&#123;<br><span class="hljs-comment">//Handle events on queue</span><br><span class="hljs-keyword">while</span>( <span class="hljs-built_in">SDL_PollEvent</span>( &amp;e ) != <span class="hljs-number">0</span> )<br>&#123;<br><span class="hljs-comment">//User requests quit</span><br><span class="hljs-keyword">if</span>( e.type == SDL_QUIT )<br>&#123;<br>quit = <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Clear screen</span><br><span class="hljs-built_in">SDL_RenderClear</span>( gRenderer );<br><br><span class="hljs-comment">//Render texture to screen</span><br><span class="hljs-built_in">SDL_RenderCopy</span>( gRenderer, gTexture, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span> );<br><br><span class="hljs-comment">//Update screen</span><br><span class="hljs-built_in">SDL_RenderPresent</span>( gRenderer );<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Free resources and close SDL</span><br><span class="hljs-built_in">close</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于主函数，首先是调用初始化函数，然后便是加载图片，之后进入事件轮询的loop，当收到SDL_QUIT的时候事件轮询结束。通过调用<a href="/2024/01/10/SDL/Dictionary/SDL_RenderClear/" title="SDL_RenderClear">SDL_RenderClear</a>来使用<a href="/2024/01/10/SDL/Dictionary/SDL_SetRenderDrawColor/" title="SDL_SetRenderDrawColor">SDL_SetRenderDrawColor</a>设定的背景色来清理屏幕。调用<a href="/2024/01/10/SDL/Dictionary/SDL_RenderCopy/" title="SDL_RenderCopy">SDL_RenderCopy</a>将当点使用的Texture结构复制到当前的渲染目标（gRenderer）之前已和屏幕相互关联。执行当前的渲染以更新屏幕。</p>]]></content>
    
    
    <categories>
      
      <category>Game Development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6.Setting up SDL Extension Libraries on CodeBlocks</title>
    <link href="/2024/01/15/SDL/6.Setting%20up%20SDL%20Extension%20Libraries%20on%20CodeBlocks/"/>
    <url>/2024/01/15/SDL/6.Setting%20up%20SDL%20Extension%20Libraries%20on%20CodeBlocks/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>参考博客：<a href="https://lazyfoo.net/tutorials/SDL/06_extension_libraries_and_loading_other_image_formats/index.php">Lazy Foo’ Productions</a><br>测试代码取自Lazy Foo’<br><br /></p><h2 id="Loading-other-image-formats"><a href="#Loading-other-image-formats" class="headerlink" title="Loading other image formats"></a>Loading other image formats</h2><p>除了 BMP 图像文件之外，SDL 扩展库还允许我加载其他图像格式，例如 PNG。 那么如何安装SDL扩展库，本教程将一步步教你。</p><h3 id="Setting-up-SDL-Extension-Libraries-on-CodeBlokcs"><a href="#Setting-up-SDL-Extension-Libraries-on-CodeBlokcs" class="headerlink" title="Setting up SDL Extension Libraries on CodeBlokcs"></a>Setting up SDL Extension Libraries on CodeBlokcs</h3><p><img src="/img/SDL/SDL_image.png"><br>SDL_image下载链接：<a href="https://github.com/libsdl-org/SDL_image/releases">click to jump</a><br>由于CB默认使用的是MinGW编译器，所以我们选用下载包中带mingw的压缩包。考虑到兼容性最佳的状态这里我们选择其中的i686-w64-mingw32，并将其重命名为mingw_dev_lib。<br><br /><br><img src="/img/SDL/CB_project_lists.png"><br><img src="/img/SDL/CB_project_property.png"><br>选择原来的SDL项目SDL2。进入project的porperties选项，选择其中的project’s build options<br><br /><br><img src="/img/SDL/CB_search_directories_complier.png"><br>在左侧菜单栏中选择SDL2，注意既不是Debug也不是Release，因为要同时更改两个的选项。选择菜单栏中的Search directories, 选择compiler在其中添加mingw_dev_lib文件的include中SDL2的文件路径。<br><br /><br><img src="/img/SDL/CB_linker_directory.png"><br>完成上述步骤后选择Search directories中的Linker将mingw_dev_lib中的lib路径地址添加进其中。<br><br /><br><img src="/img/SDL/CB_other_linker_SDL_image.png"><br>完成这部后再选择菜单栏中Linker setting，然后在Other linker options中添加-lmingw32 -lSDL2main -lSDL2 -lSDL2_image。<br><br /><br>最后从mingw_dev_lib文件夹的bin中找到SDL2_image.dll将其复制到项目的工作目录之中。<br><br /><br>完成上述步骤之后尝试运行测试代码，如果运行报错，请仔细检查上述步骤，确保操作无误。<br><br /><br><br /><br>完成上述步骤之后尝试运行测试代码，如果运行报错，请仔细检查上述步骤，确保操作无误。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*This source code copyrighted by Lazy Foo&#x27; Productions 2004-2024</span><br><span class="hljs-comment">and may not be redistributed without written permission.*/</span><br><br><span class="hljs-comment">//Using SDL, SDL_image, standard IO, and strings</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SDL.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SDL_image.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-comment">//Screen dimension constants</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> SCREEN_WIDTH = <span class="hljs-number">640</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> SCREEN_HEIGHT = <span class="hljs-number">480</span>;<br><br><span class="hljs-comment">//Starts up SDL and creates window</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Loads media</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadMedia</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Frees media and shuts down SDL</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Loads individual image</span><br><span class="hljs-function">SDL_Surface* <span class="hljs-title">loadSurface</span><span class="hljs-params">( std::string path )</span></span>;<br><br><span class="hljs-comment">//The window we&#x27;ll be rendering to</span><br>SDL_Window* gWindow = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//The surface contained by the window</span><br>SDL_Surface* gScreenSurface = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Current displayed PNG image</span><br>SDL_Surface* gPNGSurface = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Initialization flag</span><br><span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//Initialize SDL</span><br><span class="hljs-keyword">if</span>( <span class="hljs-built_in">SDL_Init</span>( SDL_INIT_VIDEO ) &lt; <span class="hljs-number">0</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;SDL could not initialize! SDL Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Create window</span><br>gWindow = <span class="hljs-built_in">SDL_CreateWindow</span>( <span class="hljs-string">&quot;SDL Tutorial&quot;</span>, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN );<br><span class="hljs-keyword">if</span>( gWindow == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Window could not be created! SDL Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Initialize PNG loading</span><br><span class="hljs-type">int</span> imgFlags = IMG_INIT_PNG;<br><span class="hljs-keyword">if</span>( !( <span class="hljs-built_in">IMG_Init</span>( imgFlags ) &amp; imgFlags ) )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;SDL_image could not initialize! SDL_image Error: %s\n&quot;</span>, <span class="hljs-built_in">IMG_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Get window surface</span><br>gScreenSurface = <span class="hljs-built_in">SDL_GetWindowSurface</span>( gWindow );<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> success;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadMedia</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Loading success flag</span><br><span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//Load PNG surface</span><br>gPNGSurface = <span class="hljs-built_in">loadSurface</span>( <span class="hljs-string">&quot;loaded.png&quot;</span> );<br><span class="hljs-keyword">if</span>( gPNGSurface == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load PNG image!\n&quot;</span> );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> success;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Free loaded image</span><br><span class="hljs-built_in">SDL_FreeSurface</span>( gPNGSurface );<br>gPNGSurface = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Destroy window</span><br><span class="hljs-built_in">SDL_DestroyWindow</span>( gWindow );<br>gWindow = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Quit SDL subsystems</span><br><span class="hljs-built_in">IMG_Quit</span>();<br><span class="hljs-built_in">SDL_Quit</span>();<br>&#125;<br><br><span class="hljs-function">SDL_Surface* <span class="hljs-title">loadSurface</span><span class="hljs-params">( std::string path )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//The final optimized image</span><br>SDL_Surface* optimizedSurface = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Load image at specified path</span><br>SDL_Surface* loadedSurface = <span class="hljs-built_in">IMG_Load</span>( path.<span class="hljs-built_in">c_str</span>() );<br><span class="hljs-keyword">if</span>( loadedSurface == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Unable to load image %s! SDL_image Error: %s\n&quot;</span>, path.<span class="hljs-built_in">c_str</span>(), <span class="hljs-built_in">IMG_GetError</span>() );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Convert surface to screen format</span><br>optimizedSurface = <span class="hljs-built_in">SDL_ConvertSurface</span>( loadedSurface, gScreenSurface-&gt;format, <span class="hljs-number">0</span> );<br><span class="hljs-keyword">if</span>( optimizedSurface == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Unable to optimize image %s! SDL Error: %s\n&quot;</span>, path.<span class="hljs-built_in">c_str</span>(), <span class="hljs-built_in">SDL_GetError</span>() );<br>&#125;<br><br><span class="hljs-comment">//Get rid of old loaded surface</span><br><span class="hljs-built_in">SDL_FreeSurface</span>( loadedSurface );<br>&#125;<br><br><span class="hljs-keyword">return</span> optimizedSurface;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( <span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* args[] )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Start up SDL and create window</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">init</span>() )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to initialize!\n&quot;</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Load media</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">loadMedia</span>() )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load media!\n&quot;</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Main loop flag</span><br><span class="hljs-type">bool</span> quit = <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">//Event handler</span><br>SDL_Event e;<br><br><span class="hljs-comment">//While application is running</span><br><span class="hljs-keyword">while</span>( !quit )<br>&#123;<br><span class="hljs-comment">//Handle events on queue</span><br><span class="hljs-keyword">while</span>( <span class="hljs-built_in">SDL_PollEvent</span>( &amp;e ) != <span class="hljs-number">0</span> )<br>&#123;<br><span class="hljs-comment">//User requests quit</span><br><span class="hljs-keyword">if</span>( e.type == SDL_QUIT )<br>&#123;<br>quit = <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Apply the PNG image</span><br><span class="hljs-built_in">SDL_BlitSurface</span>( gPNGSurface, <span class="hljs-literal">NULL</span>, gScreenSurface, <span class="hljs-literal">NULL</span> );<br><br><span class="hljs-comment">//Update the surface</span><br><span class="hljs-built_in">SDL_UpdateWindowSurface</span>( gWindow );<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Free resources and close SDL</span><br><span class="hljs-built_in">close</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Game Development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MonotonicStack</title>
    <link href="/2024/01/12/Algorithms/MonotonicStack/"/>
    <url>/2024/01/12/Algorithms/MonotonicStack/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>关于单调栈的定义可以参考力扣官方资料<a href="https://algo.itcharge.cn/03.Stack/02.Monotone-Stack/01.Monotone-Stack/">click to jump</a></p><h1 id="简单"><a href="#简单" class="headerlink" title="简单"></a>简单</h1><h2 id="1-下一个更大元素I"><a href="#1-下一个更大元素I" class="headerlink" title="1. 下一个更大元素I"></a>1. 下一个更大元素I</h2><p>nums1 中数字 x 的 下一个更大元素 是指 x 在 nums2 中对应位置 右侧 的 第一个 比 x 大的元素。</p><p>给你两个 没有重复元素 的数组 nums1 和 nums2 ，下标从 0 开始计数，其中nums1 是 nums2 的子集。</p><p>对于每个 0 &lt;&#x3D; i &lt; nums1.length ，找出满足 nums1[i] &#x3D;&#x3D; nums2[j] 的下标 j ，并且在 nums2 确定 nums2[j] 的 下一个更大元素 。如果不存在下一个更大元素，那么本次查询的答案是 -1 。</p><p>返回一个长度为 nums1.length 的数组 ans 作为答案，满足 ans[i] 是如上所述的 下一个更大元素 。<br><img src="/img/Leetcode/%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0I.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">nextGreaterElement</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n2 = nums2.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> n1 = nums1.<span class="hljs-built_in">size</span>();<br>        vector&lt;<span class="hljs-type">int</span>&gt; result;<br>        unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; num2_map;<br>        stack&lt;<span class="hljs-type">int</span>&gt; st;<br><br>        st.<span class="hljs-built_in">push</span>(nums2[n2<span class="hljs-number">-1</span>]);<br>        num2_map[nums2[n2<span class="hljs-number">-1</span>]] = <span class="hljs-number">-1</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n2<span class="hljs-number">-2</span>; i&gt;=<span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>() &amp;&amp; nums2[i]&gt;st.<span class="hljs-built_in">top</span>())&#123;<br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">empty</span>())&#123;num2_map[nums2[i]]=<span class="hljs-number">-1</span>;&#125;<br>            <span class="hljs-keyword">else</span>&#123;num2_map[nums2[i]]=st.<span class="hljs-built_in">top</span>();&#125;<br>            st.<span class="hljs-built_in">push</span>(nums2[i]);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> num:nums1)&#123;<br>            result.<span class="hljs-built_in">push_back</span>(num2_map[num]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="中等"><a href="#中等" class="headerlink" title="中等"></a>中等</h1><h1 id="1-每日温度"><a href="#1-每日温度" class="headerlink" title="1. 每日温度"></a>1. 每日温度</h1><p>给定一个整数数组 temperatures ，表示每天的温度，返回一个数组 answer ，其中 answer[i] 是指对于第 i 天，下一个更高温度出现在几天后。如果气温在这之后都不会升高，请在该位置用 0 来代替。<br><img src="/img/Leetcode/%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dailyTemperatures</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; temperatures)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = temperatures.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">result</span><span class="hljs-params">(n)</span></span>;<br>        stack&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt; st;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>() &amp;&amp; temperatures[i]&gt;=st.<span class="hljs-built_in">top</span>().second)&#123;<br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">empty</span>())&#123;result[i] = <span class="hljs-number">0</span>;&#125;<br>            <span class="hljs-keyword">else</span>&#123;result[i] = st.<span class="hljs-built_in">top</span>().first-i;&#125;<br>            st.<span class="hljs-built_in">push</span>(&#123;i,temperatures[i]&#125;);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="2-去除重复字母"><a href="#2-去除重复字母" class="headerlink" title="2. 去除重复字母"></a>2. 去除重复字母</h1><p>给你一个字符串 s ，请你去除字符串中重复的字母，使得每个字母只出现一次。需保证 返回结果的字典序最小（要求不能打乱其他字符的相对位置）。<br><img src="/img/Leetcode/%E5%8E%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E5%AD%97%E6%AF%8D.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">removeDuplicateLetters</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">alpha_list</span><span class="hljs-params">(<span class="hljs-number">26</span>,<span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">left_list</span><span class="hljs-params">(<span class="hljs-number">26</span>,<span class="hljs-number">0</span>)</span></span>;<br>        stack&lt;<span class="hljs-type">char</span>&gt; result;<br>        string res = <span class="hljs-string">&quot;&quot;</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;s.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            alpha_list[s[i]-<span class="hljs-string">&#x27;a&#x27;</span>]++;<br>        &#125;<br>        result.<span class="hljs-built_in">push</span>(s[<span class="hljs-number">0</span>]);<br>        alpha_list[s[<span class="hljs-number">0</span>]-<span class="hljs-string">&#x27;a&#x27;</span>]--;<br>        left_list[s[<span class="hljs-number">0</span>]-<span class="hljs-string">&#x27;a&#x27;</span>]++;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; <span class="hljs-built_in">i</span>&lt;s.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-type">int</span> s_num = s[i]-<span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span>(!result.<span class="hljs-built_in">empty</span>() &amp;&amp;(left_list[s_num]))&#123;<br>                alpha_list[s_num]--;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">while</span>(!result.<span class="hljs-built_in">empty</span>() &amp;&amp; (result.<span class="hljs-built_in">top</span>() - <span class="hljs-string">&#x27;a&#x27;</span>)&gt;(s_num) &amp;&amp; alpha_list[result.<span class="hljs-built_in">top</span>()-<span class="hljs-string">&#x27;a&#x27;</span>] &gt; <span class="hljs-number">0</span>)&#123;<br>                left_list[result.<span class="hljs-built_in">top</span>()-<span class="hljs-string">&#x27;a&#x27;</span>]--;<br>                result.<span class="hljs-built_in">pop</span>();   <br>            &#125;   <br>            <span class="hljs-keyword">if</span>(left_list[s_num])&#123;<span class="hljs-keyword">continue</span>;&#125;<br>            alpha_list[s_num]--;<br>            result.<span class="hljs-built_in">push</span>(s[i]);<br>            left_list[s_num]++;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(!result.<span class="hljs-built_in">empty</span>())&#123;<br>            res += result.<span class="hljs-built_in">top</span>();<br>            result.<span class="hljs-built_in">pop</span>();<br>        &#125;<br><br>        <span class="hljs-built_in">reverse</span>(res.<span class="hljs-built_in">begin</span>(), res.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">return</span> res;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="3-移掉K位数字"><a href="#3-移掉K位数字" class="headerlink" title="3. 移掉K位数字"></a>3. 移掉K位数字</h1><p>给你一个以字符串表示的非负整数 num 和一个整数 k ，移除这个数中的 k 位数字，使得剩下的数字最小。请你以字符串形式返回这个最小的数字。<br><img src="/img/Leetcode/%E7%A7%BB%E6%8E%89K%E4%BD%8D%E6%95%B0%E5%AD%97.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">removeKdigits</span><span class="hljs-params">(string num, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = num.<span class="hljs-built_in">size</span>();<br>        string result = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-type">int</span> index = <span class="hljs-number">1</span>;<br>        stack&lt;<span class="hljs-type">char</span>&gt; st;<br>        <span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;<br><br>        st.<span class="hljs-built_in">push</span>(num[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">while</span>(<span class="hljs-built_in">index</span>&lt;n &amp;&amp; k)&#123;<br>            <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>() &amp;&amp; (st.<span class="hljs-built_in">top</span>()-<span class="hljs-string">&#x27;a&#x27;</span>) &gt; (num[index]-<span class="hljs-string">&#x27;a&#x27;</span>) &amp;&amp; k)&#123;<br>                st.<span class="hljs-built_in">pop</span>();<br>                k--;<br>            &#125;<br>            st.<span class="hljs-built_in">push</span>(num[index++]);<br>        &#125;<br>        <span class="hljs-keyword">while</span>(k--)&#123;<br>            st.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>())&#123;<br>            result += st.<span class="hljs-built_in">top</span>();<br>            st.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        <span class="hljs-built_in">reverse</span>(result.<span class="hljs-built_in">begin</span>(),result.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">while</span>(result[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;0&#x27;</span>)&#123;<br>            result.<span class="hljs-built_in">erase</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(result.<span class="hljs-built_in">size</span>())&#123;flag = <span class="hljs-literal">true</span>;&#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = index; i&lt;n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(num[i] != <span class="hljs-string">&#x27;0&#x27;</span> || flag)&#123;<br>                flag = <span class="hljs-literal">true</span>;<br>                result += num[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result = result==<span class="hljs-string">&quot;&quot;</span>?<span class="hljs-string">&quot;0&quot;</span>:result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="4-子数组的最小值之和"><a href="#4-子数组的最小值之和" class="headerlink" title="4. 子数组的最小值之和"></a>4. 子数组的最小值之和</h1><p>给定一个整数数组 arr，找到 min(b) 的总和，其中 b 的范围为 arr 的每个（连续）子数组。</p><p>由于答案可能很大，因此 返回答案模 10^9 + 7 。<br><img src="/img/Leetcode/%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC%E4%B9%8B%E5%92%8C.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">7</span>+<span class="hljs-number">1e9</span>;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sumSubarrayMins</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = arr.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">left</span><span class="hljs-params">(n,<span class="hljs-number">-1</span>)</span></span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">right</span><span class="hljs-params">(n,n)</span></span>;<br>        stack&lt;<span class="hljs-type">int</span>&gt; st;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>() &amp;&amp; (arr[st.<span class="hljs-built_in">top</span>()] &gt;= arr[i]))&#123;st.<span class="hljs-built_in">pop</span>();&#125;<br>            <span class="hljs-keyword">if</span>(!st.<span class="hljs-built_in">empty</span>())&#123;left[i] = st.<span class="hljs-built_in">top</span>();&#125;<br>            st.<span class="hljs-built_in">push</span>(i);<br>        &#125;<br>        <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>())&#123;st.<span class="hljs-built_in">pop</span>();&#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>() &amp;&amp; (arr[st.<span class="hljs-built_in">top</span>()] &gt; arr[i]))&#123;st.<span class="hljs-built_in">pop</span>();&#125;<br>            <span class="hljs-keyword">if</span>(!st.<span class="hljs-built_in">empty</span>())&#123;right[i] = st.<span class="hljs-built_in">top</span>();&#125;<br>            st.<span class="hljs-built_in">push</span>(i);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            res += (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)arr[i]*(i-left[i])*(right[i]-i);<br>        &#125;<br>        result = res%MOD;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="5-下一个更大元素II"><a href="#5-下一个更大元素II" class="headerlink" title="5. 下一个更大元素II"></a>5. 下一个更大元素II</h1><p>给定一个循环数组 nums （ nums[nums.length - 1] 的下一个元素是 nums[0] ），返回 nums 中每个元素的 下一个更大元素 。</p><p>数字 x 的 下一个更大的元素 是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出 -1 。<br><img src="/img/Leetcode/%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0II.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">nextGreaterElements</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">result</span><span class="hljs-params">(n,<span class="hljs-number">-1</span>)</span></span>;<br>        stack&lt;<span class="hljs-type">int</span>&gt; st;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i--)&#123;st.<span class="hljs-built_in">push</span>(nums[i]);&#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>() &amp;&amp; st.<span class="hljs-built_in">top</span>()&lt;=nums[i])&#123;st.<span class="hljs-built_in">pop</span>();&#125;<br>            <span class="hljs-keyword">if</span>(!st.<span class="hljs-built_in">empty</span>())&#123;result[i]=st.<span class="hljs-built_in">top</span>();&#125;<br>            st.<span class="hljs-built_in">push</span>(nums[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="6-验证二叉搜索树的后序遍历序列"><a href="#6-验证二叉搜索树的后序遍历序列" class="headerlink" title="6. 验证二叉搜索树的后序遍历序列"></a>6. 验证二叉搜索树的后序遍历序列</h1><p>请实现一个函数来判断整数数组 postorder 是否为二叉搜索树的后序遍历结果。<br><img src="/img/Leetcode/%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">verifyTreeOrder</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; postorder)</span> </span>&#123;<br>        <span class="hljs-type">int</span> root = INT_MAX;<br>        stack&lt;<span class="hljs-type">int</span>&gt; st;<br>        <span class="hljs-type">int</span> n=postorder.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> num;<br><br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i--)&#123;<br>            num = postorder[i];<br>            <span class="hljs-keyword">if</span>(root &lt;= num)&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<br>            <span class="hljs-keyword">if</span>(!st.<span class="hljs-built_in">empty</span>() &amp;&amp; num == st.<span class="hljs-built_in">top</span>())&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<br>            <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">empty</span>() || num &gt; st.<span class="hljs-built_in">top</span>())&#123;st.<span class="hljs-built_in">push</span>(num);&#125;<br>            <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>() &amp;&amp; num&lt;st.<span class="hljs-built_in">top</span>())&#123;<br>                root  = st.<span class="hljs-built_in">top</span>();    <br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="7-最短无序连续子数组"><a href="#7-最短无序连续子数组" class="headerlink" title="7. 最短无序连续子数组"></a>7. 最短无序连续子数组</h1><p>给你一个整数数组 nums ，你需要找出一个 连续子数组 ，如果对这个子数组进行升序排序，那么整个数组都会变为升序排序。</p><p>请你找出符合题意的 最短 子数组，并输出它的长度。<br><img src="/img/Leetcode/%E6%9C%80%E7%9F%AD%E6%97%A0%E5%BA%8F%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findUnsortedSubarray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        stack&lt;<span class="hljs-type">int</span>&gt; stl;<br>        stack&lt;<span class="hljs-type">int</span>&gt; str;<br>        <span class="hljs-type">int</span> l = n;<br>        <span class="hljs-type">int</span> r = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>, j=n<span class="hljs-number">-1</span>; i&lt;n, j&gt;=<span class="hljs-number">0</span>; i++, j--)&#123;<br>            <span class="hljs-keyword">while</span>(!stl.<span class="hljs-built_in">empty</span>() &amp;&amp; nums[i]&lt;nums[stl.<span class="hljs-built_in">top</span>()])&#123;<br>                l = <span class="hljs-built_in">min</span>(l, stl.<span class="hljs-built_in">top</span>());<br>                stl.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            stl.<span class="hljs-built_in">push</span>(i);<br>            <br>            <span class="hljs-keyword">while</span>(!str.<span class="hljs-built_in">empty</span>() &amp;&amp; nums[j]&gt;nums[str.<span class="hljs-built_in">top</span>()])&#123;<br>                r = <span class="hljs-built_in">max</span>(r, str.<span class="hljs-built_in">top</span>());<br>                str.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            str.<span class="hljs-built_in">push</span>(j);<br>            <br>        &#125;<br><br>        <span class="hljs-keyword">return</span> r-l+<span class="hljs-number">1</span>&gt;<span class="hljs-number">0</span>?r-l+<span class="hljs-number">1</span>:<span class="hljs-number">0</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="8-最大二叉树"><a href="#8-最大二叉树" class="headerlink" title="8. 最大二叉树"></a>8. 最大二叉树</h1><p>给定一个不重复的整数数组 nums 。 最大二叉树 可以用下面的算法从 nums 递归地构建:</p><p>1.创建一个根节点，其值为 nums 中的最大值。<br>2.递归地在最大值 左边 的 子数组前缀上 构建左子树。<br>3.递归地在最大值 右边 的 子数组后缀上 构建右子树。<br>返回 nums 构建的 最大二叉树 。<br><img src="/img/Leetcode/%E6%9C%80%E5%A4%A7%E4%BA%8C%E5%8F%89%E6%A0%91.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">constructMaximumBinaryTree</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        stack&lt;TreeNode*&gt; st;<br>        TreeNode* result;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> num:nums)&#123;<br>            TreeNode* node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(num);<br><br>            <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>() &amp;&amp; num&gt;(st.<span class="hljs-built_in">top</span>()-&gt;val))&#123;<br>                node-&gt;left = st.<span class="hljs-built_in">top</span>();<br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(!st.<span class="hljs-built_in">empty</span>())&#123;st.<span class="hljs-built_in">top</span>()-&gt;right = node;&#125;<br><br>            st.<span class="hljs-built_in">push</span>(node);<br>        &#125;<br>        <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>())&#123;<br>            result = st.<span class="hljs-built_in">top</span>();<br>            st.<span class="hljs-built_in">pop</span>(); <br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="9-每日温度"><a href="#9-每日温度" class="headerlink" title="9. 每日温度"></a>9. 每日温度</h1><p>请根据每日 气温 列表 temperatures ，重新生成一个列表，要求其对应位置的输出为：要想观测到更高的气温，至少需要等待的天数。如果气温在这之后都不会升高，请在该位置用 0 来代替。<br><img src="/img/Leetcode/%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dailyTemperatures</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; temperatures)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = temperatures.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">result</span><span class="hljs-params">(n)</span></span>; <br>        stack&lt;<span class="hljs-type">int</span>&gt; st;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>() &amp;&amp; temperatures[st.<span class="hljs-built_in">top</span>()]&lt;= temperatures[i])&#123;<br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">empty</span>())&#123;result[i] = <span class="hljs-number">0</span>;&#125;<br>            <span class="hljs-keyword">else</span>&#123;result[i] = st.<span class="hljs-built_in">top</span>()-i;&#125;<br>            st.<span class="hljs-built_in">push</span>(i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="10-股票价格跨度"><a href="#10-股票价格跨度" class="headerlink" title="10. 股票价格跨度"></a>10. 股票价格跨度</h1><p>设计一个算法收集某些股票的每日报价，并返回该股票当日价格的 跨度 。</p><p>当日股票价格的 跨度 被定义为股票价格小于或等于今天价格的最大连续日数（从今天开始往回数，包括今天）。</p><ul><li>例如，如果未来 7 天股票的价格是 [100,80,60,70,60,75,85]，那么股票跨度将是 [1,1,1,2,1,4,6] 。</li></ul><p>实现 StockSpanner 类：</p><ul><li>StockSpanner() 初始化类对象。</li><li>int next(int price) 给出今天的股价 price ，返回该股票当日价格的 跨度 。<br><img src="/img/Leetcode/%E8%82%A1%E7%A5%A8%E4%BB%B7%E6%A0%BC%E8%B7%A8%E5%BA%A6.png"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StockSpanner</span> &#123;<br>    stack&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt; st;<br>    <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">StockSpanner</span>() &#123;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">next</span><span class="hljs-params">(<span class="hljs-type">int</span> price)</span> </span>&#123;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        <br>        index++;<br>        <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>() &amp;&amp; price&gt;=st.<span class="hljs-built_in">top</span>().second)&#123;<br>            st.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">empty</span>())&#123;result = index;&#125;<br>        <span class="hljs-keyword">else</span>&#123;result = index - st.<span class="hljs-built_in">top</span>().first;&#125;<br>        st.<span class="hljs-built_in">push</span>(&#123;index,price&#125;);<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your StockSpanner object will be instantiated and called as such:</span><br><span class="hljs-comment"> * StockSpanner* obj = new StockSpanner();</span><br><span class="hljs-comment"> * int param_1 = obj-&gt;next(price);</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="11-部分排序"><a href="#11-部分排序" class="headerlink" title="11. 部分排序"></a>11. 部分排序</h1><p>给定一个整数数组，编写一个函数，找出索引m和n，只要将索引区间[m,n]的元素排好序，整个数组就是有序的。注意：n-m尽量最小，也就是说，找出符合条件的最短序列。函数返回值为[m,n]，若不存在这样的m和n（例如整个数组是有序的），请返回[-1,-1]。<br><img src="/img/Leetcode/%E9%83%A8%E5%88%86%E6%8E%92%E5%BA%8F.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">subSort</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; array)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = array.<span class="hljs-built_in">size</span>();<br>        vector&lt;<span class="hljs-type">int</span>&gt; result = &#123;n,<span class="hljs-number">-1</span>&#125;;<br>        vector&lt;<span class="hljs-type">int</span>&gt; res = &#123;<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>&#125;;<br>        stack&lt;<span class="hljs-type">int</span>&gt; l;<br>        stack&lt;<span class="hljs-type">int</span>&gt; r;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>, j=n<span class="hljs-number">-1</span>; i&lt;n, j&gt;=<span class="hljs-number">0</span>; i++,j--)&#123;<br>            <span class="hljs-type">int</span> res0 = n;<br>            <span class="hljs-type">int</span> res1 = <span class="hljs-number">-1</span>;<br>            <span class="hljs-type">int</span> tmp;<br>            <span class="hljs-keyword">while</span>(!l.<span class="hljs-built_in">empty</span>() &amp;&amp; array[l.<span class="hljs-built_in">top</span>()]&gt;array[i])&#123;<br>                res0 = l.<span class="hljs-built_in">top</span>();<br>                l.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            result[<span class="hljs-number">0</span>] = <span class="hljs-built_in">min</span>(result[<span class="hljs-number">0</span>], res0);<br>            <span class="hljs-keyword">while</span>(!r.<span class="hljs-built_in">empty</span>() &amp;&amp; array[r.<span class="hljs-built_in">top</span>()]&lt;array[j])&#123;<br>                res1 = r.<span class="hljs-built_in">top</span>();<br>                r.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            result[<span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(result[<span class="hljs-number">1</span>],res1);<br>            l.<span class="hljs-built_in">push</span>(i);<br>            r.<span class="hljs-built_in">push</span>(j);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result[<span class="hljs-number">0</span>]&lt;result[<span class="hljs-number">1</span>] ? result:res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="12-验证二叉搜索树的前序遍历序列"><a href="#12-验证二叉搜索树的前序遍历序列" class="headerlink" title="12. 验证二叉搜索树的前序遍历序列"></a>12. 验证二叉搜索树的前序遍历序列</h1><p>给定一个 无重复元素 的整数数组 preorder ， 如果它是以二叉搜索树的先序遍历排列 ，返回 true 。<br><img src="/img/Leetcode/%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">verifyPreorder</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; preorder)</span> </span>&#123;<br>        <span class="hljs-type">int</span> root = <span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> n = preorder.<span class="hljs-built_in">size</span>();<br>        stack&lt;<span class="hljs-type">int</span>&gt; st;<br><br>        st.<span class="hljs-built_in">push</span>(<span class="hljs-number">-1</span>);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(root&gt;preorder[i])&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<br>            <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>() &amp;&amp; preorder[i]&gt;st.<span class="hljs-built_in">top</span>())&#123;<br>                root = st.<span class="hljs-built_in">top</span>();<br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;  <br>            st.<span class="hljs-built_in">push</span>(preorder[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="13-最大宽度坡"><a href="#13-最大宽度坡" class="headerlink" title="13. 最大宽度坡"></a>13. 最大宽度坡</h1><p>给定一个整数数组 A，坡是元组 (i, j)，其中  i &lt; j 且 A[i] &lt;&#x3D; A[j]。这样的坡的宽度为 j - i。</p><p>找出 A 中的坡的最大宽度，如果不存在，返回 0 。<br><img src="/img/Leetcode/%E6%9C%80%E5%A4%A7%E5%AE%BD%E5%BA%A6%E5%9D%A1.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxWidthRamp</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        stack&lt;<span class="hljs-type">int</span>&gt; st;<br>        <span class="hljs-type">int</span> start = nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br><br>        st.<span class="hljs-built_in">push</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[i]&lt;start)&#123;<br>                start = nums[i];<br>                st.<span class="hljs-built_in">push</span>(i);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>() &amp;&amp; nums[st.<span class="hljs-built_in">top</span>()]&lt;=nums[i])&#123;<br>                result = <span class="hljs-built_in">max</span>(result, i-st.<span class="hljs-built_in">top</span>());<br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//注意：使用动态规划会超时</span><br></code></pre></td></tr></table></figure><h1 id="14-132模式"><a href="#14-132模式" class="headerlink" title="14. 132模式"></a>14. 132模式</h1><p>给你一个整数数组 nums ，数组中共有 n 个整数。132 模式的子序列 由三个整数 nums[i]、nums[j] 和 nums[k] 组成，并同时满足：i &lt; j &lt; k 和 nums[i] &lt; nums[k] &lt; nums[j] 。</p><p>如果 nums 中存在 132 模式的子序列 ，返回 true ；否则，返回 false 。<br><img src="/img/Leetcode/132%E6%A8%A1%E5%BC%8F.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">find132pattern</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> k = INT_MIN;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        stack&lt;<span class="hljs-type">int</span>&gt; st;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-keyword">if</span>(nums[i] &lt;k )&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<br>            <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>() &amp;&amp; st.<span class="hljs-built_in">top</span>()&lt;nums[i])&#123;<br>                k = <span class="hljs-built_in">max</span>(k,st.<span class="hljs-built_in">top</span>());<br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            st.<span class="hljs-built_in">push</span>(nums[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="15-链表中的下一个更大节点"><a href="#15-链表中的下一个更大节点" class="headerlink" title="15. 链表中的下一个更大节点"></a>15. 链表中的下一个更大节点</h1><p>给定一个长度为 n 的链表 head</p><p>对于列表中的每个节点，查找下一个 更大节点 的值。也就是说，对于每个节点，找到它旁边的第一个节点的值，这个节点的值 严格大于 它的值。</p><p>返回一个整数数组 answer ，其中 answer[i] 是第 i 个节点( 从1开始 )的下一个更大的节点的值。如果第 i 个节点没有下一个更大的节点，设置 answer[i] &#x3D; 0 。<br><img src="/img/Leetcode/%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E8%8A%82%E7%82%B9.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">nextLargerNodes</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br><br>        <span class="hljs-type">int</span> res[<span class="hljs-number">10001</span>] = &#123;<span class="hljs-number">-1</span>&#125;;<br>        vector&lt;<span class="hljs-type">int</span>&gt; result;<br>        ListNode* next = head-&gt;next;<br>        stack&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt; st;<br>        <span class="hljs-type">int</span> index = <span class="hljs-number">1</span>;<br><br>        st.<span class="hljs-built_in">push</span>(&#123;<span class="hljs-number">0</span>,head-&gt;val&#125;);<br><br>        <span class="hljs-keyword">while</span>(next != <span class="hljs-literal">nullptr</span>)&#123;<br>            <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>() &amp;&amp; st.<span class="hljs-built_in">top</span>().second&lt;next-&gt;val)&#123;<br>                res[st.<span class="hljs-built_in">top</span>().first] = next-&gt;val;<br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            st.<span class="hljs-built_in">push</span>(&#123;index,next-&gt;val&#125;);<br>            index++;<br>            next = next-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;index; i++)&#123;<br>            <span class="hljs-type">int</span> tmp = res[i]&lt;<span class="hljs-number">0</span>?<span class="hljs-number">0</span>:res[i];<br>            result.<span class="hljs-built_in">push_back</span>(tmp);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="16-游戏中弱角色的数量"><a href="#16-游戏中弱角色的数量" class="headerlink" title="16. 游戏中弱角色的数量"></a>16. 游戏中弱角色的数量</h1><p>你正在参加一个多角色游戏，每个角色都有两个主要属性：攻击 和 防御 。给你一个二维整数数组 properties ，其中 properties[i] &#x3D; [attacki, defensei] 表示游戏中第 i 个角色的属性。</p><p>如果存在一个其他角色的攻击和防御等级 都严格高于 该角色的攻击和防御等级，则认为该角色为 弱角色 。更正式地，如果认为角色 i 弱于 存在的另一个角色 j ，那么 attackj &gt; attacki 且 defensej &gt; defensei 。</p><p>返回 弱角色 的数量。<br><img src="/img/Leetcode/%E6%B8%B8%E6%88%8F%E4%B8%AD%E5%BC%B1%E8%A7%92%E8%89%B2%E7%9A%84%E6%95%B0%E9%87%8F.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">numberOfWeakCharacters</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; properties)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = properties.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> max_d = <span class="hljs-number">0</span>;<br><br>        function&lt;<span class="hljs-type">bool</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp;, vector&lt;<span class="hljs-type">int</span>&gt;&amp;)&gt; comp = [&amp;](vector&lt;<span class="hljs-type">int</span>&gt;&amp; a, vector&lt;<span class="hljs-type">int</span>&gt;&amp; b)&#123;<br>            <span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>]&gt;b[<span class="hljs-number">0</span>])&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<br>            <span class="hljs-keyword">if</span>(a[<span class="hljs-number">0</span>] == b[<span class="hljs-number">0</span>] &amp;&amp; a[<span class="hljs-number">1</span>]&lt;b[<span class="hljs-number">1</span>])&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;;<br><br>        <span class="hljs-built_in">sort</span>(properties.<span class="hljs-built_in">begin</span>(), properties.<span class="hljs-built_in">end</span>(), comp);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> num:properties)&#123;<br>            <span class="hljs-keyword">if</span>(num[<span class="hljs-number">1</span>] &lt; max_d)&#123;result++;&#125;<br>            <span class="hljs-keyword">else</span>&#123;max_d= num[<span class="hljs-number">1</span>];&#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="17-使数组按非递减顺序排列"><a href="#17-使数组按非递减顺序排列" class="headerlink" title="17. 使数组按非递减顺序排列"></a>17. 使数组按非递减顺序排列</h1><p>给你一个下标从 0 开始的整数数组 nums 。在一步操作中，移除所有满足 nums[i - 1] &gt; nums[i] 的 nums[i] ，其中 0 &lt; i &lt; nums.length 。</p><p>重复执行步骤，直到 nums 变为 非递减 数组，返回所需执行的操作数。<br><img src="/img/Leetcode/%E4%BD%BF%E6%95%B0%E7%BB%84%E6%8C%89%E9%9D%9E%E9%80%92%E5%87%8F%E9%A1%BA%E5%BA%8F%E6%8E%92%E5%88%97.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">totalSteps</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        stack&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt; st;<br>        <span class="hljs-type">int</span> maxT = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> num:nums)&#123;<br>            maxT = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>() &amp;&amp; st.<span class="hljs-built_in">top</span>().first &lt;= num)&#123;<br>                maxT = <span class="hljs-built_in">max</span>(st.<span class="hljs-built_in">top</span>().second, maxT);<br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            maxT++;<br>            <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">empty</span>())&#123;maxT = <span class="hljs-number">0</span>;&#125;<br>            result = <span class="hljs-built_in">max</span>(result,maxT);<br>            st.<span class="hljs-built_in">push</span>(&#123;num, maxT&#125;);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="18-表现良好的最长时间段"><a href="#18-表现良好的最长时间段" class="headerlink" title="18. 表现良好的最长时间段"></a>18. 表现良好的最长时间段</h1><p>给你一份工作时间表 hours，上面记录着某一位员工每天的工作小时数。</p><p>我们认为当员工一天中的工作小时数大于 8 小时的时候，那么这一天就是「劳累的一天」。</p><p>所谓「表现良好的时间段」，意味在这段时间内，「劳累的天数」是严格 大于「不劳累的天数」。</p><p>请你返回「表现良好时间段」的最大长度。<br><img src="/img/Leetcode/%E8%A1%A8%E7%8E%B0%E8%89%AF%E5%A5%BD%E7%9A%84%E6%9C%80%E9%95%BF%E6%97%B6%E9%97%B4%E6%AE%B5.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">longestWPI</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; hours)</span> </span>&#123;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> n = hours.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">presum</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span></span>;<br><br>        presum[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(hours[i]/<span class="hljs-number">9</span>)&#123;hours[i] = <span class="hljs-number">1</span>;&#125;<br>            <span class="hljs-keyword">else</span>&#123;hours[i] = <span class="hljs-number">-1</span>;&#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)&#123;<br>            presum[i] = presum[i<span class="hljs-number">-1</span>]+hours[i<span class="hljs-number">-1</span>];<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;n+<span class="hljs-number">1</span>; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = n; j&gt;i; j--)&#123;<br>                <span class="hljs-keyword">if</span>(presum[j]-presum[i]&gt;<span class="hljs-number">0</span>)&#123;<br>                    result = <span class="hljs-built_in">max</span>(result,j-i);<br>                    <span class="hljs-keyword">break</span>;    <br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//improve using stack</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">longestWPI</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; hours)</span> </span>&#123;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> n = hours.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">presum</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span></span>;<br>        stack&lt;<span class="hljs-type">int</span>&gt; st;<br><br>        presum[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        st.<span class="hljs-built_in">push</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)&#123;<br>            presum[i] = presum[i<span class="hljs-number">-1</span>]+ (hours[i<span class="hljs-number">-1</span>]&gt;<span class="hljs-number">8</span>?<span class="hljs-number">1</span>:<span class="hljs-number">-1</span>);<br>            <span class="hljs-keyword">if</span>(presum[i] &lt; presum[st.<span class="hljs-built_in">top</span>()]) st.<span class="hljs-built_in">push</span>(i);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n; i&gt;<span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>() &amp;&amp; presum[i]&gt;presum[st.<span class="hljs-built_in">top</span>()])&#123;<br>                result = <span class="hljs-built_in">max</span>(result, i-st.<span class="hljs-built_in">top</span>());<br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="19-从链表中移除节点"><a href="#19-从链表中移除节点" class="headerlink" title="19. 从链表中移除节点"></a>19. 从链表中移除节点</h1><p>给你一个链表的头节点 head 。</p><p>移除每个右侧有一个更大数值的节点。</p><p>返回修改后链表的头节点 head 。<br><img src="/img/Leetcode/%E4%BB%8E%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%A7%BB%E9%99%A4%E8%8A%82%E7%82%B9.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">removeNodes</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        stack&lt;ListNode*&gt; st;<br>        ListNode* dummy = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(INT_MAX, head);<br>        <br>        st.<span class="hljs-built_in">push</span>(dummy);<br>        <span class="hljs-keyword">while</span>(head != <span class="hljs-literal">nullptr</span>)&#123;<br>            <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>() &amp;&amp; st.<span class="hljs-built_in">top</span>() -&gt; val &lt; head-&gt;val)&#123;<br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            st.<span class="hljs-built_in">top</span>() -&gt; next = head;<br>            st.<span class="hljs-built_in">push</span>(head);<br>            head = head-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummy-&gt;next;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">removeNodes</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">nullptr</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;&#125;<br><br>        head-&gt;next = <span class="hljs-built_in">removeNodes</span>(head-&gt;next);<br>        <span class="hljs-keyword">if</span>(head-&gt;next != <span class="hljs-literal">nullptr</span> &amp;&amp; head-&gt;val &lt; head-&gt;next-&gt;val)&#123;<br>            <span class="hljs-keyword">return</span> head -&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="20-美丽塔II"><a href="#20-美丽塔II" class="headerlink" title="20. 美丽塔II"></a>20. 美丽塔II</h1><p>给你一个长度为 n 下标从 0 开始的整数数组 maxHeights 。</p><p>你的任务是在坐标轴上建 n 座塔。第 i 座塔的下标为 i ，高度为 heights[i] 。</p><p>如果以下条件满足，我们称这些塔是 美丽 的：</p><ol><li>1 &lt;&#x3D; heights[i] &lt;&#x3D; maxHeights[i]</li><li>heights 是一个 山脉 数组。<br>如果存在下标 i 满足以下条件，那么我们称数组 heights 是一个 山脉 数组：</li></ol><ul><li>对于所有 0 &lt; j &lt;&#x3D; i ，都有 heights[j - 1] &lt;&#x3D; heights[j]</li><li>对于所有 i &lt;&#x3D; k &lt; n - 1 ，都有 heights[k + 1] &lt;&#x3D; heights[k]<br>请你返回满足 美丽塔 要求的方案中，高度和的最大值 。<br><img src="/img/Leetcode/%E7%BE%8E%E4%B8%BD%E5%A1%94II.png"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">maximumSumOfHeights</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; maxHeights)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = maxHeights.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; <span class="hljs-title">after</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span></span>;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> sum = <span class="hljs-number">0</span>;<br>        stack&lt;<span class="hljs-type">int</span>&gt; st;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> result = <span class="hljs-number">0</span>;<br>        st.<span class="hljs-built_in">push</span>(n);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-keyword">while</span>(st.<span class="hljs-built_in">size</span>()&gt;<span class="hljs-number">1</span> &amp;&amp; maxHeights[i] &lt; maxHeights[st.<span class="hljs-built_in">top</span>()])&#123;<br>                <span class="hljs-type">int</span> j = st.<span class="hljs-built_in">top</span>();<br>                st.<span class="hljs-built_in">pop</span>();<br>                sum -= (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)maxHeights[j]*(st.<span class="hljs-built_in">top</span>()-j);<br>               <br>            &#125;<br>            sum += (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)maxHeights[i]*(st.<span class="hljs-built_in">top</span>()-i);<br>            after[i] = sum;<br>            st.<span class="hljs-built_in">push</span>(i);<br>        &#125;<br><br>        st = <span class="hljs-built_in">stack</span>&lt;<span class="hljs-type">int</span>&gt;();<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> pre = <span class="hljs-number">0</span>;<br>        st.<span class="hljs-built_in">push</span>(<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j&lt;n; j++)&#123;<br>            <span class="hljs-keyword">while</span>(st.<span class="hljs-built_in">size</span>()&gt;<span class="hljs-number">1</span> &amp;&amp; maxHeights[j] &lt; maxHeights[st.<span class="hljs-built_in">top</span>()])&#123;<br>                <span class="hljs-type">int</span> k = st.<span class="hljs-built_in">top</span>();<br>                st.<span class="hljs-built_in">pop</span>();<br>                pre -= (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)maxHeights[k]*(k-st.<span class="hljs-built_in">top</span>());<br>            &#125;<br>            pre += (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)maxHeights[j]*(j-st.<span class="hljs-built_in">top</span>());<br>            result = <span class="hljs-built_in">max</span>(result, pre + after[j+<span class="hljs-number">1</span>]);<br>            st.<span class="hljs-built_in">push</span>(j);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="21-美丽塔I"><a href="#21-美丽塔I" class="headerlink" title="21. 美丽塔I"></a>21. 美丽塔I</h1><p>给你一个长度为 n 下标从 0 开始的整数数组 maxHeights 。</p><p>你的任务是在坐标轴上建 n 座塔。第 i 座塔的下标为 i ，高度为 heights[i] 。</p><p>如果以下条件满足，我们称这些塔是 美丽 的：</p><ol><li>1 &lt;&#x3D; heights[i] &lt;&#x3D; maxHeights[i]</li><li>heights 是一个 山脉 数组。<br>如果存在下标 i 满足以下条件，那么我们称数组 heights 是一个 山脉 数组：</li></ol><ul><li>对于所有 0 &lt; j &lt;&#x3D; i ，都有 heights[j - 1] &lt;&#x3D; heights[j]</li><li>对于所有 i &lt;&#x3D; k &lt; n - 1 ，都有 heights[k + 1] &lt;&#x3D; heights[k]<br>请你返回满足 美丽塔 要求的方案中，高度和的最大值 。<br><img src="/img/Leetcode/%E7%BE%8E%E4%B8%BD%E5%A1%94I.png"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">maximumSumOfHeights</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; maxHeights)</span> </span>&#123;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> result = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> n = maxHeights.<span class="hljs-built_in">size</span>();<br>        stack&lt;<span class="hljs-type">int</span>&gt; st;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; <span class="hljs-title">pre</span><span class="hljs-params">(n+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> summation = <span class="hljs-number">0</span>;;<br><br>        st.<span class="hljs-built_in">push</span>(<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-keyword">while</span>(st.<span class="hljs-built_in">size</span>()&gt;<span class="hljs-number">1</span> &amp;&amp; maxHeights[i]&lt;maxHeights[st.<span class="hljs-built_in">top</span>()])&#123;<br>                <span class="hljs-type">int</span> j = st.<span class="hljs-built_in">top</span>();<br>                st.<span class="hljs-built_in">pop</span>();<br>                summation -= (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)(maxHeights[j])*(j-st.<span class="hljs-built_in">top</span>());<br>            &#125;<br>            summation += (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)maxHeights[i]*(i-st.<span class="hljs-built_in">top</span>());<br>            pre[i+<span class="hljs-number">1</span>]  =summation;<br>            st.<span class="hljs-built_in">push</span>(i);<br>        &#125;<br><br>        st = <span class="hljs-built_in">stack</span>&lt;<span class="hljs-type">int</span>&gt; ();<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> tmp = <span class="hljs-number">0</span>;<br>        st.<span class="hljs-built_in">push</span>(n);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-keyword">while</span>(st.<span class="hljs-built_in">size</span>()&gt;<span class="hljs-number">1</span> &amp;&amp; maxHeights[i]&lt;maxHeights[st.<span class="hljs-built_in">top</span>()])&#123;<br>                <span class="hljs-type">int</span> j = st.<span class="hljs-built_in">top</span>();<br>                st.<span class="hljs-built_in">pop</span>();<br>                tmp -= (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)(maxHeights[j])*(st.<span class="hljs-built_in">top</span>()-j);<br>            &#125;<br>            tmp += (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)maxHeights[i]*(st.<span class="hljs-built_in">top</span>()-i);<br>            st.<span class="hljs-built_in">push</span>(i);<br>            result = <span class="hljs-built_in">max</span>(result, tmp+pre[i]);<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="22-前序遍历构造二叉搜索树"><a href="#22-前序遍历构造二叉搜索树" class="headerlink" title="22. 前序遍历构造二叉搜索树"></a>22. 前序遍历构造二叉搜索树</h1><p>给定一个整数数组，它表示BST(即 二叉搜索树 )的 先序遍历 ，构造树并返回其根。</p><p>保证 对于给定的测试用例，总是有可能找到具有给定需求的二叉搜索树。</p><p>二叉搜索树 是一棵二叉树，其中每个节点， Node.left 的任何后代的值 严格小于 Node.val , Node.right 的任何后代的值 严格大于 Node.val。</p><p>二叉树的 前序遍历 首先显示节点的值，然后遍历Node.left，最后遍历Node.right。<br><img src="/img/Leetcode/%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">bstFromPreorder</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; preorder)</span> </span>&#123;<br>        TreeNode* result = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">-1</span>);<br>        stack&lt;TreeNode*&gt; st;<br>        <span class="hljs-type">int</span> n = preorder.<span class="hljs-built_in">size</span>();<br>        st.<span class="hljs-built_in">push</span>(result);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            TreeNode* tmp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(preorder[i]);<br>            TreeNode* root;<br>            <span class="hljs-keyword">if</span>(!st.<span class="hljs-built_in">empty</span>() &amp;&amp; preorder[i]&lt;st.<span class="hljs-built_in">top</span>()-&gt;val)&#123;<br>                st.<span class="hljs-built_in">top</span>()-&gt;left = tmp;<br>                st.<span class="hljs-built_in">push</span>(tmp);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>() &amp;&amp; preorder[i]&gt;st.<span class="hljs-built_in">top</span>()-&gt;val)&#123;<br>                root = st.<span class="hljs-built_in">top</span>();<br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            root-&gt;right = tmp;<br>            st.<span class="hljs-built_in">push</span>(tmp);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result-&gt;right;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="23-车队"><a href="#23-车队" class="headerlink" title="23. 车队"></a>23. 车队</h1><p>在一条单行道上，有 n 辆车开往同一目的地。目的地是几英里以外的 target 。</p><p>给定两个整数数组 position 和 speed ，长度都是 n ，其中 position[i] 是第 i 辆车的位置， speed[i] 是第 i 辆车的速度(单位是英里&#x2F;小时)。</p><p>一辆车永远不会超过前面的另一辆车，但它可以追上去，并与前车 以相同的速度 紧接着行驶。此时，我们会忽略这两辆车之间的距离，也就是说，它们被假定处于相同的位置。</p><p>车队 是一些由行驶在相同位置、具有相同速度的车组成的非空集合。注意，一辆车也可以是一个车队。</p><p>即便一辆车在目的地才赶上了一个车队，它们仍然会被视作是同一个车队。</p><p>返回到达目的地的 车队数量 。<br><img src="/img/Leetcode/%E8%BD%A6%E9%98%9F.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">carFleet</span><span class="hljs-params">(<span class="hljs-type">int</span> target, vector&lt;<span class="hljs-type">int</span>&gt;&amp; position, vector&lt;<span class="hljs-type">int</span>&gt;&amp; speed)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = position.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        vector&lt;vector&lt;<span class="hljs-type">double</span>&gt;&gt; <span class="hljs-built_in">time_list</span>(target);<br>        stack&lt;<span class="hljs-type">double</span>&gt; st;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-type">int</span> diff = target - position[i];<br>            time_list[position[i]].<span class="hljs-built_in">push_back</span>((<span class="hljs-type">double</span>) diff / (<span class="hljs-type">double</span>) speed[i]);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = time_list.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = time_list[i].<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>; j&gt;=<span class="hljs-number">0</span>; j--)&#123;<br>                <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">empty</span>() || (!st.<span class="hljs-built_in">empty</span>() &amp;&amp; time_list[i][j]&gt;st.<span class="hljs-built_in">top</span>()))&#123;<br>                    st.<span class="hljs-built_in">push</span>(time_list[i][j]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        result = st.<span class="hljs-built_in">size</span>();<br><br>        <span class="hljs-keyword">return</span> result;    <br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="24-最大交换"><a href="#24-最大交换" class="headerlink" title="24. 最大交换"></a>24. 最大交换</h1><p>给定一个非负整数，你至多可以交换一次数字中的任意两位。返回你能得到的最大值。<br><img src="/img/Leetcode/%E6%9C%80%E5%A4%A7%E4%BA%A4%E6%8D%A2.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maximumSwap</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> </span>&#123;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        string str = <span class="hljs-built_in">to_string</span>(num);<br>        <span class="hljs-type">int</span> n = str.<span class="hljs-built_in">size</span>();<br><br>        <span class="hljs-type">int</span> max_str = str[n<span class="hljs-number">-1</span>]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-type">int</span> max_index = n<span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> swap_index_l = <span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> swap_index_r;<br>        <span class="hljs-type">char</span> tmp;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-2</span>; i&gt;=<span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-keyword">if</span>((str[i]-<span class="hljs-string">&#x27;0&#x27;</span>)&gt;max_str)&#123;<br>                max_str = str[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>                max_index = i;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((str[i]-<span class="hljs-string">&#x27;0&#x27;</span>)&lt;max_str)&#123;<br>                swap_index_l = i;<br>                swap_index_r = max_index;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(swap_index_l&gt;=<span class="hljs-number">0</span>)&#123;<br>            tmp = str[swap_index_l];<br>            str[swap_index_l] = str[swap_index_r];<br>            str[swap_index_r] = tmp;<br>        &#125;<br><br>        result = <span class="hljs-built_in">stoi</span>(str);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>单调栈</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maximumSwap</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; num_vec;<br>        <span class="hljs-type">int</span> result = num;<br>        <span class="hljs-type">int</span> r_index = <span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> l_index = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> tmp_index;<br>        stack&lt;<span class="hljs-type">int</span>&gt; st;<br>        <span class="hljs-type">int</span> max_r_index;<br>        <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span>(num)&#123;<br>            num_vec.<span class="hljs-built_in">push_back</span>(num%<span class="hljs-number">10</span>);<br>            num /= <span class="hljs-number">10</span>;<br>            n++;<br>        &#125;<br>        <span class="hljs-built_in">reverse</span>(num_vec.<span class="hljs-built_in">begin</span>(), num_vec.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(!st.<span class="hljs-built_in">empty</span>() &amp;&amp; num_vec[i] &gt; num_vec[st.<span class="hljs-built_in">top</span>()])&#123;<br>                r_index = i;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            st.<span class="hljs-built_in">push</span>(i);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(r_index == <span class="hljs-number">-1</span>)&#123;<span class="hljs-keyword">return</span> result;&#125;<br>        max_r_index = num_vec[r_index];<br>        tmp_index = r_index;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>; i&gt;tmp_index; i--)&#123;<br>            <span class="hljs-keyword">if</span>(num_vec[i] &gt; max_r_index)&#123;<br>                r_index = i;<br>                max_r_index = num_vec[i];<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num_vec[i] == max_r_index)&#123;<br>                <span class="hljs-keyword">if</span>(i&gt;r_index)&#123;r_index = i;&#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>() &amp;&amp; num_vec[r_index] &gt; num_vec[st.<span class="hljs-built_in">top</span>()])&#123;<br>            l_index = st.<span class="hljs-built_in">top</span>();<br>            st.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        <span class="hljs-built_in">swap</span>(num_vec[l_index], num_vec[r_index]);<br>        result = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            result = <span class="hljs-number">10</span>*result + num_vec[i];<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>@题目版权归Leetcode所有</p>]]></content>
    
    
    <categories>
      
      <category>Daily Algorithm</category>
      
      <category>LeetCode</category>
      
      <category>MonotonicStack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-Day18</title>
    <link href="/2024/01/12/Algorithms/LeetCode/LeetCode-20240112/"/>
    <url>/2024/01/12/Algorithms/LeetCode/LeetCode-20240112/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="1-构造有效字符串的最少插入数"><a href="#1-构造有效字符串的最少插入数" class="headerlink" title="1. 构造有效字符串的最少插入数"></a>1. 构造有效字符串的最少插入数</h1><p>给你一个字符串 word ，你可以向其中任何位置插入 “a”、”b” 或 “c” 任意次，返回使 word 有效 需要插入的最少字母数。</p><p>如果字符串可以由 “abc” 串联多次得到，则认为该字符串 有效 。<br><img src="/img/Leetcode/%E6%9E%84%E9%80%A0%E6%9C%89%E6%95%88%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9C%80%E5%B0%91%E6%8F%92%E5%85%A5%E6%95%B0.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">addMinimum</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-type">int</span> t = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; s.<span class="hljs-built_in">length</span>(); i++) &#123;<br>            t += s[i - <span class="hljs-number">1</span>] &gt;= s[i]; <span class="hljs-comment">// 必须生成一个新的 abc</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> t * <span class="hljs-number">3</span> - s.<span class="hljs-built_in">length</span>();<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//这种解法nb,关键还是找规律</span><br><span class="hljs-comment">//参考解题：灵茶山艾府</span><br></code></pre></td></tr></table></figure><h1 id="2-字符串中的额外字符"><a href="#2-字符串中的额外字符" class="headerlink" title="2.  字符串中的额外字符"></a>2.  字符串中的额外字符</h1><p>给你一个下标从 0 开始的字符串 s 和一个单词字典 dictionary 。你需要将 s 分割成若干个 互不重叠 的子字符串，每个子字符串都在 dictionary 中出现过。s 中可能会有一些 额外的字符 不在任何子字符串中。</p><p>请你采取最优策略分割 s ，使剩下的字符 最少 。<br><img src="/img/Leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E9%A2%9D%E5%A4%96%E5%AD%97%E7%AC%A6.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minExtraChar</span><span class="hljs-params">(string s, vector&lt;string&gt;&amp; dictionary)</span> </span>&#123;<br>        <span class="hljs-function">unordered_set&lt;string&gt; <span class="hljs-title">dict_set</span><span class="hljs-params">(dictionary.begin(), dictionary.end())</span></span>;<br>        <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(n+<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)</span></span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)&#123;<br>            dp[i] = dp[i<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;i; j++)&#123;<br>                <span class="hljs-keyword">if</span>(dict_set.<span class="hljs-built_in">count</span>(s.<span class="hljs-built_in">substr</span>(j, i-j)))&#123;<br>                    dp[i] = <span class="hljs-built_in">min</span>(dp[i], dp[j]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[n];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="3-使-X-和-Y-相等的最少操作次数"><a href="#3-使-X-和-Y-相等的最少操作次数" class="headerlink" title="3. 使 X 和 Y 相等的最少操作次数"></a>3. 使 X 和 Y 相等的最少操作次数</h1><p>给你两个正整数 x 和 y 。</p><p>一次操作中，你可以执行以下四种操作之一：</p><ol><li>如果 x 是 11 的倍数，将 x 除以 11 。</li><li>如果 x 是 5 的倍数，将 x 除以 5 。</li><li>将 x 减 1 。</li><li>将 x 加 1 。<br>请你返回让 x 和 y 相等的 最少 操作次数。<br><img src="/img/Leetcode/%E4%BD%BFX%E5%92%8CY%E7%9B%B8%E7%AD%89%E7%9A%84%E6%9C%80%E5%B0%91%E6%93%8D%E4%BD%9C%E6%AC%A1%E6%95%B0.png"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; dp;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minimumOperationsToMakeEqual</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(x&lt;=y)&#123;<span class="hljs-keyword">return</span> y-x;&#125;<br><br>        <span class="hljs-keyword">auto</span> it = dp.<span class="hljs-built_in">find</span>(x);<br>        <span class="hljs-keyword">if</span>(it != dp.<span class="hljs-built_in">end</span>())&#123;<br>            <span class="hljs-keyword">return</span> it-&gt;second;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(&#123;x-y, <br>        <span class="hljs-built_in">minimumOperationsToMakeEqual</span>(x/<span class="hljs-number">11</span>,y)+x%<span class="hljs-number">11</span>+<span class="hljs-number">1</span>,<br>        <span class="hljs-built_in">minimumOperationsToMakeEqual</span>(x/<span class="hljs-number">11</span> +<span class="hljs-number">1</span>,y)+<span class="hljs-number">11</span>-x%<span class="hljs-number">11</span>+<span class="hljs-number">1</span>,<br>        <span class="hljs-built_in">minimumOperationsToMakeEqual</span>(x/<span class="hljs-number">5</span>,y)+x%<span class="hljs-number">5</span>+<span class="hljs-number">1</span>,<br>        <span class="hljs-built_in">minimumOperationsToMakeEqual</span>(x/<span class="hljs-number">5</span> +<span class="hljs-number">1</span>,y)+<span class="hljs-number">5</span>-x%<span class="hljs-number">5</span>+<span class="hljs-number">1</span>&#125;);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ol><h1 id="4-队列中可以看到的人数"><a href="#4-队列中可以看到的人数" class="headerlink" title="4. 队列中可以看到的人数"></a>4. 队列中可以看到的人数</h1><p>有 n 个人排成一个队列，从左到右 编号为 0 到 n - 1 。给你以一个整数数组 heights ，每个整数 互不相同，heights[i] 表示第 i 个人的高度。</p><p>一个人能 看到 他右边另一个人的条件是这两人之间的所有人都比他们两人 矮 。更正式的，第 i 个人能看到第 j 个人的条件是 i &lt; j 且 min(heights[i], heights[j]) &gt; max(heights[i+1], heights[i+2], …, heights[j-1]) 。</p><p>请你返回一个长度为 n 的数组 answer ，其中 answer[i] 是第 i 个人在他右侧队列中能 看到 的 人数 。<br><img src="/img/Leetcode/%E9%98%9F%E5%88%97%E4%B8%AD%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E7%9A%84%E4%BA%BA%E6%95%B0.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">canSeePersonsCount</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; heights)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = heights.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">result</span><span class="hljs-params">(n)</span></span>;<br>        stack&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt; st;<br><br>        st.<span class="hljs-built_in">push</span>(&#123;n,INT_MAX&#125;);<br>        st.<span class="hljs-built_in">push</span>(&#123;n<span class="hljs-number">-1</span>, heights[n<span class="hljs-number">-1</span>]&#125;);<br>        result[n<span class="hljs-number">-1</span>] = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-2</span>; i&gt;=<span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-keyword">if</span>(heights[i]&gt;st.<span class="hljs-built_in">top</span>().second)&#123;<br>                result[i] = st.<span class="hljs-built_in">top</span>().first-i;<br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            <span class="hljs-keyword">while</span>(heights[i]&gt;st.<span class="hljs-built_in">top</span>().second)&#123;<br>                result[i]++;<br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">size</span>()&gt;<span class="hljs-number">1</span>)&#123;result[i]++;&#125;<br>            st.<span class="hljs-built_in">push</span>(&#123;i,heights[i]&#125;);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>@题目版权归Leetcode所有</p>]]></content>
    
    
    <categories>
      
      <category>Daily Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-Day17</title>
    <link href="/2024/01/08/Algorithms/LeetCode/LeetCode-20240108/"/>
    <url>/2024/01/08/Algorithms/LeetCode/LeetCode-20240108/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="1-在链表中插入最大公约数"><a href="#1-在链表中插入最大公约数" class="headerlink" title="1. 在链表中插入最大公约数"></a>1. 在链表中插入最大公约数</h1><p>给你一个链表的头 head ，每个结点包含一个整数值。</p><p>在相邻结点之间，请你插入一个新的结点，结点值为这两个相邻结点值的 最大公约数 。</p><p>请你返回插入之后的链表。</p><p>两个数的 最大公约数 是可以被两个数字整除的最大正整数。<br><img src="/img/Leetcode/%E5%9C%A8%E9%93%BE%E8%A1%A8%E4%B8%AD%E6%8F%92%E5%85%A5%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">insertGreatestCommonDivisors</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        ListNode* cur = head;<br>        ListNode* next = cur-&gt;next;<br>        function&lt;<span class="hljs-type">int</span>(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)&gt; greatest_common_divisor = [&amp;](<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)&#123;<br>            <span class="hljs-type">int</span> c = a%b;<br><br>            <span class="hljs-keyword">while</span>(c)&#123;<br>                a = b;<br>                b = c;<br>                c = a%b;<br>            &#125;<br>            <span class="hljs-keyword">return</span> b;<br>        &#125;;<br><br>        <span class="hljs-keyword">while</span>(next != <span class="hljs-literal">nullptr</span>)&#123;<br>            <span class="hljs-type">int</span> gcd = <span class="hljs-built_in">greatest_common_divisor</span>(cur-&gt;val, next-&gt;val);<br>            ListNode* node = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(gcd);<br>            cur-&gt;next = node;<br>            node-&gt;next = next;<br>            cur = cur-&gt;next-&gt;next;<br>            next = next-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="2-反转之后不同整数的数目"><a href="#2-反转之后不同整数的数目" class="headerlink" title="2.  反转之后不同整数的数目"></a>2.  反转之后不同整数的数目</h1><p>给你一个由 正 整数组成的数组 nums 。</p><p>你必须取出数组中的每个整数，反转其中每个数位，并将反转后得到的数字添加到数组的末尾。这一操作只针对 nums 中原有的整数执行。</p><p>返回结果数组中 不同 整数的数目。<br><img src="/img/Leetcode/%E5%8F%8D%E8%BD%AC%E4%B9%8B%E5%90%8E%E4%B8%8D%E5%90%8C%E6%95%B4%E6%95%B0%E7%9A%84%E6%95%B0%E7%9B%AE.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">countDistinctIntegers</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        set&lt;<span class="hljs-type">int</span>&gt; set_int;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-type">int</span> tmp = nums[i];<br>            <span class="hljs-type">int</span> tmp_rev=<span class="hljs-number">0</span>;<br>            set_int.<span class="hljs-built_in">insert</span>(tmp);<br>            <span class="hljs-keyword">while</span>(tmp)&#123;<br>                tmp_rev = <span class="hljs-number">10</span>*tmp_rev + tmp%<span class="hljs-number">10</span>;<br>                tmp /= <span class="hljs-number">10</span>;<br>            &#125;<br>            set_int.<span class="hljs-built_in">insert</span>(tmp_rev);<br>        &#125;<br>        result = set_int.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="3-回旋镖的数量"><a href="#3-回旋镖的数量" class="headerlink" title="3. 回旋镖的数量"></a>3. 回旋镖的数量</h1><p>给定平面上 n 对 互不相同 的点 points ，其中 points[i] &#x3D; [xi, yi] 。回旋镖 是由点 (i, j, k) 表示的元组 ，其中 i 和 j 之间的距离和 i 和 k 之间的欧式距离相等（需要考虑元组的顺序）。</p><p>返回平面上所有回旋镖的数量。<br><img src="/img/Leetcode/%E5%9B%9E%E6%97%8B%E9%95%96%E7%9A%84%E6%95%B0%E9%87%8F.png"><br>递归</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">numberOfBoomerangs</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; points)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; cnt;<br>        <span class="hljs-type">int</span> d;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;pi:points)&#123;<br>            cnt.<span class="hljs-built_in">clear</span>();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;pj:points)&#123;<br>                d = (pi[<span class="hljs-number">0</span>]-pj[<span class="hljs-number">0</span>])*(pi[<span class="hljs-number">0</span>]-pj[<span class="hljs-number">0</span>]) + (pi[<span class="hljs-number">1</span>]-pj[<span class="hljs-number">1</span>])*(pi[<span class="hljs-number">1</span>]-pj[<span class="hljs-number">1</span>]);<br>                ans += cnt[d]*<span class="hljs-number">2</span>;<br>                cnt[d]++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="4-笨阶乘"><a href="#4-笨阶乘" class="headerlink" title="4. 笨阶乘"></a>4. 笨阶乘</h1><p>通常，正整数 n 的阶乘是所有小于或等于 n 的正整数的乘积。例如，factorial(10) &#x3D; 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1。</p><p>相反，我们设计了一个笨阶乘 clumsy：在整数的递减序列中，我们以一个固定顺序的操作符序列来依次替换原有的乘法操作符：乘法(*)，除法(&#x2F;)，加法(+)和减法(-)。</p><p>例如，clumsy(10) &#x3D; 10 * 9 &#x2F; 8 + 7 - 6 * 5 &#x2F; 4 + 3 - 2 * 1。然而，这些运算仍然使用通常的算术运算顺序：我们在任何加、减步骤之前执行所有的乘法和除法步骤，并且按从左到右处理乘法和除法步骤。</p><p>另外，我们使用的除法是地板除法（floor division），所以 10 * 9 &#x2F; 8 等于 11。这保证结果是一个整数。</p><p>实现上面定义的笨函数：给定一个整数 N，它返回 N 的笨阶乘。<br><img src="/img/Leetcode/%E7%AC%A8%E9%98%B6%E4%B9%98.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">clumsy</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        stack&lt;<span class="hljs-type">int</span>&gt; st;<br>        <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br><br>        st.<span class="hljs-built_in">push</span>(n);<br>        n--;<br>        <span class="hljs-keyword">while</span>(n)&#123;<br>            <span class="hljs-keyword">if</span>(index%<span class="hljs-number">4</span> == <span class="hljs-number">0</span>)&#123;st.<span class="hljs-built_in">top</span>() *= n;&#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(index%<span class="hljs-number">4</span> == <span class="hljs-number">1</span>)&#123;st.<span class="hljs-built_in">top</span>() /= n;&#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(index%<span class="hljs-number">4</span> == <span class="hljs-number">2</span>)&#123;st.<span class="hljs-built_in">push</span>(n);&#125;<br>            <span class="hljs-keyword">else</span>&#123;st.<span class="hljs-built_in">push</span>(-n);&#125;<br>            n--;<br>            index++;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>())&#123;<br>            result += st.<span class="hljs-built_in">top</span>();<br>            st.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="5-移除后集合的最多元素数"><a href="#5-移除后集合的最多元素数" class="headerlink" title="5. 移除后集合的最多元素数"></a>5. 移除后集合的最多元素数</h1><p>给你两个下标从 0 开始的整数数组 nums1 和 nums2 ，它们的长度都是偶数 n 。</p><p>你必须从 nums1 中移除 n &#x2F; 2 个元素，同时从 nums2 中也移除 n &#x2F; 2 个元素。移除之后，你将 nums1 和 nums2 中剩下的元素插入到集合 s 中。</p><p>返回集合 s可能的 最多 包含多少元素。<br><img src="/img/Leetcode/%E7%A7%BB%E9%99%A4%E5%90%8E%E9%9B%86%E5%90%88%E7%9A%84%E6%9C%80%E5%A4%9A%E5%85%83%E7%B4%A0%E6%95%B0.png"></p><h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maximumSetSize</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2)</span> </span>&#123;<br>        <span class="hljs-function">unordered_set&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">s1</span><span class="hljs-params">(nums1.begin(),nums1.end())</span></span>;<br>        <span class="hljs-function">unordered_set&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">s2</span><span class="hljs-params">(nums2.begin(),nums2.end())</span></span>;<br><br>        <span class="hljs-type">int</span> n = nums1.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> n1 = s1.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> n2 = s2.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> all = n1+n2;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> e:s1)&#123;<br>            all -= s2.<span class="hljs-built_in">count</span>(e);<br>        &#125;<br>        <span class="hljs-type">int</span> c1 = <span class="hljs-built_in">min</span>(n1,n/<span class="hljs-number">2</span>);<br>        <span class="hljs-type">int</span> c2 = <span class="hljs-built_in">min</span>(n2,n/<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(all,c1+c2);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maximumSetSize</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2)</span> </span>&#123;<br>        <span class="hljs-function">unordered_set&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">s1</span><span class="hljs-params">(nums1.begin(), nums1.end())</span></span>;<br>        <span class="hljs-function">unordered_set&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">s2</span><span class="hljs-params">(nums2.begin(), nums2.end())</span></span>;<br><br>        <span class="hljs-type">int</span> n = nums1.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> n1 = s1.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> n2 = s2.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> common = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> e:s1)&#123;<br>            common += s2.<span class="hljs-built_in">count</span>(e);<br>        &#125;<br>        <span class="hljs-type">int</span> c1 = <span class="hljs-built_in">min</span>(n1-common, n/<span class="hljs-number">2</span>);<br>        <span class="hljs-type">int</span> c2 = <span class="hljs-built_in">min</span>(n2-common, n/<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">return</span> c1+c2+<span class="hljs-built_in">min</span>(n-c1-c2,common);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>@题目版权归Leetcode所有</p>]]></content>
    
    
    <categories>
      
      <category>Daily Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5.Optimized Surface Loading and Soft Strenching</title>
    <link href="/2024/01/08/SDL/5.Optimized%20Surface%20Loading%20and%20Soft%20Strenching/"/>
    <url>/2024/01/08/SDL/5.Optimized%20Surface%20Loading%20and%20Soft%20Strenching/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>参考博客：<a href="https://lazyfoo.net/tutorials/SDL/05_optimized_surface_loading_and_soft_stretching/index.php">Lazy Foo’ Productions</a><br>实例代码取自Lazy Foo’<br><br /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*This source code copyrighted by Lazy Foo&#x27; Productions 2004-2024</span><br><span class="hljs-comment">and may not be redistributed without written permission.*/</span><br><br><span class="hljs-comment">//Using SDL, standard IO, and strings</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SDL.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-comment">//Screen dimension constants</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> SCREEN_WIDTH = <span class="hljs-number">640</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> SCREEN_HEIGHT = <span class="hljs-number">480</span>;<br><br><span class="hljs-comment">//Starts up SDL and creates window</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Loads media</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadMedia</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Frees media and shuts down SDL</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Loads individual image</span><br><span class="hljs-function">SDL_Surface* <span class="hljs-title">loadSurface</span><span class="hljs-params">( std::string path )</span></span>;<br><br><span class="hljs-comment">//The window we&#x27;ll be rendering to</span><br>SDL_Window* gWindow = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//The surface contained by the window</span><br>SDL_Surface* gScreenSurface = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Current displayed image</span><br>SDL_Surface* gStretchedSurface = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Initialization flag</span><br><span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//Initialize SDL</span><br><span class="hljs-keyword">if</span>( <span class="hljs-built_in">SDL_Init</span>( SDL_INIT_VIDEO ) &lt; <span class="hljs-number">0</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;SDL could not initialize! SDL Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Create window</span><br>gWindow = <span class="hljs-built_in">SDL_CreateWindow</span>( <span class="hljs-string">&quot;SDL Tutorial&quot;</span>, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN );<br><span class="hljs-keyword">if</span>( gWindow == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Window could not be created! SDL Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Get window surface</span><br>gScreenSurface = <span class="hljs-built_in">SDL_GetWindowSurface</span>( gWindow );<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> success;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadMedia</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Loading success flag</span><br><span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//Load stretching surface</span><br>gStretchedSurface = <span class="hljs-built_in">loadSurface</span>( <span class="hljs-string">&quot;stretch.bmp&quot;</span> );<br><span class="hljs-keyword">if</span>( gStretchedSurface == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load stretching image!\n&quot;</span> );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> success;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Free loaded image</span><br><span class="hljs-built_in">SDL_FreeSurface</span>( gStretchedSurface );<br>gStretchedSurface = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Destroy window</span><br><span class="hljs-built_in">SDL_DestroyWindow</span>( gWindow );<br>gWindow = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Quit SDL subsystems</span><br><span class="hljs-built_in">SDL_Quit</span>();<br>&#125;<br><br><span class="hljs-function">SDL_Surface* <span class="hljs-title">loadSurface</span><span class="hljs-params">( std::string path )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//The final optimized image</span><br>SDL_Surface* optimizedSurface = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Load image at specified path</span><br>SDL_Surface* loadedSurface = <span class="hljs-built_in">SDL_LoadBMP</span>( path.<span class="hljs-built_in">c_str</span>() );<br><span class="hljs-keyword">if</span>( loadedSurface == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Unable to load image %s! SDL Error: %s\n&quot;</span>, path.<span class="hljs-built_in">c_str</span>(), <span class="hljs-built_in">SDL_GetError</span>() );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Convert surface to screen format</span><br>optimizedSurface = <span class="hljs-built_in">SDL_ConvertSurface</span>( loadedSurface, gScreenSurface-&gt;format, <span class="hljs-number">0</span> );<br><span class="hljs-keyword">if</span>( optimizedSurface == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Unable to optimize image %s! SDL Error: %s\n&quot;</span>, path.<span class="hljs-built_in">c_str</span>(), <span class="hljs-built_in">SDL_GetError</span>() );<br>&#125;<br><br><span class="hljs-comment">//Get rid of old loaded surface</span><br><span class="hljs-built_in">SDL_FreeSurface</span>( loadedSurface );<br>&#125;<br><br><span class="hljs-keyword">return</span> optimizedSurface;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( <span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* args[] )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Start up SDL and create window</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">init</span>() )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to initialize!\n&quot;</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Load media</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">loadMedia</span>() )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load media!\n&quot;</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Main loop flag</span><br><span class="hljs-type">bool</span> quit = <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">//Event handler</span><br>SDL_Event e;<br><br><span class="hljs-comment">//While application is running</span><br><span class="hljs-keyword">while</span>( !quit )<br>&#123;<br><span class="hljs-comment">//Handle events on queue</span><br><span class="hljs-keyword">while</span>( <span class="hljs-built_in">SDL_PollEvent</span>( &amp;e ) != <span class="hljs-number">0</span> )<br>&#123;<br><span class="hljs-comment">//User requests quit</span><br><span class="hljs-keyword">if</span>( e.type == SDL_QUIT )<br>&#123;<br>quit = <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Apply the image stretched</span><br>SDL_Rect stretchRect;<br>stretchRect.x = <span class="hljs-number">0</span>;<br>stretchRect.y = <span class="hljs-number">0</span>;<br>stretchRect.w = SCREEN_WIDTH;<br>stretchRect.h = SCREEN_HEIGHT;<br><span class="hljs-built_in">SDL_BlitScaled</span>( gStretchedSurface, <span class="hljs-literal">NULL</span>, gScreenSurface, &amp;stretchRect );<br><br><span class="hljs-comment">//Update the surface</span><br><span class="hljs-built_in">SDL_UpdateWindowSurface</span>( gWindow );<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Free resources and close SDL</span><br><span class="hljs-built_in">close</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在之前我们的教程中我们图片都是拿来直接用了，这对于少量图片的加载没有什么影响，但面对海量的图片时却会造成低效。因此，我们在显示图片之前会先将转化为优化后的格式，然后再通过拉伸的方式去除图片中不必要的部分。<br><br /><br><br /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Surface* <span class="hljs-title">loadSurface</span><span class="hljs-params">( std::string path )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//The final optimized image</span><br>SDL_Surface* optimizedSurface = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Load image at specified path</span><br>SDL_Surface* loadedSurface = <span class="hljs-built_in">SDL_LoadBMP</span>( path.<span class="hljs-built_in">c_str</span>() );<br><span class="hljs-keyword">if</span>( loadedSurface == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Unable to load image %s! SDL Error: %s\n&quot;</span>, path.<span class="hljs-built_in">c_str</span>(), <span class="hljs-built_in">SDL_GetError</span>() );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Convert surface to screen format</span><br>optimizedSurface = <span class="hljs-built_in">SDL_ConvertSurface</span>( loadedSurface, gScreenSurface-&gt;format, <span class="hljs-number">0</span> );<br><span class="hljs-keyword">if</span>( optimizedSurface == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Unable to optimize image %s! SDL Error: %s\n&quot;</span>, path.<span class="hljs-built_in">c_str</span>(), <span class="hljs-built_in">SDL_GetError</span>() );<br>&#125;<br><br><span class="hljs-comment">//Get rid of old loaded surface</span><br><span class="hljs-built_in">SDL_FreeSurface</span>( loadedSurface );<br>&#125;<br><br><span class="hljs-keyword">return</span> optimizedSurface;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上述这段代码之中，与之前的loadSurface不同，这里调用了<a href="/2024/01/05/SDL/Dictionary/SDL_ConvertSurface/" title="SDL_ConvertSurface">SDL_ConvertSurface</a>来将读取到的图片转换为屏幕所对应的格式。那什么时屏幕所对应的格式呢？关于这一部分的知识涉及到位图的一些知识，本文不做详细讨论，感兴趣的朋友可点下面链接<a href="https://zh.wikipedia.org/wiki/BMP">click to jump</a>。<br>注意到这代码中还有一个细节就是不要忘记在转换格式之后释放原来存储surface的内存。原因在于，在转换过程中原来的surface并没有被影响，一份复制被创建了出来，而我们需要的是那份新的复制。<br><br /><br><br /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//Apply the image stretched</span><br>SDL_Rect stretchRect;<br>stretchRect.x = <span class="hljs-number">0</span>;<br>stretchRect.y = <span class="hljs-number">0</span>;<br>stretchRect.w = SCREEN_WIDTH;<br>stretchRect.h = SCREEN_HEIGHT;<br><span class="hljs-built_in">SDL_BlitScaled</span>( gStretchedSurface, <span class="hljs-literal">NULL</span>, gScreenSurface, &amp;stretchRect );<br><br><span class="hljs-comment">//Update the surface</span><br><span class="hljs-built_in">SDL_UpdateWindowSurface</span>( gWindow );<br></code></pre></td></tr></table></figure><p>上面这段代码显示的是SDL_BlitScaled()的引用，该函数的作用可以类比于裁剪功能。在裁剪之前我们当然需要决定一个落点，然后在决定之后决定裁剪矩形的长和宽。</p>]]></content>
    
    
    <categories>
      
      <category>Game Development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4.Key Presses</title>
    <link href="/2024/01/07/SDL/4.Key%20Presses/"/>
    <url>/2024/01/07/SDL/4.Key%20Presses/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>参考博客：<a href="https://lazyfoo.net/tutorials/SDL/04_key_presses/index.php">Lazy Foo’ Productions</a><br>实例代码取自Lazy Foo’<br><br /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*This source code copyrighted by Lazy Foo&#x27; Productions 2004-2024</span><br><span class="hljs-comment">and may not be redistributed without written permission.*/</span><br><br><span class="hljs-comment">//Using SDL, standard IO, and strings</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SDL.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-comment">//Screen dimension constants</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> SCREEN_WIDTH = <span class="hljs-number">640</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> SCREEN_HEIGHT = <span class="hljs-number">480</span>;<br><br><span class="hljs-comment">//Key press surfaces constants</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">KeyPressSurfaces</span><br>&#123;<br>KEY_PRESS_SURFACE_DEFAULT,<br>KEY_PRESS_SURFACE_UP,<br>KEY_PRESS_SURFACE_DOWN,<br>KEY_PRESS_SURFACE_LEFT,<br>KEY_PRESS_SURFACE_RIGHT,<br>KEY_PRESS_SURFACE_TOTAL<br>&#125;;<br><br><span class="hljs-comment">//Starts up SDL and creates window</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Loads media</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadMedia</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Frees media and shuts down SDL</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Loads individual image</span><br><span class="hljs-function">SDL_Surface* <span class="hljs-title">loadSurface</span><span class="hljs-params">( std::string path )</span></span>;<br><br><span class="hljs-comment">//The window we&#x27;ll be rendering to</span><br>SDL_Window* gWindow = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//The surface contained by the window</span><br>SDL_Surface* gScreenSurface = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//The images that correspond to a keypress</span><br>SDL_Surface* gKeyPressSurfaces[ KEY_PRESS_SURFACE_TOTAL ];<br><br><span class="hljs-comment">//Current displayed image</span><br>SDL_Surface* gCurrentSurface = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Initialization flag</span><br><span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//Initialize SDL</span><br><span class="hljs-keyword">if</span>( <span class="hljs-built_in">SDL_Init</span>( SDL_INIT_VIDEO ) &lt; <span class="hljs-number">0</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;SDL could not initialize! SDL Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Create window</span><br>gWindow = <span class="hljs-built_in">SDL_CreateWindow</span>( <span class="hljs-string">&quot;SDL Tutorial&quot;</span>, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN );<br><span class="hljs-keyword">if</span>( gWindow == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Window could not be created! SDL Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Get window surface</span><br>gScreenSurface = <span class="hljs-built_in">SDL_GetWindowSurface</span>( gWindow );<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> success;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadMedia</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Loading success flag</span><br><span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//Load default surface</span><br>gKeyPressSurfaces[ KEY_PRESS_SURFACE_DEFAULT ] = <span class="hljs-built_in">loadSurface</span>( <span class="hljs-string">&quot;press.bmp&quot;</span> );<br><span class="hljs-keyword">if</span>( gKeyPressSurfaces[ KEY_PRESS_SURFACE_DEFAULT ] == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load default image!\n&quot;</span> );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">//Load up surface</span><br>gKeyPressSurfaces[ KEY_PRESS_SURFACE_UP ] = <span class="hljs-built_in">loadSurface</span>( <span class="hljs-string">&quot;up.bmp&quot;</span> );<br><span class="hljs-keyword">if</span>( gKeyPressSurfaces[ KEY_PRESS_SURFACE_UP ] == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load up image!\n&quot;</span> );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">//Load down surface</span><br>gKeyPressSurfaces[ KEY_PRESS_SURFACE_DOWN ] = <span class="hljs-built_in">loadSurface</span>( <span class="hljs-string">&quot;down.bmp&quot;</span> );<br><span class="hljs-keyword">if</span>( gKeyPressSurfaces[ KEY_PRESS_SURFACE_DOWN ] == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load down image!\n&quot;</span> );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">//Load left surface</span><br>gKeyPressSurfaces[ KEY_PRESS_SURFACE_LEFT ] = <span class="hljs-built_in">loadSurface</span>( <span class="hljs-string">&quot;left.bmp&quot;</span> );<br><span class="hljs-keyword">if</span>( gKeyPressSurfaces[ KEY_PRESS_SURFACE_LEFT ] == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load left image!\n&quot;</span> );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">//Load right surface</span><br>gKeyPressSurfaces[ KEY_PRESS_SURFACE_RIGHT ] = <span class="hljs-built_in">loadSurface</span>( <span class="hljs-string">&quot;right.bmp&quot;</span> );<br><span class="hljs-keyword">if</span>( gKeyPressSurfaces[ KEY_PRESS_SURFACE_RIGHT ] == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load right image!\n&quot;</span> );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> success;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Deallocate surfaces</span><br><span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; KEY_PRESS_SURFACE_TOTAL; ++i )<br>&#123;<br><span class="hljs-built_in">SDL_FreeSurface</span>( gKeyPressSurfaces[ i ] );<br>gKeyPressSurfaces[ i ] = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">//Destroy window</span><br><span class="hljs-built_in">SDL_DestroyWindow</span>( gWindow );<br>gWindow = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Quit SDL subsystems</span><br><span class="hljs-built_in">SDL_Quit</span>();<br>&#125;<br><br><span class="hljs-function">SDL_Surface* <span class="hljs-title">loadSurface</span><span class="hljs-params">( std::string path )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Load image at specified path</span><br>SDL_Surface* loadedSurface = <span class="hljs-built_in">SDL_LoadBMP</span>( path.<span class="hljs-built_in">c_str</span>() );<br><span class="hljs-keyword">if</span>( loadedSurface == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Unable to load image %s! SDL Error: %s\n&quot;</span>, path.<span class="hljs-built_in">c_str</span>(), <span class="hljs-built_in">SDL_GetError</span>() );<br>&#125;<br><br><span class="hljs-keyword">return</span> loadedSurface;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( <span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* args[] )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Start up SDL and create window</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">init</span>() )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to initialize!\n&quot;</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Load media</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">loadMedia</span>() )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load media!\n&quot;</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Main loop flag</span><br><span class="hljs-type">bool</span> quit = <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">//Event handler</span><br>SDL_Event e;<br><br><span class="hljs-comment">//Set default current surface</span><br>gCurrentSurface = gKeyPressSurfaces[ KEY_PRESS_SURFACE_DEFAULT ];<br><br><span class="hljs-comment">//While application is running</span><br><span class="hljs-keyword">while</span>( !quit )<br>&#123;<br><span class="hljs-comment">//Handle events on queue</span><br><span class="hljs-keyword">while</span>( <span class="hljs-built_in">SDL_PollEvent</span>( &amp;e ) != <span class="hljs-number">0</span> )<br>&#123;<br><span class="hljs-comment">//User requests quit</span><br><span class="hljs-keyword">if</span>( e.type == SDL_QUIT )<br>&#123;<br>quit = <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-comment">//User presses a key</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( e.type == SDL_KEYDOWN )<br>&#123;<br><span class="hljs-comment">//Select surfaces based on key press</span><br><span class="hljs-keyword">switch</span>( e.key.keysym.sym )<br>&#123;<br><span class="hljs-keyword">case</span> SDLK_UP:<br>gCurrentSurface = gKeyPressSurfaces[ KEY_PRESS_SURFACE_UP ];<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> SDLK_DOWN:<br>gCurrentSurface = gKeyPressSurfaces[ KEY_PRESS_SURFACE_DOWN ];<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> SDLK_LEFT:<br>gCurrentSurface = gKeyPressSurfaces[ KEY_PRESS_SURFACE_LEFT ];<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> SDLK_RIGHT:<br>gCurrentSurface = gKeyPressSurfaces[ KEY_PRESS_SURFACE_RIGHT ];<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">default</span>:<br>gCurrentSurface = gKeyPressSurfaces[ KEY_PRESS_SURFACE_DEFAULT ];<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Apply the current image</span><br><span class="hljs-built_in">SDL_BlitSurface</span>( gCurrentSurface, <span class="hljs-literal">NULL</span>, gScreenSurface, <span class="hljs-literal">NULL</span> );<br><br><span class="hljs-comment">//Update the surface</span><br><span class="hljs-built_in">SDL_UpdateWindowSurface</span>( gWindow );<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Free resources and close SDL</span><br><span class="hljs-built_in">close</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>承接上文的面向事件编程，本文就一些具体的事件来举例如何实现面向事件编程。键盘现今已成为个人电脑的标配，本文就拿键盘中的上，下，左，右方向键来举例如何实现面向事件编程。本文照例采用代码块分析的方法来之一解析代码。<br><br /><br><br /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//Key press surfaces constants</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">KeyPressSurfaces</span><br>&#123;<br>KEY_PRESS_SURFACE_DEFAULT,<br>KEY_PRESS_SURFACE_UP,<br>KEY_PRESS_SURFACE_DOWN,<br>KEY_PRESS_SURFACE_LEFT,<br>KEY_PRESS_SURFACE_RIGHT,<br>KEY_PRESS_SURFACE_TOTAL<br>&#125;;<br></code></pre></td></tr></table></figure><p>上述代码通过枚举类类型来初始化一系列我们之后将会使用到的关于keyboard的surface，自上而下值为从0到5。这里的作用也是将KeyPressSurfaces做为下面程序的数组下标。这里有些读者可能会有疑问为什么不直接用数字去表示下标。不妨试想一个surface数组，其中有四个surfaces分别代表键盘的up,left,right,down。如果只是用0-3去简单的表示数组下标，对于小的程序或许没有什么影响，但对于大型项目的话，可读性会非常的差，而且别人维护起来也会非常困难。所以说使用符号化的常数是需要养成的一个良好的习惯。<br><br /><br><br /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//Loads individual image</span><br><span class="hljs-function">SDL_Surface* <span class="hljs-title">loadSurface</span><span class="hljs-params">( std::string path )</span></span>;<br><br><span class="hljs-comment">//The window we&#x27;ll be rendering to</span><br>SDL_Window* gWindow = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//The surface contained by the window</span><br>SDL_Surface* gScreenSurface = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//The images that correspond to a keypress</span><br>SDL_Surface* gKeyPressSurfaces[ KEY_PRESS_SURFACE_TOTAL ];<br><br><span class="hljs-comment">//Current displayed image</span><br>SDL_Surface* gCurrentSurface = <span class="hljs-literal">NULL</span>;<br></code></pre></td></tr></table></figure><p>上述代码是声明了一些本程序中将会使用的SDL_Windows，SDL_Surface和SDL_Surface数组。<br><br /><br><br /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Surface* <span class="hljs-title">loadSurface</span><span class="hljs-params">( std::string path )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Load image at specified path</span><br>SDL_Surface* loadedSurface = <span class="hljs-built_in">SDL_LoadBMP</span>( path.<span class="hljs-built_in">c_str</span>() );<br><span class="hljs-keyword">if</span>( loadedSurface == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Unable to load image %s! SDL Error: %s\n&quot;</span>, path.<span class="hljs-built_in">c_str</span>(), <span class="hljs-built_in">SDL_GetError</span>() );<br>&#125;<br><br><span class="hljs-keyword">return</span> loadedSurface;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个函数是实例中新出现的函数，由于我们程序中使用了SDL_Surface数组，当我们需要批量将图片导入SDL_Surface中时，我们将其打包为一个函数进行统一调用。<br><br /><br><br /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadMedia</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Loading success flag</span><br><span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//Load default surface</span><br>gKeyPressSurfaces[ KEY_PRESS_SURFACE_DEFAULT ] = <span class="hljs-built_in">loadSurface</span>( <span class="hljs-string">&quot;press.bmp&quot;</span> );<br><span class="hljs-keyword">if</span>( gKeyPressSurfaces[ KEY_PRESS_SURFACE_DEFAULT ] == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load default image!\n&quot;</span> );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">//Load up surface</span><br>gKeyPressSurfaces[ KEY_PRESS_SURFACE_UP ] = <span class="hljs-built_in">loadSurface</span>( <span class="hljs-string">&quot;up.bmp&quot;</span> );<br><span class="hljs-keyword">if</span>( gKeyPressSurfaces[ KEY_PRESS_SURFACE_UP ] == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load up image!\n&quot;</span> );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">//Load down surface</span><br>gKeyPressSurfaces[ KEY_PRESS_SURFACE_DOWN ] = <span class="hljs-built_in">loadSurface</span>( <span class="hljs-string">&quot;down.bmp&quot;</span> );<br><span class="hljs-keyword">if</span>( gKeyPressSurfaces[ KEY_PRESS_SURFACE_DOWN ] == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load down image!\n&quot;</span> );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">//Load left surface</span><br>gKeyPressSurfaces[ KEY_PRESS_SURFACE_LEFT ] = <span class="hljs-built_in">loadSurface</span>( <span class="hljs-string">&quot;left.bmp&quot;</span> );<br><span class="hljs-keyword">if</span>( gKeyPressSurfaces[ KEY_PRESS_SURFACE_LEFT ] == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load left image!\n&quot;</span> );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">//Load right surface</span><br>gKeyPressSurfaces[ KEY_PRESS_SURFACE_RIGHT ] = <span class="hljs-built_in">loadSurface</span>( <span class="hljs-string">&quot;right.bmp&quot;</span> );<br><span class="hljs-keyword">if</span>( gKeyPressSurfaces[ KEY_PRESS_SURFACE_RIGHT ] == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load right image!\n&quot;</span> );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> success;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述程序是对于loadMedia函数的定义，同样是由于使用了SDL_Surface数组的原因，我们需要通过我们之前定义的loadSurface方法一一为SDL_Surface指明图像所在的相对路径。笔者个人觉得这里的代码虽然保证了最大的可读性，但是太过于啰嗦，以至于前面loadSurface函数的存在显得多此一举。如果尝试使用for loop, 并不会使代码的可读性变差，只需要将单一loop的逻辑阐明清楚，并且将循环之间的过渡也很好的写出来，这将大幅减少代码的长度。<br><br /><br><br /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Deallocate surfaces</span><br><span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; KEY_PRESS_SURFACE_TOTAL; ++i )<br>&#123;<br><span class="hljs-built_in">SDL_FreeSurface</span>( gKeyPressSurfaces[ i ] );<br>gKeyPressSurfaces[ i ] = <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">//Destroy window</span><br><span class="hljs-built_in">SDL_DestroyWindow</span>( gWindow );<br>gWindow = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Quit SDL subsystems</span><br><span class="hljs-built_in">SDL_Quit</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码是对于close函数的定义，同样由于SDL_Surface数组的定义，这里的操作稍有不同。为了释放SDL_Surface数组的资源，这里用了for循环，就像之前说的，我们使用枚举类型来定义数组的下标，所以在for循环中，KEY_PRESS_SURFACE作为了循环的终止条件。<br><br /><br><br /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">while</span>( !quit )<br>&#123;<br><span class="hljs-comment">//Handle events on queue</span><br><span class="hljs-keyword">while</span>( <span class="hljs-built_in">SDL_PollEvent</span>( &amp;e ) != <span class="hljs-number">0</span> )<br>&#123;<br><span class="hljs-comment">//User requests quit</span><br><span class="hljs-keyword">if</span>( e.type == SDL_QUIT )<br>&#123;<br>quit = <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-comment">//User presses a key</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( e.type == SDL_KEYDOWN )<br>&#123;<br><span class="hljs-comment">//Select surfaces based on key press</span><br><span class="hljs-keyword">switch</span>( e.key.keysym.sym )<br>&#123;<br><span class="hljs-keyword">case</span> SDLK_UP:<br>gCurrentSurface = gKeyPressSurfaces[ KEY_PRESS_SURFACE_UP ];<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> SDLK_DOWN:<br>gCurrentSurface = gKeyPressSurfaces[ KEY_PRESS_SURFACE_DOWN ];<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> SDLK_LEFT:<br>gCurrentSurface = gKeyPressSurfaces[ KEY_PRESS_SURFACE_LEFT ];<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> SDLK_RIGHT:<br>gCurrentSurface = gKeyPressSurfaces[ KEY_PRESS_SURFACE_RIGHT ];<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">default</span>:<br>gCurrentSurface = gKeyPressSurfaces[ KEY_PRESS_SURFACE_DEFAULT ];<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段便是main程序中的代码事件轮询部分，与之间空白框架不同，这次在退出事件判断之后加了一个键盘按键判断。首先判断键盘是否按下，当确认键盘已经按下时再确认具体按下的值，通过switch case来加载对应的图片。值得注意的是，这里除了键盘的上，下，左，右按键外还存在一个default,其对应的情况便是当用户按下除上，下，左，右之外的按键。<br><br /><br><br /></p><p>那这个实例程序的分析就到这里，但笔者这里还有一件事情想在这里和大家讨论。有很多人觉得代码写得越简洁越好，但是对于合作型的大型项目而言，更重要的是可读性和代码的健壮性。首先是可读性，从上面的示例代码中可以发现有很多的注释，有些注释甚至让人觉得啰嗦，但这些都是必要的。除此之外变量的命名也十分易懂。其次是健壮性，在示例代码中有许多对于异常情况处理的语句，这其中个人认为有两个目的：1. 防止程序发生崩溃。2. 便于测试人员后期，测试和debug。</p>]]></content>
    
    
    <categories>
      
      <category>Game Development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3.Event Driven Programming</title>
    <link href="/2024/01/06/SDL/3.Event%20Driven%20Programming/"/>
    <url>/2024/01/06/SDL/3.Event%20Driven%20Programming/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>参考博客：<a href="https://lazyfoo.net/tutorials/SDL/03_event_driven_programming/index.php">Lazy Foo’ Productions</a><br>实例代码取自Lazy Foo’<br><br /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*This source code copyrighted by Lazy Foo&#x27; Productions 2004-2024</span><br><span class="hljs-comment">and may not be redistributed without written permission.*/</span><br><br><span class="hljs-comment">//Using SDL and standard IO</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SDL.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">//Screen dimension constants</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> SCREEN_WIDTH = <span class="hljs-number">640</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> SCREEN_HEIGHT = <span class="hljs-number">480</span>;<br><br><span class="hljs-comment">//Starts up SDL and creates window</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Loads media</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadMedia</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Frees media and shuts down SDL</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//The window we&#x27;ll be rendering to</span><br>SDL_Window* gWindow = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//The surface contained by the window</span><br>SDL_Surface* gScreenSurface = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//The image we will load and show on the screen</span><br>SDL_Surface* gXOut = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Initialization flag</span><br><span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//Initialize SDL</span><br><span class="hljs-keyword">if</span>( <span class="hljs-built_in">SDL_Init</span>( SDL_INIT_VIDEO ) &lt; <span class="hljs-number">0</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;SDL could not initialize! SDL_Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Create window</span><br>gWindow = <span class="hljs-built_in">SDL_CreateWindow</span>( <span class="hljs-string">&quot;SDL Tutorial&quot;</span>, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN );<br><span class="hljs-keyword">if</span>( gWindow == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Window could not be created! SDL_Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Get window surface</span><br>gScreenSurface = <span class="hljs-built_in">SDL_GetWindowSurface</span>( gWindow );<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> success;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadMedia</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Loading success flag</span><br><span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//Load splash image</span><br>gXOut = <span class="hljs-built_in">SDL_LoadBMP</span>( <span class="hljs-string">&quot;x.bmp&quot;</span> );<br><span class="hljs-keyword">if</span>( gXOut == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Unable to load image %s! SDL Error: %s\n&quot;</span>, <span class="hljs-string">&quot;x.bmp&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> success;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Deallocate surface</span><br><span class="hljs-built_in">SDL_FreeSurface</span>( gXOut );<br>gXOut = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Destroy window</span><br><span class="hljs-built_in">SDL_DestroyWindow</span>( gWindow );<br>gWindow = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Quit SDL subsystems</span><br><span class="hljs-built_in">SDL_Quit</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( <span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* args[] )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Start up SDL and create window</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">init</span>() )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to initialize!\n&quot;</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Load media</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">loadMedia</span>() )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load media!\n&quot;</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Main loop flag</span><br><span class="hljs-type">bool</span> quit = <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">//Event handler</span><br>SDL_Event e;<br><br><span class="hljs-comment">//While application is running</span><br><span class="hljs-keyword">while</span>( !quit )<br>&#123;<br><span class="hljs-comment">//Handle events on queue</span><br><span class="hljs-keyword">while</span>( <span class="hljs-built_in">SDL_PollEvent</span>( &amp;e ) != <span class="hljs-number">0</span> )<br>&#123;<br><span class="hljs-comment">//User requests quit</span><br><span class="hljs-keyword">if</span>( e.type == SDL_QUIT )<br>&#123;<br>quit = <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Apply the image</span><br><span class="hljs-built_in">SDL_BlitSurface</span>( gXOut, <span class="hljs-literal">NULL</span>, gScreenSurface, <span class="hljs-literal">NULL</span> );<br><br><span class="hljs-comment">//Update the surface</span><br><span class="hljs-built_in">SDL_UpdateWindowSurface</span>( gWindow );<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//Free resources and close SDL</span><br><span class="hljs-built_in">close</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>之前学习了如何将图片通过SDL库显示出来，但游戏不单单只有显示图片这么简单，今天就更近一步。在游戏中会存在许多事件，这些事件可以来自玩家也可以来自游戏本身，这一切的实现都基于SDL中的事件处理系统。通过查看<a href="/2024/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_Event</a>结构可以查看具体的事件类，这里我们直接看代码。<br><br /><br><br /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">while</span>( !quit )<br>&#123;<br><span class="hljs-comment">//Handle events on queue</span><br><span class="hljs-keyword">while</span>( <span class="hljs-built_in">SDL_PollEvent</span>( &amp;e ) != <span class="hljs-number">0</span> )<br>&#123;<br><span class="hljs-comment">//User requests quit</span><br><span class="hljs-keyword">if</span>( e.type == SDL_QUIT )<br>&#123;<br>quit = <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个代码框架可以作为一种模板使用，但就像我所说的这里只是一个框架，框架里面并没有实质性的内容，当然作为学习代码还是不错的选择。我们可以将栈当作游戏事件的储存容器。 每当有新的事件发生时便会把事件压入栈中。Loop while(!quit)会以循环轮询的方式去自顶向下读取栈中 的内容，<a href="/2024/01/05/SDL/Dictionary/SDL_PollEvent/" title="SDL_PollEvent">SDL_PollEvent()</a>自顶向下的方向读取栈中的事件。当读取到SDL__QUIT事件时会退出循环轮询。<br><br /><br><br /></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//Apply the image</span><br><span class="hljs-built_in">SDL_BlitSurface</span>( gXOut, <span class="hljs-literal">NULL</span>, gScreenSurface, <span class="hljs-literal">NULL</span> );<br><br><span class="hljs-comment">//Update the surface</span><br><span class="hljs-built_in">SDL_UpdateWindowSurface</span>( gWindow );<br></code></pre></td></tr></table></figure><p>这段代码中显示图片不是目的，图片的显示代表着事件轮询的结束，在实际情况中我们可以根据我们的需求将图片显示改成其它功能。</p>]]></content>
    
    
    <categories>
      
      <category>Game Development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2.Getting an image on the screen</title>
    <link href="/2024/01/05/SDL/2.Getting%20an%20image%20on%20the%20screen/"/>
    <url>/2024/01/05/SDL/2.Getting%20an%20image%20on%20the%20screen/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>参考链接：<a href="https://lazyfoo.net/tutorials/SDL/02_getting_an_image_on_the_screen/index.php">Click to jump</a><br>参考博客：Lazy Foo’ Productions</p><p>对于下面示例代码将采用分块学习的方式去学习SDL库函数的使用<br>示例代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/*This source code copyrighted by Lazy Foo&#x27; Productions 2004-2024</span><br><span class="hljs-comment">and may not be redistributed without written permission.*/</span><br><br><span class="hljs-comment">//Using SDL and standard IO</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SDL.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">//Screen dimension constants</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> SCREEN_WIDTH = <span class="hljs-number">640</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> SCREEN_HEIGHT = <span class="hljs-number">480</span>;<br><br><span class="hljs-comment">//Starts up SDL and creates window</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Loads media</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadMedia</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Frees media and shuts down SDL</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//The window we&#x27;ll be rendering to</span><br>SDL_Window* gWindow = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//The surface contained by the window</span><br>SDL_Surface* gScreenSurface = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//The image we will load and show on the screen</span><br>SDL_Surface* gHelloWorld = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Initialization flag</span><br><span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//Initialize SDL</span><br><span class="hljs-keyword">if</span>( <span class="hljs-built_in">SDL_Init</span>( SDL_INIT_VIDEO ) &lt; <span class="hljs-number">0</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;SDL could not initialize! SDL_Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Create window</span><br>gWindow = <span class="hljs-built_in">SDL_CreateWindow</span>( <span class="hljs-string">&quot;SDL Tutorial&quot;</span>, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN );<br><span class="hljs-keyword">if</span>( gWindow == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Window could not be created! SDL_Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Get window surface</span><br>gScreenSurface = <span class="hljs-built_in">SDL_GetWindowSurface</span>( gWindow );<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> success;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadMedia</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Loading success flag</span><br><span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//Load splash image</span><br>gHelloWorld = <span class="hljs-built_in">SDL_LoadBMP</span>( <span class="hljs-string">&quot;hello_world.bmp&quot;</span> );<br><span class="hljs-keyword">if</span>( gHelloWorld == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Unable to load image %s! SDL Error: %s\n&quot;</span>, <span class="hljs-string">&quot;hello_world.bmp&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> success;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Deallocate surface</span><br><span class="hljs-built_in">SDL_FreeSurface</span>( gHelloWorld );<br>gHelloWorld = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Destroy window</span><br><span class="hljs-built_in">SDL_DestroyWindow</span>( gWindow );<br>gWindow = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Quit SDL subsystems</span><br><span class="hljs-built_in">SDL_Quit</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( <span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* args[] )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Start up SDL and create window</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">init</span>() )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to initialize!\n&quot;</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Load media</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">loadMedia</span>() )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load media!\n&quot;</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Apply the image</span><br><span class="hljs-built_in">SDL_BlitSurface</span>( gHelloWorld, <span class="hljs-literal">NULL</span>, gScreenSurface, <span class="hljs-literal">NULL</span> );<br><br><span class="hljs-comment">//Update the surface</span><br><span class="hljs-built_in">SDL_UpdateWindowSurface</span>( gWindow );<br><br>            <span class="hljs-comment">//Hack to get window to stay up</span><br>            SDL_Event e; <br>            <span class="hljs-type">bool</span> quit = <span class="hljs-literal">false</span>; <br>            <span class="hljs-keyword">while</span>( quit == <span class="hljs-literal">false</span> )&#123; <br>                    <span class="hljs-keyword">while</span>( <span class="hljs-built_in">SDL_PollEvent</span>( &amp;e ) )&#123;<br>                         <span class="hljs-keyword">if</span>( e.type == SDL_QUIT ) quit = <span class="hljs-literal">true</span>;<br>                    &#125; <br>            &#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//Free resources and close SDL</span><br><span class="hljs-built_in">close</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了方便撰写本文, 这里把所有东西都塞在main函数之中，但在实际项目中，必须尽可能地将代码分成不同地模块：一方面是为了养成良好地写代码习惯，另一方面是便于后期地测试和维护。为了方便读者的理解，本文采用代码分块分析的方式。我们首先从下面代码开始分析。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//Using SDL and standard IO</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;SDL.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">//Screen dimension constants</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> SCREEN_WIDTH = <span class="hljs-number">640</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> SCREEN_HEIGHT = <span class="hljs-number">480</span>;<br><br><span class="hljs-comment">//Starts up SDL and creates window</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Loads media</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadMedia</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-comment">//Frees media and shuts down SDL</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p>上面代码干了三件事：1. 包含本文件所需地头文件。2. 声明全局变量，这些变量一般是下面程序中反复使用地常量（注意在平时写项目代码的时候应尽可能避免使用全局变量）3. 声明函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//The window we&#x27;ll be rendering to</span><br>SDL_Window* gWindow = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//The surface contained by the window</span><br>SDL_Surface* gScreenSurface = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//The image we will load and show on the screen</span><br>SDL_Surface* gHelloWorld = <span class="hljs-literal">NULL</span>;<br></code></pre></td></tr></table></figure><p>这代码同样是声明变量，但与上面讨论的不同。在上面的代码中bool属于STL库，而SDL_Window和SDL_Surface属于SDL库。下面笔者介绍SDL_Window，SDL_Surface以及对应的函数用法</p><h2 id="SDL-Window"><a href="#SDL-Window" class="headerlink" title="SDL_Window"></a>SDL_Window</h2><p>SDL_Window为一种结构体，描述的是窗体对象，呈现在设备上的是一个窗体，是所有图像的载体。有下列函数会用到SDL_Windows结构体。<br>相关函数及其用法：</p><a href="/2024/01/03/SDL/Dictionary/SDL_CreateWindow/" title="SDL_CreateWindow">SDL_CreateWindow()</a><br /><a href="/2024/01/03/SDL/Dictionary/SDL_CreateWindowFrom/" title="SDL_CreateWindowFrom">SDL_CreateWindowFrom()</a><br />  <a href="/2024/01/03/SDL/Dictionary/SDL_DestroyWindow/" title="SDL_DestroyWindow">SDL_DestroyWindow()</a><br /><a href="/2024/01/03/SDL/Dictionary/SDL_GetWindowData/" title="SDL_GetWindowData">SDL_GetWindowData()</a><br /><a href="/2024/01/03/SDL/Dictionary/SDL_GetWindowFlags/" title="SDL_GetWindowFlags">SDL_GetWindowFlags()</a><br /><a href="/2024/01/03/SDL/Dictionary/SDL_GetWindowGrab/" title="SDL_GetWindowGrab">SDL_GetWindowGrab()</a><br /><a href="/2024/01/03/SDL/Dictionary/SDL_GetWindowPosition/" title="SDL_GetWindowPosition">SDL_GetWindowPosition()</a><br />  <a href="/2024/01/03/SDL/Dictionary/SDL_GetWindowSize/" title="SDL_GetWindowSize">SDL_GetWindowSize()</a><br /><a href="/2024/01/03/SDL/Dictionary/SDL_GetWindowTitle/" title="SDL_GetWindowTitle">SDL_GetWindowTitle()</a><br /><a href="/2024/01/03/SDL/Dictionary/SDL_HideWindow/" title="SDL_HideWindow">SDL_HideWindow()</a><br /><a href="/2024/01/03/SDL/Dictionary/SDL_MaximizeWindow/" title="SDL_MaximizeWindow">SDL_MaximizeWindow()</a><br />  <a href="/2024/01/03/SDL/Dictionary/SDL_MinimizeWindo/" title="SDL_MinimizeWindow">SDL_MinimizeWindow()</a><br /><a href="/2024/01/03/SDL/Dictionary/SDL_RaiseWindow/" title="SDL_RaiseWindow">SDL_RaiseWindow()</a><br /><a href="/2024/01/03/SDL/Dictionary/SDL_RestoreWindow/" title="SDL_RestoreWindow">SDL_RestoreWindow()</a><br /><a href="/2024/01/03/SDL/Dictionary/SDL_SetWindowData/" title="SDL_SetWindowData">SDL_SetWindowData()</a><br /><a href="/2024/01/03/SDL/Dictionary/SDL_SetWindowFullscreen/" title="SDL_SetWindowFullscreen">SDL_SetWindowFullscreen()</a><br />  <a href="/2024/01/03/SDL/Dictionary/SDL_SetWindowGrab/" title="SDL_SetWindowGrab">SDL_SetWindowGrab()</a><br /><a href="/2024/01/03/SDL/Dictionary/SDL_SetWindowIcon/" title="SDL_SetWindowIcon">SDL_SetWindowIcon()</a><br /><a href="/2024/01/03/SDL/Dictionary/SDL_SetWindowPosition/" title="SDL_SetWindowPosition">SDL_SetWindowPosition()</a><br />  <a href="/2024/01/03/SDL/Dictionary/SDL_SetWindowSize/" title="SDL_SetWindowSize">SDL_SetWindowSize()</a><br /><a href="/2024/01/03/SDL/Dictionary/SDL_SetWindowBordered/" title="SDL_SetWindowBordered">SDL_SetWindowBordered()</a><br />  <a href="/2024/01/03/SDL/Dictionary/SDL_SetWindowTitle/" title="SDL_SetWindowTitle">SDL_SetWindowTitle()</a><br /><a href="/2024/01/03/SDL/Dictionary/SDL_ShowWindow/" title="SDL_ShowWindow">SDL_ShowWindow()</a><br /><h2 id="SDL-Surface"><a href="#SDL-Surface" class="headerlink" title="SDL_Surface"></a>SDL_Surface</h2><p>SDL_Surface是一个用于Surface间相互拷贝buffer数据的像素集合.其中Blitting 是指位边界块传输或块信息传输。假设您有一个 Surface（您的屏幕）。 您想在屏幕上画一个圆圈。 所以你要做的是，绘制圆并将缓冲区的圆块传输到屏幕缓冲区，这个过程称为“Blitting”。<br>相关函数及其用法：</p><a href="/2024/01/05/SDL/Dictionary/SDL_BlitSurface/" title="SDL_BlitSurface">SDL_BlitSurface()</a><br /><a href="/2024/01/05/SDL/Dictionary/SDL_ConvertSurface/" title="SDL_ConvertSurface">SDL_ConvertSurface()</a><br />  <a href="/2024/01/05/SDL/Dictionary/SDL_CreateRGBSurface/" title="SDL_CreateRGBSurface">SDL_CreateRGBSurface()</a><br /><a href="/2024/01/05/SDL/Dictionary/SDL_CreateRGBSurfaceFrom/" title="SDL_CreateRGBSurfaceFrom">SDL_CreateRGBSurfaceFrom()</a><br />  <a href="/2024/01/05/SDL/Dictionary/SDL_FillRect/" title="SDL_FillRect">SDL_FillRect()</a><br /><a href="/2024/01/05/SDL/Dictionary/SDL_FillRects/" title="SDL_FillRects">SDL_FillRects()</a><br /><a href="/2024/01/05/SDL/Dictionary/SDL_FreeSurface/" title="SDL_FreeSurface">SDL_FreeSurface()</a><br /><a href="/2024/01/05/SDL/Dictionary/SDL_GetClipRect/" title="SDL_GetClipRect">SDL_GetClipRect()</a><br /><a href="/2024/01/05/SDL/Dictionary/SDL_Color/" title="SDL_Color">SDL_Color()</a><br /><a href="/2024/01/05/SDL/Dictionary/SDL_GetSurfaceAlphaMod/" title="SDL_GetSurfaceAlphaMod">SDL_GetSurfaceAlphaMod()</a><br />  <a href="/2024/01/05/SDL/Dictionary/SDL_GetSurfaceBlendMode/" title="SDL_GetSurfaceBlendMode">SDL_GetSurfaceBlendMode()</a><br /><a href="/2024/01/05/SDL/Dictionary/SDL_GetSurfaceColorMod/" title="SDL_GetSurfaceColorMod">SDL_GetSurfaceColorMod()</a><br /><a href="/2024/01/05/SDL/Dictionary/SDL_LoadBMP_RW/" title="SDL_LoadBMP_RW">SDL_LoadBMP_RW()</a><br /><a href="/2024/01/05/SDL/Dictionary/SDL_LockSurface/" title="SDL_LockSurface">SDL_LockSurface()</a><br /><a href="/2024/01/05/SDL/Dictionary/SDL_LowerBlit/" title="SDL_LowerBlit">SDL_LowerBlit()</a><br /><a href="/2024/01/05/SDL/Dictionary/SDL_MUSTLOCK/" title="SDL_MUSTLOCK">SDL_MUSTLOCK()</a><br /><a href="/2024/01/05/SDL/Dictionary/SDL_SaveBMP_RW/" title="SDL_SaveBMP_RW">SDL_SaveBMP_RW()</a><br /><a href="/2024/01/05/SDL/Dictionary/SDL_SetClipRect/" title="SDL_SetClipRect">SDL_SetClipRect()</a><br /><a href="/2024/01/05/SDL/Dictionary/SDL_SetColorKey/" title="SDL_SetColorKey">SDL_SetColorKey()</a><br /><a href="/2024/01/05/SDL/Dictionary/SDL_SetSurfaceAlphaMod/" title="SDL_SetSurfaceAlphaMod">SDL_SetSurfaceAlphaMod()</a><br />  <a href="/2024/01/05/SDL/Dictionary/SDL_SetSurfaceBlendMode/" title="SDL_SetSurfaceBlendMode">SDL_SetSurfaceBlendMode()</a><br /><a href="/2024/01/05/SDL/Dictionary/SDL_SetSurfaceColorMod/" title="SDL_SetSurfaceColorMod">SDL_SetSurfaceColorMod()</a><br /><a href="/2024/01/05/SDL/Dictionary/SDL_SetSurfacePalette/" title="SDL_SetSurfacePalette">SDL_SetSurfacePalette()</a><br /><a href="/2024/01/05/SDL/Dictionary/SDL_SetSurfaceRLE/" title="SDL_SetSurfaceRLE">SDL_SetSurfaceRLE()</a><br /><a href="/2024/01/05/SDL/Dictionary/SDL_SoftStretch/" title="SDL_SoftStretch">SDL_SoftStretch()</a><br /><a href="/2024/01/05/SDL/Dictionary/SDL_UnlockSurface/" title="SDL_UnlockSurface">SDL_UnlockSurface()</a><br /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Initialization flag</span><br><span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//Initialize SDL</span><br><span class="hljs-keyword">if</span>( <span class="hljs-built_in">SDL_Init</span>( SDL_INIT_VIDEO ) &lt; <span class="hljs-number">0</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;SDL could not initialize! SDL_Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Create window</span><br>gWindow = <span class="hljs-built_in">SDL_CreateWindow</span>( <span class="hljs-string">&quot;SDL Tutorial&quot;</span>, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN );<br><span class="hljs-keyword">if</span>( gWindow == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Window could not be created! SDL_Error: %s\n&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Get window surface</span><br>gScreenSurface = <span class="hljs-built_in">SDL_GetWindowSurface</span>( gWindow );<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> success;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码是对于init()函数的定义，<a href="/2024/01/05/SDL/Dictionary/SDL_Init/" title="SDL_Init">SDL_Init( SDL_INIT_VIDEO )&lt;0</a>首先是检查视频子系统初始化是否成功。失败将打印错误，成功将创建窗口gWindow。如过窗口创建失败将打印错误，如果窗口创建成功<a href="/2024/01/05/SDL/Dictionary/SDL_GetWindowSurface/" title="SDL_GetWindowSurface">SDL_GetWindowSurface()</a>函数将返回窗口关联的surface gScreenSurface。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">loadMedia</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Loading success flag</span><br><span class="hljs-type">bool</span> success = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">//Load splash image</span><br>gHelloWorld = <span class="hljs-built_in">SDL_LoadBMP</span>( <span class="hljs-string">&quot;hello_world.bmp&quot;</span> );<br><span class="hljs-keyword">if</span>( gHelloWorld == <span class="hljs-literal">NULL</span> )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Unable to load image %s! SDL Error: %s\n&quot;</span>, <span class="hljs-string">&quot;hello_world.bmp&quot;</span>, <span class="hljs-built_in">SDL_GetError</span>() );<br>success = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> success;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码是对于loadMedia()函数的定义。<a href="/2024/01/05/SDL/Dictionary/SDL_LoadBMP/" title="SDL_LoadBMP">SDL_LoadBMP()</a>函数从括号中的相对路径中获取bmp文件，如果失败打印错误信息。如果读者这里报Parameter ‘src’ is invalid的错误，首先先检查相对路径写的是否正确，其次是bmp的文件是否放在了正确的工作目录中。不同的编译器对于工作目录的定义不同，这里读者可以根据自己的情况google查阅。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Deallocate surface</span><br><span class="hljs-built_in">SDL_FreeSurface</span>( gHelloWorld );<br>gHelloWorld = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Destroy window</span><br><span class="hljs-built_in">SDL_DestroyWindow</span>( gWindow );<br>gWindow = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">//Quit SDL subsystems</span><br><span class="hljs-built_in">SDL_Quit</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码是对于close()函数的定义。首先从窗口开始，调用<a href="/2024/01/05/SDL/Dictionary/SDL_FreeSurface/" title="SDL_FreeSurface">SDL_FreeSurface()</a>来释放surface，然后再调用<a href="/2024/01/03/SDL/Dictionary/SDL_DestroyWindow/" title="SDL_DestroyWindow">SDL_DestroyWindow()</a>来销毁窗口，最后调用<a href="/2024/01/05/SDL/Dictionary/SDL_Quit/" title="SDL_Quit">SDL_Quit()</a>来销毁所有子系统。每次做完上述三步的每一步后记得将指针指向NULL，这将会是一个好习惯。请不要指望C++会自动帮你去释放资源，为了以防万一，请每次手动释放。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">( <span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* args[] )</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//Start up SDL and create window</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">init</span>() )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to initialize!\n&quot;</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Load media</span><br><span class="hljs-keyword">if</span>( !<span class="hljs-built_in">loadMedia</span>() )<br>&#123;<br><span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Failed to load media!\n&quot;</span> );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">//Apply the image</span><br><span class="hljs-built_in">SDL_BlitSurface</span>( gHelloWorld, <span class="hljs-literal">NULL</span>, gScreenSurface, <span class="hljs-literal">NULL</span> );<br><br><span class="hljs-comment">//Update the surface</span><br><span class="hljs-built_in">SDL_UpdateWindowSurface</span>( gWindow );<br><br>            <span class="hljs-comment">//Hack to get window to stay up</span><br>            SDL_Event e; <br>            <span class="hljs-type">bool</span> quit = <span class="hljs-literal">false</span>; <br>            <span class="hljs-keyword">while</span>( quit == <span class="hljs-literal">false</span> )&#123; <br>                    <span class="hljs-keyword">while</span>( <span class="hljs-built_in">SDL_PollEvent</span>( &amp;e ) )&#123;<br>                         <span class="hljs-keyword">if</span>( e.type == SDL_QUIT ) quit = <span class="hljs-literal">true</span>;<br>                    &#125; <br>            &#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//Free resources and close SDL</span><br><span class="hljs-built_in">close</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码便是主函数调用，看到这里大家应该对如何把我们准备的图片显示到屏幕上还是懵的，看完这一段代码中心中的疑惑能够解开。跳过上面已经讨论过的内容，我们直接看<a href="/2024/01/05/SDL/Dictionary/SDL_BlitSurface/" title="SDL_BlitSurface">SDL_BlitSurface()</a>函数。 gScreenSurface之前我们已将其关联到了窗口，gHelloWorld则带着我们需要的图片，那如何将图片显示到窗口(屏幕)上来呢？我们直接将gHelloWorld的内容复制到gScreenSurface上即可，并且在复制完之后通过<a href="/2024/01/05/SDL/Dictionary/SDL_UpdateWindowSurface/" title="SDL_UpdateWindowSurface">SDL_UpdateWindowSurface()</a>更新窗口。构建SDL_Event e，并且不断轮询当前待处理的事件，当事件类型变为SDL_QUIT时退出循环，也就退出窗口。最后别忘释放资源和关闭SDL。</p>]]></content>
    
    
    <categories>
      
      <category>Game Development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-Day16</title>
    <link href="/2024/01/04/Algorithms/LeetCode/LeetCode-20240104/"/>
    <url>/2024/01/04/Algorithms/LeetCode/LeetCode-20240104/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="1-最大宽度坡"><a href="#1-最大宽度坡" class="headerlink" title="1. 最大宽度坡"></a>1. 最大宽度坡</h1><p>给定一个整数数组 A，坡是元组 (i, j)，其中  i &lt; j 且 A[i] &lt;&#x3D; A[j]。这样的坡的宽度为 j - i。</p><p>找出 A 中的坡的最大宽度，如果不存在，返回 0 。<br><img src="/img/Leetcode/%E6%9C%80%E5%A4%A7%E5%AE%BD%E5%BA%A6%E5%9D%A1.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxWidthRamp</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        stack&lt;<span class="hljs-type">int</span>&gt; st;<br>        <span class="hljs-type">int</span> start = nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br><br>        st.<span class="hljs-built_in">push</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[i]&lt;start)&#123;<br>                start = nums[i];<br>                st.<span class="hljs-built_in">push</span>(i);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>() &amp;&amp; nums[st.<span class="hljs-built_in">top</span>()]&lt;=nums[i])&#123;<br>                result = <span class="hljs-built_in">max</span>(result, i-st.<span class="hljs-built_in">top</span>());<br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//注意：使用动态规划会超时</span><br></code></pre></td></tr></table></figure><h1 id="2-最接近原点的K个点"><a href="#2-最接近原点的K个点" class="headerlink" title="2.  最接近原点的K个点"></a>2.  最接近原点的K个点</h1><p>给定一个数组 points ，其中 points[i] &#x3D; [xi, yi] 表示 X-Y 平面上的一个点，并且是一个整数 k ，返回离原点 (0,0) 最近的 k 个点。</p><p>这里，平面上两点之间的距离是 欧几里德距离（ √(x1 - x2)2 + (y1 - y2)2 ）。</p><p>你可以按 任何顺序 返回答案。除了点坐标的顺序之外，答案 确保 是 唯一 的。<br><img src="/img/Leetcode/%E6%9C%80%E6%8E%A5%E8%BF%91%E5%8E%9F%E7%82%B9%E7%9A%84K%E4%B8%AA%E7%82%B9.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">kClosest</span>(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; points, <span class="hljs-type">int</span> k) &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; result;<br>        map&lt;<span class="hljs-type">int</span>, vector&lt;<span class="hljs-type">int</span>&gt;&gt; point_list;<br>        <span class="hljs-type">int</span> n = points.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> summation = <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            point_list[<span class="hljs-built_in">pow</span>(points[i][<span class="hljs-number">0</span>], <span class="hljs-number">2</span>)+<span class="hljs-built_in">pow</span>(points[i][<span class="hljs-number">1</span>], <span class="hljs-number">2</span>)].<span class="hljs-built_in">push_back</span>(i);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it = point_list.<span class="hljs-built_in">begin</span>(); it!=point_list.<span class="hljs-built_in">end</span>(); it++)&#123;<br>            <span class="hljs-keyword">if</span>(k&lt;=<span class="hljs-number">0</span>)&#123;<span class="hljs-keyword">break</span>;&#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> element:it-&gt;second)&#123;<br>                result.<span class="hljs-built_in">push_back</span>(points[element]);<br>                k--;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>排序优化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">kClosest</span>(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; points, <span class="hljs-type">int</span> k) &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; result;<br>        <br>        <span class="hljs-built_in">sort</span>(points.<span class="hljs-built_in">begin</span>(), points.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; a, <span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; b)&#123;<span class="hljs-built_in">return</span> (<span class="hljs-built_in">pow</span>(a[<span class="hljs-number">0</span>],<span class="hljs-number">2</span>)+<span class="hljs-built_in">pow</span>(a[<span class="hljs-number">1</span>],<span class="hljs-number">2</span>)) &lt; (<span class="hljs-built_in">pow</span>(b[<span class="hljs-number">0</span>],<span class="hljs-number">2</span>)+<span class="hljs-built_in">pow</span>(b[<span class="hljs-number">1</span>],<span class="hljs-number">2</span>));&#125;);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;k; i++)&#123;<br>            result.<span class="hljs-built_in">push_back</span>(points[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="3-从链表中移除节点"><a href="#3-从链表中移除节点" class="headerlink" title="3. 从链表中移除节点"></a>3. 从链表中移除节点</h1><p>给你一个链表的头节点 head 。</p><p>移除每个右侧有一个更大数值的节点。</p><p>返回修改后链表的头节点 head 。<br><img src="/img/Leetcode/%E4%BB%8E%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%A7%BB%E9%99%A4%E8%8A%82%E7%82%B9.png"><br>递归</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">removeNodes</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">nullptr</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;&#125;<br><br>        head-&gt;next = <span class="hljs-built_in">removeNodes</span>(head-&gt;next);<br>        <span class="hljs-keyword">if</span>(head-&gt;next != <span class="hljs-literal">nullptr</span> &amp;&amp; head-&gt;val &lt; head-&gt;next-&gt;val)&#123;<br>            <span class="hljs-keyword">return</span> head -&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>单调栈</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">removeNodes</span><span class="hljs-params">(ListNode* head)</span> </span>&#123;<br>        stack&lt;ListNode*&gt; st;<br>        ListNode* dummy = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(INT_MAX, head);<br>        <br>        st.<span class="hljs-built_in">push</span>(dummy);<br>        <span class="hljs-keyword">while</span>(head != <span class="hljs-literal">nullptr</span>)&#123;<br>            <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>() &amp;&amp; st.<span class="hljs-built_in">top</span>() -&gt; val &lt; head-&gt;val)&#123;<br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            st.<span class="hljs-built_in">top</span>() -&gt; next = head;<br>            st.<span class="hljs-built_in">push</span>(head);<br>            head = head-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummy-&gt;next;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="4-设计一个文本编辑器"><a href="#4-设计一个文本编辑器" class="headerlink" title="4. 设计一个文本编辑器"></a>4. 设计一个文本编辑器</h1><p>请你设计一个带光标的文本编辑器，它可以实现以下功能：</p><ul><li>添加：在光标所在处添加文本。</li><li>删除：在光标所在处删除文本（模拟键盘的删除键）。</li><li>移动：将光标往左或者往右移动。<br>当删除文本时，只有光标左边的字符会被删除。光标会留在文本内，也就是说任意时候 0 &lt;&#x3D; cursor.position &lt;&#x3D; currentText.length 都成立。</li></ul><p>请你实现 TextEditor 类：</p><ul><li>TextEditor() 用空文本初始化对象。</li><li>void addText(string text) 将 text 添加到光标所在位置。添加完后光标在 text 的右边。</li><li>int deleteText(int k) 删除光标左边 k 个字符。返回实际删除的字符数目。</li><li>string cursorLeft(int k) 将光标向左移动 k 次。返回移动后光标左边 min(10, len) 个字符，其中 len 是光标左边的字符数目。</li><li>string cursorRight(int k) 将光标向右移动 k 次。返回移动后光标左边 min(10, len) 个字符，其中 len 是光标左边的字符数目。<br><img src="/img/Leetcode/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8.png"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TextEditor</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    list&lt;<span class="hljs-type">char</span>&gt; l;<br>    list&lt;<span class="hljs-type">char</span>&gt;::iterator cur = l.<span class="hljs-built_in">begin</span>();<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">TextEditor</span>() &#123;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addText</span><span class="hljs-params">(string text)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> c:text)&#123;<br>            l.<span class="hljs-built_in">insert</span>(cur, c);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">deleteText</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-type">int</span> k0 = k;<br>        <span class="hljs-keyword">for</span>(;k &amp;&amp; cur != l.<span class="hljs-built_in">begin</span>(); k--)&#123;<br>            l.<span class="hljs-built_in">erase</span>(<span class="hljs-built_in">prev</span>(cur));<br>        &#125;<br>        <span class="hljs-keyword">return</span> k0-k;<br>    &#125;<br><br>    <span class="hljs-function">string <span class="hljs-title">Text</span><span class="hljs-params">()</span></span>&#123;<br>        string str = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">auto</span> it = cur;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">10</span>; k&amp;&amp;it != l.<span class="hljs-built_in">begin</span>(); k--)&#123;<br>            str += *--it;<br>        &#125;<br>        <span class="hljs-built_in">reverse</span>(str.<span class="hljs-built_in">begin</span>(),str.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">return</span> str;<br>    &#125;<br>    <br>    <span class="hljs-function">string <span class="hljs-title">cursorLeft</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(;k &amp;&amp; cur != l.<span class="hljs-built_in">begin</span>(); --k)&#123;<br>            --cur;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Text</span>();<br>    &#125;<br>    <br>    <span class="hljs-function">string <span class="hljs-title">cursorRight</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(;k &amp;&amp; cur != l.<span class="hljs-built_in">end</span>(); --k)&#123;<br>            ++cur;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Text</span>();<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your TextEditor object will be instantiated and called as such:</span><br><span class="hljs-comment"> * TextEditor* obj = new TextEditor();</span><br><span class="hljs-comment"> * obj-&gt;addText(text);</span><br><span class="hljs-comment"> * int param_2 = obj-&gt;deleteText(k);</span><br><span class="hljs-comment"> * string param_3 = obj-&gt;cursorLeft(k);</span><br><span class="hljs-comment"> * string param_4 = obj-&gt;cursorRight(k);</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="5-上下翻转二叉树"><a href="#5-上下翻转二叉树" class="headerlink" title="5. 上下翻转二叉树"></a>5. 上下翻转二叉树</h1><p>给你一个二叉树的根节点 root ，请你将此二叉树上下翻转，并返回新的根节点。</p><p>你可以按下面的步骤翻转一棵二叉树：</p><ol><li>原来的左子节点变成新的根节点</li><li>原来的根节点变成新的右子节点</li><li>原来的右子节点变成新的左子节点<br><img src="/img/Leetcode/%E4%B8%8A%E4%B8%8B%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91.png"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-type">int</span> index = <span class="hljs-number">1</span>;<br>    TreeNode* ans;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">upsideDownBinaryTree</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">nullptr</span> || root-&gt;left == <span class="hljs-literal">nullptr</span>)&#123;<span class="hljs-keyword">return</span> root;&#125;<br>        TreeNode* tmp = <span class="hljs-built_in">cycle</span>(root);<br><br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>    <span class="hljs-function">TreeNode* <span class="hljs-title">cycle</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">nullptr</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;&#125;<br>        TreeNode* leftnode = <span class="hljs-literal">nullptr</span>;<br>        TreeNode* rightnode = <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-keyword">if</span>(root -&gt; left)&#123;leftnode = <span class="hljs-built_in">cycle</span>(root -&gt; left);&#125;<br>        <span class="hljs-keyword">if</span>(root -&gt; right)&#123;rightnode = <span class="hljs-built_in">cycle</span>(root -&gt; right);&#125;<br>        <br>        <span class="hljs-keyword">if</span>(leftnode == <span class="hljs-literal">nullptr</span> &amp;&amp; rightnode == <span class="hljs-literal">nullptr</span>)&#123;<span class="hljs-keyword">return</span> root;&#125;<br>        root -&gt; left = <span class="hljs-literal">nullptr</span>;<br>        root -&gt; right = <span class="hljs-literal">nullptr</span>;<br>        leftnode -&gt;left = rightnode;<br>        leftnode -&gt;right = root;<br>        <span class="hljs-keyword">if</span>(index)&#123;ans = leftnode;&#125;<br>        index = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ol><h1 id="6-经营摩天轮的最大利润"><a href="#6-经营摩天轮的最大利润" class="headerlink" title="6. 经营摩天轮的最大利润"></a>6. 经营摩天轮的最大利润</h1><p>你正在经营一座摩天轮，该摩天轮共有 4 个座舱 ，每个座舱 最多可以容纳 4 位游客 。你可以 逆时针 轮转座舱，但每次轮转都需要支付一定的运行成本 runningCost 。摩天轮每次轮转都恰好转动 1 &#x2F; 4 周。</p><p>给你一个长度为 n 的数组 customers ， customers[i] 是在第 i 次轮转（下标从 0 开始）之前到达的新游客的数量。这也意味着你必须在新游客到来前轮转 i 次。每位游客在登上离地面最近的座舱前都会支付登舱成本 boardingCost ，一旦该座舱再次抵达地面，他们就会离开座舱结束游玩。</p><p>你可以随时停下摩天轮，即便是 在服务所有游客之前 。如果你决定停止运营摩天轮，为了保证所有游客安全着陆，将免费进行所有后续轮转 。注意，如果有超过 4 位游客在等摩天轮，那么只有 4 位游客可以登上摩天轮，其余的需要等待 下一次轮转 。</p><p>返回最大化利润所需执行的 最小轮转次数 。 如果不存在利润为正的方案，则返回 -1 。<br><img src="/img/Leetcode/%E7%BB%8F%E8%90%A5%E6%91%A9%E5%A4%A9%E8%BD%AE%E7%9A%84%E6%9C%80%E5%A4%A7%E5%88%A9%E6%B6%A6.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minOperationsMaxProfit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; customers, <span class="hljs-type">int</span> boardingCost, <span class="hljs-type">int</span> runningCost)</span> </span>&#123;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> n = customers.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">presum</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span></span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(n+<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-type">int</span> index = <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> revenue = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> remain = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br><br>        presum[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            presum[i+<span class="hljs-number">1</span>] = presum[i] + customers[i];<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)&#123;<br>            dp[i] = <span class="hljs-built_in">min</span>(dp[i<span class="hljs-number">-1</span>]+<span class="hljs-number">4</span>, presum[i]);<br>        &#125;<br>        <span class="hljs-keyword">while</span>(index*<span class="hljs-number">4</span>&lt;=presum[n]-dp[n])&#123;<br>            dp.<span class="hljs-built_in">push_back</span>(dp.<span class="hljs-built_in">back</span>()+<span class="hljs-number">4</span>);<br>            index++;<br>        &#125;<br>        dp.<span class="hljs-built_in">push_back</span>(presum[n]);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i&lt;dp.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            revenue = dp[i]*boardingCost - i*runningCost;<br>            <span class="hljs-keyword">if</span>(revenue &gt; res)&#123;<br>                res = revenue;<br>                result = i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>优化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minOperationsMaxProfit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; customers, <span class="hljs-type">int</span> boardingCost, <span class="hljs-type">int</span> runningCost)</span> </span>&#123;<br>        <span class="hljs-type">int</span> wait = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> up = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> revenue = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> max_res = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span>(wait || index&lt;customers.<span class="hljs-built_in">size</span>())&#123;<br>            wait += index&lt;customers.<span class="hljs-built_in">size</span>()? customers[index]:<span class="hljs-number">0</span>;<br>            up = <span class="hljs-built_in">min</span>(<span class="hljs-number">4</span>, wait);<br>            wait -= up;<br>            index++;<br>            revenue += up*boardingCost - runningCost;<br>            <span class="hljs-keyword">if</span>(revenue &gt; max_res)&#123;<br>                max_res = revenue;<br>                result = index;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="7-统计重复个数"><a href="#7-统计重复个数" class="headerlink" title="7. 统计重复个数"></a>7. 统计重复个数</h1><p>定义 str &#x3D; [s, n] 表示 str 由 n 个字符串 s 连接构成。</p><ul><li><p>例如，str &#x3D;&#x3D; [“abc”, 3] &#x3D;&#x3D;”abcabcabc” 。<br>如果可以从 s2 中删除某些字符使其变为 s1，则称字符串 s1 可以从字符串 s2 获得。</p></li><li><p>例如，根据定义，s1 &#x3D; “abc” 可以从 s2 &#x3D; “abdbec” 获得，仅需要删除加粗且用斜体标识的字符。<br>现在给你两个字符串 s1 和 s2 和两个整数 n1 和 n2 。由此构造得到两个字符串，其中 str1 &#x3D; [s1, n1]、str2 &#x3D; [s2, n2] 。</p></li></ul><p>请你找出一个最大整数 m ，以满足 str &#x3D; [str2, m] 可以从 str1 获得。<br><img src="/img/Leetcode/%E7%BB%9F%E8%AE%A1%E9%87%8D%E5%A4%8D%E4%B8%AA%E6%95%B0.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getMaxRepetitions</span><span class="hljs-params">(string s1, <span class="hljs-type">int</span> n1, string s2, <span class="hljs-type">int</span> n2)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n_s1 = s1.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> n_s2 = s2.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        vector&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt; dp;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;n_s2; i++)&#123;<br>            <span class="hljs-type">int</span> j = i;<br>            <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k&lt;n_s1; k++)&#123;<br>                <span class="hljs-keyword">if</span>(s1[k] == s2[j])&#123;<br>                    ++j;<br>                    <span class="hljs-keyword">if</span>(j == n_s2)&#123;<br>                        cnt++;<br>                        j = <span class="hljs-number">0</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            dp.<span class="hljs-built_in">push_back</span>(&#123;cnt,j&#125;);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; n1&gt;<span class="hljs-number">0</span>; n1--)&#123;<br>            result += dp[j].first;<br>            j = dp[j].second;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result/n2;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="8-找出出现至少三次的最长特殊子字符串II"><a href="#8-找出出现至少三次的最长特殊子字符串II" class="headerlink" title="8. 找出出现至少三次的最长特殊子字符串II"></a>8. 找出出现至少三次的最长特殊子字符串II</h1><p>给你一个仅由小写英文字母组成的字符串 s 。</p><p>如果一个字符串仅由单一字符组成，那么它被称为 特殊 字符串。例如，字符串 “abc” 不是特殊字符串，而字符串 “ddd”、”zz” 和 “f” 是特殊字符串。</p><p>返回在 s 中出现 至少三次 的 最长特殊子字符串 的长度，如果不存在出现至少三次的特殊子字符串，则返回 -1 。</p><p>子字符串 是字符串中的一个连续 非空 字符序列。<br><img src="/img/Leetcode/%E6%89%BE%E5%87%BA%E5%87%BA%E7%8E%B0%E8%87%B3%E5%B0%91%E4%B8%89%E6%AC%A1%E7%9A%84%E6%9C%80%E9%95%BF%E7%89%B9%E6%AE%8A%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2II.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maximumLength</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">alpha_list</span>(<span class="hljs-number">26</span>);<br>        <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            cnt++;<br>            <span class="hljs-keyword">if</span>(i+<span class="hljs-number">1</span> == n || s[i] != s[i+<span class="hljs-number">1</span>])&#123;<br>                alpha_list[s[i]-<span class="hljs-string">&#x27;a&#x27;</span>].<span class="hljs-built_in">push_back</span>(cnt);<br>                cnt = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;vec: alpha_list)&#123;<br>            <span class="hljs-keyword">if</span>(vec.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>)&#123;<span class="hljs-keyword">continue</span>;&#125;<br>            <span class="hljs-built_in">sort</span>(vec.<span class="hljs-built_in">begin</span>(), vec.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;());<br>            vec.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<br>            vec.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<br>            result = <span class="hljs-built_in">max</span>(&#123;vec[<span class="hljs-number">0</span>]<span class="hljs-number">-2</span>,<span class="hljs-built_in">min</span>(vec[<span class="hljs-number">0</span>]<span class="hljs-number">-1</span>, vec[<span class="hljs-number">1</span>]), vec[<span class="hljs-number">2</span>], result&#125;);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result? result:<span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="9-被列覆盖的最多行数"><a href="#9-被列覆盖的最多行数" class="headerlink" title="9. 被列覆盖的最多行数"></a>9. 被列覆盖的最多行数</h1><p>给你一个下标从 0 开始、大小为 m x n 的二进制矩阵 matrix ；另给你一个整数 numSelect，表示你必须从 matrix 中选择的 不同 列的数量。</p><p>如果一行中所有的 1 都被你选中的列所覆盖，则认为这一行被 覆盖 了。</p><p>形式上，假设 s &#x3D; {c1, c2, …., cnumSelect} 是你选择的列的集合。对于矩阵中的某一行 row ，如果满足下述条件，则认为这一行被集合 s 覆盖：</p><ul><li>对于满足 matrix[row][col] &#x3D;&#x3D; 1 的每个单元格 matrix[row][col]（0 &lt;&#x3D; col &lt;&#x3D; n - 1），col 均存在于 s 中，或者</li><li>row 中 不存在 值为 1 的单元格。<br>你需要从矩阵中选出 numSelect 个列，使集合覆盖的行数最大化。</li></ul><p>返回一个整数，表示可以由 numSelect 列构成的集合 覆盖 的 最大行数 。<br><img src="/img/Leetcode/%E8%A2%AB%E5%88%97%E8%A6%86%E7%9B%96%E7%9A%84%E6%9C%80%E5%A4%9A%E8%A1%8C%E6%95%B0.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maximumRows</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; matrix, <span class="hljs-type">int</span> numSelect)</span> </span>&#123;<br>        <span class="hljs-type">int</span> row = matrix.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> col = matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">row_binary</span><span class="hljs-params">(row)</span></span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;row; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;col; j++)&#123;<br>                <span class="hljs-keyword">if</span>(matrix[i][j])&#123;<br>                    row_binary[i] |= <span class="hljs-number">1</span>&lt;&lt;j;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> mask=<span class="hljs-number">1</span>; mask &lt; <span class="hljs-number">1</span>&lt;&lt;col; mask++)&#123;<br>            <span class="hljs-keyword">if</span>(__builtin_popcount(mask) != numSelect)&#123;<span class="hljs-keyword">continue</span>;&#125;<br>            <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> vec:row_binary)&#123;<br>                <span class="hljs-keyword">if</span>((vec &amp; mask) == vec)&#123;cnt++;&#125;<br>            &#125;<br>            result = <span class="hljs-built_in">max</span>(result, cnt);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>@版权归Leetcode所有</p>]]></content>
    
    
    <categories>
      
      <category>Daily Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1.Start using SDL in Windows</title>
    <link href="/2024/01/02/SDL/1.SDL_Start%20using%20SDL%20in%20Windows/"/>
    <url>/2024/01/02/SDL/1.SDL_Start%20using%20SDL%20in%20Windows/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="在介绍SDL环境配置之前先放一些笔者个人觉得有用的链接，有需要的读者自取"><a href="#在介绍SDL环境配置之前先放一些笔者个人觉得有用的链接，有需要的读者自取" class="headerlink" title="在介绍SDL环境配置之前先放一些笔者个人觉得有用的链接，有需要的读者自取"></a>在介绍SDL环境配置之前先放一些笔者个人觉得有用的链接，有需要的读者自取</h2><p>SDL官网地址：<a href="https://www.libsdl.org/">Click to jump</a><br>SDL2下载地址：<a href="https://github.com/libsdl-org/SDL_image/releases">Click to jump</a><br>Lazy Foo’ Productions: <a href="https://lazyfoo.net/tutorials/SDL/">Click to jump</a><br>CodeBlocks下载地址：<a href="https://www.codeblocks.org/downloads/">Click to jump</a><br>MinGw下载地址：<a href="https://sourceforge.net/projects/mingw-w64/files/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/">Click to jump</a></p><h2 id="配置SDL"><a href="#配置SDL" class="headerlink" title="配置SDL"></a>配置SDL</h2><ol><li>   下载SDL头文件和二进制文件<br>下载链接：<a href="https://github.com/libsdl-org/SDL/releases/tag/release-2.28.5">Click to jump</a><br><img src="/img/SDL/SDL2_downloading_github.png"></li></ol><p>将文件下载下来并解压得到下列文件。这里需要使用的有两个文件夹，一个是i686-w64-mingw32另一个是x86_64-w64-mingw32.这其中第一个代表32bit binaries而后者为64bit binaries。为了最大化的保证兼容性，我们使用32bit的。不论你主机是32位的还是64位的都可以得到支持。剪切文件夹，笔者将其复制到C盘并为了方便识别加以重命名，最后得到路径C:\mingw_dev_lib。<br><img src="/img/SDL/SDL2_downloading_filelist.png"></p><ol start="2"><li><p>在CB中新建一个project，笔者在这里将其命名位SDL2<br><img src="/img/SDL/creat_new_project_in_CB.png"></p></li><li><p>添加complier directory<br>首先在project list中右击新建的project进入project&#x2F;targets options<br><img src="/img/SDL/CB_project_lists.png"><br>点击project&#x2F;targets options进入oject’s build options<br><img src="/img/SDL/CB_project_property.png"><br>进入C:\mingw_dev_lib（详细步骤见（1））其中的include&#x2F;SDL2,复制当前的文件地址拷贝入下列窗口中。<br>注意：在拷贝复制前依次点击search directions-&gt;complier, 确保输入在正确的空白框。<br>左侧框中一定要选择SDL2确保设置能同时作用到Debug和Release。<br>这一步如果出错，在示例代码build时会报 can’t find SDL.h的错误。<br><img src="/img/SDL/CB_search_directories_complier.png"></p></li><li><p>添加linker directory<br>进入C:\mingw_dev_lib（详细步骤见（1））其中的lib,复制当前的文件地址并拷入下列窗口中。<br>注意：在拷贝复制前依次点击search directions-&gt;linker, 确保输入在正确的空白框。<br>左侧框中一定要选择SDL2确保设置能同时作用到Debug和Release。<br>这一步如果出错，在示例代码build时会报 can’t find -ISDL2 or -ISDL2main的错误。<br><img src="/img/SDL/CB_linker_directory.png"></p></li><li><p>添加other linker options<br>点击Linker settings,在other linker options中输入-lmingw32 -lSDL2main -lSDL2<br><img src="/img/SDL/CB_other_linker.png"></p></li><li><p>将build type under build targets 改为Console application<br>这里选择console application主要是为了看到console output，如果读者不想看到可以选择GUI application.<br><img src="/img/SDL/CB_build_type.png"></p></li><li><p>setup the dll file<br>进入C:\mingw_dev_lib\bin（详细步骤见（1））拷贝SDL2.dll至CB项目目录下</p></li><li><p>测试代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;SDL.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    SDL_Window *window;<br><br>    <span class="hljs-built_in">SDL_Init</span>(SDL_INIT_VIDEO);<br><br>    window = <span class="hljs-built_in">SDL_CreateWindow</span>(<br>        <span class="hljs-string">&quot;Test&quot;</span>,<br>        SDL_WINDOWPOS_UNDEFINED,<br>        SDL_WINDOWPOS_UNDEFINED,<br>        <span class="hljs-number">640</span>,<br>        <span class="hljs-number">480</span>,<br>        SDL_WINDOW_SHOWN<br>    );<br><br>    <span class="hljs-built_in">SDL_Delay</span>(<span class="hljs-number">3000</span>);<br><br>    <span class="hljs-built_in">SDL_DestroyWindow</span>(window);<br>    <span class="hljs-built_in">SDL_Quit</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>其他注意事项<br>笔者在操作的时候遇到一个大坑，本着前人踩坑，后人避坑的想法，笔者在这里帮大家总结经验。由于在步骤1）的时候选择的是支持32bit的，这对于操作系统的位数确实没有限制，但是对CB的MinGW确实有版本的限制。通过在指定目录下运行gcc -v可以查看当前CB的MinGw的版本。请确保自己CB的MinGw版本是i686开头的，否则会报can’t find -ISDL2 or -ISDL2main的错误。<br><img src="/img/SDL/CB_gcc-v.png"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Game Development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-Day15</title>
    <link href="/2023/12/31/Algorithms/LeetCode/LeetCode-20231231/"/>
    <url>/2023/12/31/Algorithms/LeetCode/LeetCode-20231231/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="1-商品折扣后的最终价格"><a href="#1-商品折扣后的最终价格" class="headerlink" title="1. 商品折扣后的最终价格"></a>1. 商品折扣后的最终价格</h1><p>给你一个数组 prices ，其中 prices[i] 是商店里第 i 件商品的价格。</p><p>商店里正在进行促销活动，如果你要买第 i 件商品，那么你可以得到与 prices[j] 相等的折扣，其中 j 是满足 j &gt; i 且 prices[j] &lt;&#x3D; prices[i] 的 最小下标 ，如果没有满足条件的 j ，你将没有任何折扣。</p><p>请你返回一个数组，数组中第 i 个元素是折扣后你购买商品 i 最终需要支付的价格。<br><img src="/img/Leetcode/%E5%95%86%E5%93%81%E6%8A%98%E6%89%A3%E5%90%8E%E7%9A%84%E6%9C%80%E7%BB%88%E4%BB%B7%E6%A0%BC.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">finalPrices</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;prices)</span> </span>&#123;<br>        stack&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; st;<br>        <span class="hljs-type">int</span> n = prices.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">result</span><span class="hljs-params">(n)</span></span>;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>() &amp;&amp; prices[i]&lt;=st.<span class="hljs-built_in">top</span>()[<span class="hljs-number">1</span>])&#123;<br>                <span class="hljs-keyword">auto</span> tmp = st.<span class="hljs-built_in">top</span>();<br>                result[tmp[<span class="hljs-number">0</span>]] = tmp[<span class="hljs-number">1</span>]-prices[i];<br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            st.<span class="hljs-built_in">push</span>(&#123;i, prices[i]&#125;);<br>        &#125;<br>        <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>())&#123;<br>            <span class="hljs-keyword">auto</span> tmp = st.<span class="hljs-built_in">top</span>();<br>            result[tmp[<span class="hljs-number">0</span>]] = tmp[<span class="hljs-number">1</span>];<br>            st.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>单调栈优化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">finalPrices</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;prices)</span> </span>&#123;<br>        stack&lt;<span class="hljs-type">int</span>&gt; st;<br>        <span class="hljs-type">int</span> n = prices.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">result</span><span class="hljs-params">(n)</span></span>;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>() &amp;&amp; st.<span class="hljs-built_in">top</span>()&gt;prices[i])&#123;<br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            result[i] = st.<span class="hljs-built_in">empty</span>()?prices[i]:prices[i]-st.<span class="hljs-built_in">top</span>();<br>            st.<span class="hljs-built_in">push</span>(prices[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="2-删除给定值的叶子节点"><a href="#2-删除给定值的叶子节点" class="headerlink" title="2.  删除给定值的叶子节点"></a>2.  删除给定值的叶子节点</h1><p>给你一棵以 root 为根的二叉树和一个整数 target ，请你删除所有值为 target 的 叶子节点 。</p><p>注意，一旦删除值为 target 的叶子节点，它的父节点就可能变成叶子节点；如果新叶子节点的值恰好也是 target ，那么这个节点也应该被删除。</p><p>也就是说，你需要重复此过程直到不能继续删除。<br><img src="/img/Leetcode/%E5%88%A0%E9%99%A4%E7%BB%99%E5%AE%9A%E5%80%BC%E7%9A%84%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">removeLeafNodes</span><span class="hljs-params">(TreeNode* root, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">nullptr</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;&#125;<br>        TreeNode* leftnode = <span class="hljs-built_in">removeLeafNodes</span>(root-&gt;left, target);<br>        TreeNode* rightnode = <span class="hljs-built_in">removeLeafNodes</span>(root-&gt;right, target);<br>        root-&gt;left = leftnode;<br>        root-&gt;right = rightnode;<br>        <span class="hljs-keyword">if</span>(leftnode == <span class="hljs-literal">nullptr</span> &amp;&amp; rightnode == <span class="hljs-literal">nullptr</span> &amp;&amp; root-&gt;val == target)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="3-统计放置房子的方式数"><a href="#3-统计放置房子的方式数" class="headerlink" title="3. 统计放置房子的方式数"></a>3. 统计放置房子的方式数</h1><p>一条街道上共有 n * 2 个 地块 ，街道的两侧各有 n 个地块。每一边的地块都按从 1 到 n 编号。每个地块上都可以放置一所房子。</p><p>现要求街道同一侧不能存在两所房子相邻的情况，请你计算并返回放置房屋的方式数目。由于答案可能很大，需要对 109 + 7 取余后再返回。</p><p>注意，如果一所房子放置在这条街某一侧上的第 i 个地块，不影响在另一侧的第 i 个地块放置房子。<br><img src="/img/Leetcode/%E7%BB%9F%E8%AE%A1%E6%94%BE%E7%BD%AE%E6%88%BF%E5%AD%90%E7%9A%84%E6%96%B9%E5%BC%8F%E6%95%B0.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-type">int</span> MOD = <span class="hljs-number">7</span>+<span class="hljs-number">1e9</span>;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">countHousePlacements</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(n+<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)</span></span>;<br>        dp[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i&lt;=n; i++)&#123;<br>            dp[i] = (dp[i<span class="hljs-number">-1</span>]+dp[i<span class="hljs-number">-2</span>])%MOD;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)dp[n]*dp[n]%MOD;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="3-统计最高分的节点数目"><a href="#3-统计最高分的节点数目" class="headerlink" title="3. 统计最高分的节点数目"></a>3. 统计最高分的节点数目</h1><p>给你一棵根节点为 0 的 二叉树 ，它总共有 n 个节点，节点编号为 0 到 n - 1 。同时给你一个下标从 0 开始的整数数组 parents 表示这棵树，其中 parents[i] 是节点 i 的父节点。由于节点 0 是根，所以 parents[0] &#x3D;&#x3D; -1 。</p><p>一个子树的 大小 为这个子树内节点的数目。每个节点都有一个与之关联的 分数 。求出某个节点分数的方法是，将这个节点和与它相连的边全部 删除 ，剩余部分是若干个 非空 子树，这个节点的 分数 为所有这些子树 大小的乘积 。</p><p>请你返回有 最高得分 节点的 数目 。<br><img src="/img/Leetcode/%E7%BB%9F%E8%AE%A1%E6%9C%80%E9%AB%98%E5%88%86%E7%9A%84%E8%8A%82%E7%82%B9%E6%95%B0%E7%9B%AE.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">countHighestScoreNodes</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; parents)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = parents.<span class="hljs-built_in">size</span>();<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">g</span>(n);<br>        <span class="hljs-type">long</span> best_result = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;n; i++)&#123;<br>            g[parents[i]].<span class="hljs-built_in">push_back</span>(i);<br>        &#125;<br><br>        function&lt;<span class="hljs-type">int</span>(<span class="hljs-type">int</span>)&gt; treenum = [&amp;](<span class="hljs-type">int</span> num)&#123;<br>            <span class="hljs-type">long</span> result = <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><br><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> child:g[num])&#123;<br>                <span class="hljs-type">int</span> sub_result = <span class="hljs-built_in">treenum</span>(child);<br>                result *= sub_result;<br>                cnt += sub_result;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(num)&#123;result *= n - cnt - <span class="hljs-number">1</span>;&#125;<br><br>            <span class="hljs-keyword">if</span>(result &gt; best_result)&#123;<br>                ans = <span class="hljs-number">1</span>;<br>                best_result = result;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(result == best_result)&#123;ans++;&#125;<br><br>            <span class="hljs-keyword">return</span> cnt + <span class="hljs-number">1</span>;<br>        &#125;;<br>        <span class="hljs-type">int</span> tmp =  <span class="hljs-built_in">treenum</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>@版权归Leetcode所有</p>]]></content>
    
    
    <categories>
      
      <category>Daily Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Inside the C++ Object Model-3</title>
    <link href="/2023/12/31/Inside%20the%20C++%20Object%20Model/Inside%20the%20C++%20Object%20Model-3/"/>
    <url>/2023/12/31/Inside%20the%20C++%20Object%20Model/Inside%20the%20C++%20Object%20Model-3/</url>
    
    <content type="html"><![CDATA[<h1 id="Default-Constructor的构造操作"><a href="#Default-Constructor的构造操作" class="headerlink" title="Default Constructor的构造操作"></a>Default Constructor的构造操作</h1><span id="more"></span><p>生成nontrivial default constructor的4种情况：</p><h2 id="1-带有Default-Constructor的member-class-object"><a href="#1-带有Default-Constructor的member-class-object" class="headerlink" title="1.带有Default Constructor的member class object"></a>1.带有Default Constructor的member class object</h2><p>示例代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> &#123;<br>    <span class="hljs-keyword">public</span>: <br>        <span class="hljs-built_in">Foo</span>()<br>        <span class="hljs-built_in">Foo</span>(<span class="hljs-type">int</span>) <br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bar</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    Foo foo;<br>    <span class="hljs-type">char</span> *str;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">foo_bar</span><span class="hljs-params">()</span></span>&#123;<br>    Bar bar;<br>    <span class="hljs-keyword">if</span>(str)&#123;&#125;...<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，由于class Foo default constructor的存在，编译器为class Bar合成了一个default constructor。编译器合成Bear default constructor的目的是来调用已经定义的Foo default constructor来处理class Bar中内含的Foo foo，因为这是编译器自身的需要。至于class foo中的str并没有被初始化，因为str的使用是程序员提出的需求，那自然str的初始化是程序员该负责的事情。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> </span><br><span class="hljs-function"><span class="hljs-title">Bar::Bar</span><span class="hljs-params">()</span></span>&#123;<br>    foo.Foo::<span class="hljs-built_in">Foo</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>在C++不同的编译模块中，为了避免合成多个default constructor，可以通过把default constructor, copy constructor, destructor, assignment copy operator都已inline的方式完成。如果函数过于复杂，就合成一个explicit non-inline static实例。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Bar::<span class="hljs-built_in">Bar</span>()&#123;str = <span class="hljs-number">0</span>;&#125;<br></code></pre></td></tr></table></figure><p>还记得上文提到的str初始化问题吗，假设现在你在程序中加入了上述代码，细心的读者可能会提出疑问。编译器对于两个不同的default constructor采取什么行动呢？对于Class A, 如果包含一个或一个以上的class object member，Class A的每一个constructor必须调用member class的default constructor，其调用方式是通过扩张已经存在的constructors，在其中安插代码来完成。结合上面的例子我们能得到下面这个扩充后的constructor。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Bar::<span class="hljs-built_in">Bar</span>()&#123;<br>    foo.Foo::<span class="hljs-built_in">Foo</span>();<br>    str = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>那如果Class A中内含了多个class object member，其都需要constructor的初始化操作，那C++编译器会为每一个constructor以class object member 声明顺序来安插每一个class object member 所对应的default constructor代码。并且这些代码会安放在explicit user code 之前。通过下面的示例代码，读者能有一个更为直观的理解。<br>示例代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//Class定义：</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Snow_White</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    Dopey dopey;<br>    Sneezy sneezy;<br>    Bashful bashful;<br>    <br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> mumble;<br>&#125;<br><span class="hljs-comment">//编辑器中的default constructor:</span><br>Snow_White::<span class="hljs-built_in">Snow_White</span>()&#123;<br>    mumble = <span class="hljs-number">2048</span>;<br>&#125;<br><span class="hljs-comment">//编辑器扩张后的default constructor:</span><br>Snow_White::<span class="hljs-built_in">Snow_White</span>()&#123;<br>    dopey.Dopey::<span class="hljs-built_in">Dopey</span>();<br>    sneezy.Sneezy::<span class="hljs-built_in">Sneezy</span>();<br>    bashful.Bashful::<span class="hljs-built_in">Bashful</span>();<br>    <br>    mumble = <span class="hljs-number">2048</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-带有Default-Constructor的Base-Class"><a href="#2-带有Default-Constructor的Base-Class" class="headerlink" title="2.带有Default Constructor的Base Class"></a>2.带有Default Constructor的Base Class</h2><p>这里可以分为两种情况：对于本身没有任何constructors的derived class来说，如果base class含有default constructor。那就会根据声明顺序调用上一层base class的default constructor。第二种情况是对于derived class中含有constructors但是不包含base class的default constructor。Derived class面对这种情况不会合成新的default constructor。如果derived class中还存在像string这样同样带有default constructor的class object member。那些default constructor同样会被加入到derived class现有的constructor之中，只不过加入的顺序在base class constructor之后。</p><h2 id="3-带有一个Virtual-Function-的Class"><a href="#3-带有一个Virtual-Function-的Class" class="headerlink" title="3.带有一个Virtual Function 的Class"></a>3.带有一个Virtual Function 的Class</h2><p>下面两种情况会合成出default constructor：<br>1.Class 声明或继承virtual function<br>2.Class 派生自一个继承串链，其中存在virtual base classes<br>示例代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Widget</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">flip</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">flip</span><span class="hljs-params">(<span class="hljs-type">const</span> Widget&amp; widget)</span></span>&#123;<br>    widget.<span class="hljs-built_in">flip</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span>&#123;<br>    Bell b;<br>    Whistle w;<br>    <span class="hljs-built_in">flip</span>(b);<br>    <span class="hljs-built_in">flip</span>(w);<br>&#125;<br></code></pre></td></tr></table></figure><p>对于上述的代码，Widget为Bell和Whistle的父类。编译器会干两件事情：生成一个virtual function table存放class中virtual function地址。对于每个class object生成vptr来指示virtual function table的地址。<br>对于这个例子中的Bell class object b和Whistle class object w，编译器会通过default constructor为其各的vptr设定初值。如果class object本身存在constructor，编译器则会直接在其中安插代码确保vptr的正确初始化。</p><h2 id="4-带有一个Virtual-Function-的Class"><a href="#4-带有一个Virtual-Function-的Class" class="headerlink" title="4.带有一个Virtual Function 的Class"></a>4.带有一个Virtual Function 的Class</h2>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Inside the C++ Object Model-2</title>
    <link href="/2023/12/31/Inside%20the%20C++%20Object%20Model/Inside%20the%20C++%20Object%20Model-2/"/>
    <url>/2023/12/31/Inside%20the%20C++%20Object%20Model/Inside%20the%20C++%20Object%20Model-2/</url>
    
    <content type="html"><![CDATA[<h1 id="关于C-对象"><a href="#关于C-对象" class="headerlink" title="关于C++对象"></a>关于C++对象</h1><span id="more"></span><ol><li>   一个class object需要多少内存？</li></ol><ul><li>Class object中的nonstatic data member的大小总和</li><li>由于alignment的需求而填补的空间</li><li>为了支持virtual而产生的额外空间</li></ul><p>示例代码及object和pointer内存布局：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ZooAnimal</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">ZooAnimal</span>();<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">ZooAnimal</span>();<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">rotate</span><span class="hljs-params">()</span></span>;<br>    <br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-type">int</span> loc;<br>    string name;<br>&#125;;<br><br><span class="hljs-function">ZooAnimal <span class="hljs-title">za</span><span class="hljs-params">(<span class="hljs-string">&quot;Zoey&quot;</span>)</span></span>;<br>ZooAnimal *pza = &amp;za;<br></code></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%B4%A2C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/%E5%85%B3%E4%BA%8E%E5%AF%B9%E8%B1%A1_classobject%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.png"><br>在这个例子中由于使用的是32位机器，所以int类型位4bytes。 而string由两部分组成：4-byte字符指针和字符串长度整数，加起来一共8bytes。最后是vptr指针用来支持virtual。说到指针，读者可能会疑惑对于指向不同类型的指针（如指向整数的指针和指向class的指针）之间会有什么区别。对于指针来说没有什么不同之处，无论是在指针表示法还是在指针内容本身上面。其不同在于根据指针内容所寻址出来的object类型上面，编译器会根据所指定的指针类型来解释通过寻址得到的object的类型。也正是由于这个原因，对于void的类型指针我们无法操作它所指向的object，原因在于我们压根没有告诉编译器指针所指向的类型，更无从谈起对object进行相应的操作。</p><h2 id="单继承"><a href="#单继承" class="headerlink" title="单继承"></a>单继承</h2><p>示例代码及object和pointer内存布局：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ZooAnimal</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">ZooAnimal</span>();<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">ZooAnimal</span>();<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">rotate</span><span class="hljs-params">()</span></span>;<br>    <br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-type">int</span> loc;<br>    string name;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bear</span>: <span class="hljs-keyword">public</span> ZooAnimal&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Bear</span>();<br>    ~<span class="hljs-built_in">Bear</span>();<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rotate</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">dance</span><span class="hljs-params">()</span></span>;<br>    <br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Dances</span>&#123;...&#125;;<br>    Dances dances_known;<br>    <span class="hljs-type">int</span> cell_block;<br>&#125;;<br><br><span class="hljs-function">Bear <span class="hljs-title">b</span><span class="hljs-params">(<span class="hljs-string">&quot;Yogi&quot;</span>)</span></span>;<br>Bear *pb = &amp;b;<br>Bear &amp;rb = *pb;<br></code></pre></td></tr></table></figure><p><img src="/img/%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%B4%A2C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/%E5%85%B3%E4%BA%8E%E5%AF%B9%E8%B1%A1_derivedclassobject%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.png"><br>我们可以画出上述布局图，其中圆圈内的数字表示所占byte数，灰色部分为class Bear相对于class ZooAnimal多出来的部分，但这只是相较于ZooAnimal多出来的一部分，剩下的在虚函数表中。结合我们之前在C++对象模型中学习的虚函数表的知识，我们也能画出虚表中的布局图像。对于pointer pb亦或是reference rb都只需要一个word的空间，及4bytes在这个例子中，而对于Bear object b则需要24bytes。24bytes可由两部分组成：16bytes的ZooAnimal object和Bear多出来的部分。这里有一点需要注意这里的虚表指针类型仍为ZooAnimal。</p><h2 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h2><p>object和pointer内存布局：<br><img src="/img/%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%B4%A2C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/object%E5%92%8Cpointer%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80_%E5%A4%9A%E7%BB%A7%E6%89%BF.png"><br>在这图中Derived class继承自Base1 class和Base2 class。在derived class中绿色部分有三个含义：1. 左侧部分表示继承自Base1和Base2。2. 右侧表示derived class对于Base1和Base2的override。3. 不论左侧和右侧，绿色部分的排序均按照声明的顺序排列。灰色部分表示derived class自己的部分，对于左侧nonstatic data member来说，derived class自己的data member排在base data member后面。Derived class自己的虚函数放在第一个虚函数表中base虚函数之后。</p><h2 id="关于继承问题的一些讨论"><a href="#关于继承问题的一些讨论" class="headerlink" title="关于继承问题的一些讨论"></a>关于继承问题的一些讨论</h2><h3 id="1-衍生类使用父类member"><a href="#1-衍生类使用父类member" class="headerlink" title="1.衍生类使用父类member"></a>1.衍生类使用父类member</h3><p>对于上面单继承给出的例子，我们继续给出一下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Bear b;<br>ZooAnimal *pz = &amp;b;<br>Bear *pb = &amp;b;<br></code></pre></td></tr></table></figure><p>鉴于Bear是ZooAnimal的衍生类， pb能涵盖的object为Bear，而pz所涵盖的只有Bear中的ZooAnimal。除了virtual和ZooAnimal class中出现的members, pz不能用来处理Bear class中出现的members。但有两种方法可以实现pz对Bear member cell_back的处理：<br>1.(static_cast&lt;Bear*&gt;(pz))-&gt;cell_back<br>2.If(Bear *pb2 &#x3D; dynamic_cast&lt;Bear*&gt;(pz)){pb2 -&gt; cell_back;}</p><h3 id="2-衍生类初始化父类"><a href="#2-衍生类初始化父类" class="headerlink" title="2.衍生类初始化父类"></a>2.衍生类初始化父类</h3><p>示例代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">Bear b;<br>ZooAnimal za = b;<br>za.<span class="hljs-built_in">rotate</span>();<br></code></pre></td></tr></table></figure><p>以上代码会带来两个问题：</p><ul><li>为什么rotate使用的还是ZooAnimal实例？<br>首先ZooAnimal 和 Bear是两个完全不同的object， 但从继承关系上来看，Bear object所占用的内存就比ZooAnimal大，把Bear实例直接赋值给ZooAnimal无疑是十分荒唐的。</li><li>为什么za的vptr不指向Bear的vltb？<br>编译器会在初始化和指定操作之间做出仲裁。对于含有一个或一个以上vptrs的object, 那些vptrs不会被初始化或者改变</li></ul>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-Day14</title>
    <link href="/2023/12/28/Algorithms/LeetCode/LeetCode-20231228/"/>
    <url>/2023/12/28/Algorithms/LeetCode/LeetCode-20231228/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="1-最长的斐波那契子序列的长度"><a href="#1-最长的斐波那契子序列的长度" class="headerlink" title="1. 最长的斐波那契子序列的长度"></a>1. 最长的斐波那契子序列的长度</h1><p>如果序列 X_1, X_2, …, X_n 满足下列条件，就说它是 斐波那契式 的：</p><ul><li>n &gt;&#x3D; 3</li><li>对于所有 i + 2 &lt;&#x3D; n，都有 X_i + X_{i+1} &#x3D; X_{i+2}<br>给定一个严格递增的正整数数组形成序列 arr ，找到 arr 中最长的斐波那契式的子序列的长度。如果一个不存在，返回  0 。</li></ul><p>（回想一下，子序列是从原序列 arr 中派生出来的，它从 arr 中删掉任意数量的元素（也可以不删），而不改变其余元素的顺序。例如， [3, 5, 8] 是 [3, 4, 5, 6, 7, 8] 的一个子序列）<br><img src="/img/%E6%9C%80%E9%95%BF%E7%9A%84%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%AD%90%E5%BA%8F%E5%88%97%E7%9A%84%E9%95%BF%E5%BA%A6.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lenLongestFibSubseq</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = arr.<span class="hljs-built_in">size</span>();<br>        unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; arr_mapping;<br>        <span class="hljs-type">int</span> max_num = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            arr_mapping[arr[i]] = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n<span class="hljs-number">-2</span>; i++)&#123;<br>            <span class="hljs-type">int</span> num_i=arr[i];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>; j&lt;n<span class="hljs-number">-1</span>; j++)&#123;<br>                num_i=arr[i];<br>                <span class="hljs-type">int</span> length = <span class="hljs-number">2</span>;<br>                <span class="hljs-type">int</span> tmp = <span class="hljs-number">0</span>;<br>                <span class="hljs-type">int</span> num_j=arr[j];<br>                <span class="hljs-keyword">while</span>(arr_mapping.<span class="hljs-built_in">find</span>(num_i+num_j) != arr_mapping.<span class="hljs-built_in">end</span>())&#123;<br>                    length++;<br>                    tmp = num_i;<br>                    num_i = num_j;<br>                    num_j = tmp+num_j;<br>                &#125;<br>                max_num = <span class="hljs-built_in">max</span>(max_num, length);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(max_num == <span class="hljs-number">2</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>        <span class="hljs-keyword">return</span> max_num;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>动态规划优化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lenLongestFibSubseq</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = arr.<span class="hljs-built_in">size</span>();<br>        unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; arr_mapping;<br>        <span class="hljs-type">int</span> max_num = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> k;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(n, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n, <span class="hljs-number">0</span>));<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            arr_mapping[arr[i]] = i;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i<span class="hljs-number">-1</span>; j&gt;=<span class="hljs-number">0</span>; j--)&#123;<br>                <span class="hljs-keyword">if</span>(arr_mapping.<span class="hljs-built_in">find</span>(arr[i]-arr[j]) != arr_mapping.<span class="hljs-built_in">end</span>() &amp;&amp; <span class="hljs-number">2</span>*arr[j]&gt;arr[i])&#123;<br>                    k = arr_mapping[arr[i]-arr[j]];<br>                    dp[j][i] = <span class="hljs-built_in">max</span>(dp[k][j]+<span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<br>                &#125;<br>                max_num = <span class="hljs-built_in">max</span>(max_num,dp[j][i]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> max_num;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h1 id="2-最深叶节点的最近公共祖先"><a href="#2-最深叶节点的最近公共祖先" class="headerlink" title="2.  最深叶节点的最近公共祖先"></a>2.  最深叶节点的最近公共祖先</h1><p>给你一个有根节点 root 的二叉树，返回它 最深的叶节点的最近公共祖先 。</p><p>回想一下：</p><ul><li>叶节点 是二叉树中没有子节点的节点</li><li>树的根节点的 深度 为 0，如果某一节点的深度为 d，那它的子节点的深度就是 d+1</li><li>如果我们假定 A 是一组节点 S 的 最近公共祖先，S 中的每个节点都在以 A 为根节点的子树中，且 A 的深度达到此条件下可能的最大值。</li></ul><p><img src="/img/%E6%9C%80%E6%B7%B1%E5%8F%B6%E8%8A%82%E7%82%B9%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88.png"><br>自上而下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">lcaDeepestLeaves</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        TreeNode* ans = <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-type">int</span> maxdepth = <span class="hljs-number">-1</span>;<br><br>        function&lt;<span class="hljs-type">int</span>(TreeNode*, <span class="hljs-type">int</span>)&gt; dfs = [&amp;](TreeNode* node, <span class="hljs-type">int</span> depth)&#123;<br>            <span class="hljs-keyword">if</span>(node == <span class="hljs-literal">nullptr</span>)&#123;<br>                maxdepth = <span class="hljs-built_in">max</span>(depth, maxdepth);<br>                <span class="hljs-keyword">return</span> depth;<br>            &#125;<br>            <span class="hljs-type">int</span> maxleftlength = <span class="hljs-built_in">dfs</span>(node-&gt;left, depth+<span class="hljs-number">1</span>);<br>            <span class="hljs-type">int</span> maxrightlength = <span class="hljs-built_in">dfs</span>(node-&gt;right, depth+<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(maxleftlength == maxrightlength &amp;&amp; maxleftlength == maxdepth)&#123;<br>                ans = node;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(maxleftlength,maxrightlength);<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(root, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>自底向上</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">pair&lt;<span class="hljs-type">int</span>, TreeNode*&gt; <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode* node)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(node == <span class="hljs-literal">nullptr</span>)&#123;<br>            <span class="hljs-keyword">return</span> &#123;<span class="hljs-number">0</span>,<span class="hljs-literal">nullptr</span>&#125;;<br>        &#125;<br>        <span class="hljs-keyword">auto</span>[leftheight, ica_left] = <span class="hljs-built_in">dfs</span>(node-&gt;left);<br>        <span class="hljs-keyword">auto</span>[righheight, ica_right] = <span class="hljs-built_in">dfs</span>(node-&gt;right);<br>        <span class="hljs-keyword">if</span>(leftheight&gt;righheight)&#123;<span class="hljs-keyword">return</span> &#123;leftheight+<span class="hljs-number">1</span>, ica_left&#125;;&#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(righheight&gt;leftheight)&#123;<span class="hljs-keyword">return</span> &#123;righheight+<span class="hljs-number">1</span>, ica_right&#125;;&#125;<br>        <span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">return</span> &#123;leftheight+<span class="hljs-number">1</span>,node&#125;;&#125;<br><br><br>    &#125;<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">lcaDeepestLeaves</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(root).second;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="3-判断矩阵经轮转后是否一致"><a href="#3-判断矩阵经轮转后是否一致" class="headerlink" title="3. 判断矩阵经轮转后是否一致"></a>3. 判断矩阵经轮转后是否一致</h1><p>给你两个大小为 n x n 的二进制矩阵 mat 和 target 。现 以 90 度顺时针轮转 矩阵 mat 中的元素 若干次 ，如果能够使 mat 与 target 一致，返回 true ；否则，返回 false 。<br><img src="/img/%E5%88%A4%E6%96%AD%E7%9F%A9%E9%98%B5%E7%BB%8F%E8%BD%AE%E8%BD%AC%E5%90%8E%E6%98%AF%E5%90%A6%E4%B8%80%E8%87%B4.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">findRotation</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; mat, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; target)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = mat.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">bool</span> flag;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k&lt;<span class="hljs-number">4</span>; k++)&#123;<br>            flag = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j&lt;n; j++)&#123;<br>                    <span class="hljs-keyword">if</span>(k==<span class="hljs-number">0</span> &amp;&amp; mat[i][j]==target[j][n<span class="hljs-number">-1</span>-i] || k==<span class="hljs-number">1</span> &amp;&amp; mat[i][j]==target[n<span class="hljs-number">-1</span>-i][n<span class="hljs-number">-1</span>-j] || k==<span class="hljs-number">2</span> &amp;&amp; mat[i][j]==target[n<span class="hljs-number">-1</span>-j][i] || k==<span class="hljs-number">3</span> &amp;&amp; mat[i][j]==target[i][j])&#123;<span class="hljs-keyword">continue</span>;&#125;<br>                    <span class="hljs-keyword">else</span>&#123;<br>                        flag = <span class="hljs-literal">false</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(flag)&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>@版权归Leetcode所有</p>]]></content>
    
    
    <categories>
      
      <category>Daily Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-Day13</title>
    <link href="/2023/12/26/Algorithms/LeetCode/LeetCode-20231226/"/>
    <url>/2023/12/26/Algorithms/LeetCode/LeetCode-20231226/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="1-按既定顺序创建目标数组"><a href="#1-按既定顺序创建目标数组" class="headerlink" title="1. 按既定顺序创建目标数组"></a>1. 按既定顺序创建目标数组</h1><p>给你两个整数数组 nums 和 index。你需要按照以下规则创建目标数组：</p><ul><li>目标数组 target 最初为空。</li><li>按从左到右的顺序依次读取 nums[i] 和 index[i]，在 target 数组中的下标 index[i] 处插入值 nums[i] 。</li><li>重复上一步，直到在 nums 和 index 中都没有要读取的元素。<br>请你返回目标数组。</li></ul><p>题目保证数字插入位置总是存在。<br><img src="/img/%E6%8C%89%E6%97%A2%E5%AE%9A%E9%A1%BA%E5%BA%8F%E5%88%9B%E5%BB%BA%E7%9B%AE%E6%A0%87%E6%95%B0%E7%BB%84.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//本题注意vector中insert的使用</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">createTargetArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, vector&lt;<span class="hljs-type">int</span>&gt;&amp; index)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; result; <br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-type">int</span> tmp = result.<span class="hljs-built_in">size</span>();<br>            <span class="hljs-keyword">if</span>(tmp<span class="hljs-number">-1</span>&lt;index[i])&#123;result.<span class="hljs-built_in">push_back</span>(nums[i]);&#125;<br>            <span class="hljs-keyword">else</span>&#123;result.<span class="hljs-built_in">insert</span>(result.<span class="hljs-built_in">begin</span>()+index[i], nums[i]);&#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="2-转变数组后最接近目标值的数组和"><a href="#2-转变数组后最接近目标值的数组和" class="headerlink" title="2.  转变数组后最接近目标值的数组和"></a>2.  转变数组后最接近目标值的数组和</h1><p>给你一个整数数组 arr 和一个目标值 target ，请你返回一个整数 value ，使得将数组中所有大于 value 的值变成 value 后，数组的和最接近  target （最接近表示两者之差的绝对值最小）。</p><p>如果有多种使得和最接近 target 的方案，请你返回这些整数中的最小值。</p><p>请注意，答案不一定是 arr 中的数字。<br><img src="/img/%E8%BD%AC%E5%8F%98%E6%95%B0%E7%BB%84%E5%90%8E%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9B%AE%E6%A0%87%E5%80%BC%E7%9A%84%E6%95%B0%E7%BB%84%E5%92%8C.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findBestValue</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = arr.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">presum</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span></span>;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> real = INT_MAX;<br>        <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> result1 = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> result2 = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> result3 = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> result4 = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-built_in">sort</span>(arr.<span class="hljs-built_in">begin</span>(), arr.<span class="hljs-built_in">end</span>());<br>        presum[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i&lt;=n; i++)&#123;<br>            presum[i] = presum[i<span class="hljs-number">-1</span>] + arr[i<span class="hljs-number">-1</span>];<br>        &#125;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-type">int</span> diff = <span class="hljs-built_in">abs</span>(target - presum[i] - arr[i]*(n-i));<br>            <span class="hljs-keyword">if</span>(real &gt; diff)&#123;<br>                index = i;<br>                real = diff; <br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(index == n<span class="hljs-number">-1</span>)&#123;<span class="hljs-keyword">return</span> arr[n<span class="hljs-number">-1</span>];&#125;<br>        result1 = <span class="hljs-built_in">abs</span>(target-presum[index])/(n-index);<br>        result2 = <span class="hljs-built_in">abs</span>(target-presum[index+<span class="hljs-number">1</span>])/(n-index<span class="hljs-number">-1</span>);<br>        result2 = <span class="hljs-built_in">max</span>(result1,result2);<br>        result3 = result1 + <span class="hljs-number">1</span>;<br>        result4 = result2 + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(target - presum[index] - result1*(n-index)) &lt; <span class="hljs-built_in">abs</span>(target - presum[index+<span class="hljs-number">1</span>] - result2*(n-index<span class="hljs-number">-1</span>)))&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(target - presum[index] - result3*(n-index)) &lt; <span class="hljs-built_in">abs</span>(target - presum[index] - result1*(n-index)))&#123;<br>                result = result3;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;result = result1;&#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(target - presum[index+<span class="hljs-number">1</span>] - result4*(n-index<span class="hljs-number">-1</span>)) &lt; <span class="hljs-built_in">abs</span>(target - presum[index+<span class="hljs-number">1</span>] - result2*(n-index<span class="hljs-number">-1</span>)))&#123;<br>                result = result4;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;result = result2;&#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="3-差值数组不同的字符串"><a href="#3-差值数组不同的字符串" class="headerlink" title="3. 差值数组不同的字符串"></a>3. 差值数组不同的字符串</h1><p>给你一个字符串数组 words ，每一个字符串长度都相同，令所有字符串的长度都为 n 。</p><p>每个字符串 words[i] 可以被转化为一个长度为 n - 1 的 差值整数数组 difference[i] ，其中对于 0 &lt;&#x3D; j &lt;&#x3D; n - 2 有 difference[i][j] &#x3D; words[i][j+1] - words[i][j] 。注意两个字母的差值定义为它们在字母表中 位置 之差，也就是说 ‘a’ 的位置是 0 ，’b’ 的位置是 1 ，’z’ 的位置是 25 。</p><ul><li>比方说，字符串 “acb” 的差值整数数组是 [2 - 0, 1 - 2] &#x3D; [2, -1] 。<br>words 中所有字符串 除了一个字符串以外 ，其他字符串的差值整数数组都相同。你需要找到那个不同的字符串。</li></ul><p>请你返回 words中 差值整数数组 不同的字符串。<br><img src="/img/%E5%B7%AE%E5%80%BC%E6%95%B0%E7%BB%84%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">oddString</span><span class="hljs-params">(vector&lt;string&gt;&amp; words)</span> </span>&#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; diff;<br>        <span class="hljs-type">int</span> n = words.<span class="hljs-built_in">size</span>();<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            vector&lt;<span class="hljs-type">int</span>&gt; tmp;<br>            string str = words[i];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i&lt;str.<span class="hljs-built_in">size</span>(); i++)&#123;<br>                tmp.<span class="hljs-built_in">push_back</span>(str[i]-str[i<span class="hljs-number">-1</span>]);<br>            &#125;<br>            diff.<span class="hljs-built_in">push_back</span>(tmp);<br>        &#125;<br><br>        <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>        vector&lt;<span class="hljs-type">int</span>&gt; reference = diff[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i&lt;n; i++)&#123;<br>            vector&lt;<span class="hljs-type">int</span>&gt; vec = diff[i];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j&lt;vec.<span class="hljs-built_in">size</span>(); j++)&#123;<br>                <span class="hljs-keyword">if</span>(reference[j] != vec[j])&#123;<br>                    index = i;<br>                    cnt++;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(cnt == n<span class="hljs-number">-1</span>)&#123;<span class="hljs-keyword">return</span> words[<span class="hljs-number">0</span>];&#125;<br>        <span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">return</span> words[index];&#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="4-获得分数的方法数"><a href="#4-获得分数的方法数" class="headerlink" title="4. 获得分数的方法数"></a>4. 获得分数的方法数</h1><p>考试中有 n 种类型的题目。给你一个整数 target 和一个下标从 0 开始的二维整数数组 types ，其中 types[i] &#x3D; [counti, marksi] 表示第 i 种类型的题目有 counti 道，每道题目对应 marksi 分。</p><p>返回你在考试中恰好得到 target 分的方法数。由于答案可能很大，结果需要对 109 +7 取余。</p><p>注意，同类型题目无法区分。</p><ul><li>比如说，如果有 3 道同类型题目，那么解答第 1 和第 2 道题目与解答第 1 和第 3 道题目或者第 2 和第 3 道题目是相同的。<br><img src="/img/%E8%8E%B7%E5%BE%97%E5%88%86%E6%95%B0%E7%9A%84%E6%96%B9%E6%B3%95%E6%95%B0.png"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> modul = <span class="hljs-number">7</span>+<span class="hljs-number">1e9</span>;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">waysToReachTarget</span><span class="hljs-params">(<span class="hljs-type">int</span> target, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; types)</span> </span>&#123;<br>        <span class="hljs-type">int</span> dp[target+<span class="hljs-number">1</span>];<br>        <span class="hljs-built_in">memset</span>(dp,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(dp));<br><br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> qs:types)&#123;<br>            <span class="hljs-type">int</span> count = qs[<span class="hljs-number">0</span>];<br>            <span class="hljs-type">int</span> mark = qs[<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = target; i&gt;<span class="hljs-number">0</span>; i--)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j&lt;= <span class="hljs-built_in">min</span>(count, i/mark);j++)&#123;<br>                    dp[i] = (dp[i] + dp[i-j*mark])%modul;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[target];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>@版权归Leetcode所有</li></ul>]]></content>
    
    
    <categories>
      
      <category>Daily Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-Day12</title>
    <link href="/2023/12/25/Algorithms/LeetCode/LeetCode-20231225/"/>
    <url>/2023/12/25/Algorithms/LeetCode/LeetCode-20231225/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="1-移除栅栏得到的正方形田地的最大面积"><a href="#1-移除栅栏得到的正方形田地的最大面积" class="headerlink" title="1. 移除栅栏得到的正方形田地的最大面积"></a>1. 移除栅栏得到的正方形田地的最大面积</h1><p>有一个大型的 (m - 1) x (n - 1) 矩形田地，其两个对角分别是 (1, 1) 和 (m, n) ，田地内部有一些水平栅栏和垂直栅栏，分别由数组 hFences 和 vFences 给出。</p><p>水平栅栏为坐标 (hFences[i], 1) 到 (hFences[i], n)，垂直栅栏为坐标 (1, vFences[i]) 到 (m, vFences[i]) 。</p><p>返回通过 移除 一些栅栏（可能不移除）所能形成的最大面积的 正方形 田地的面积，或者如果无法形成正方形田地则返回 -1。</p><p>由于答案可能很大，所以请返回结果对 109 + 7 取余 后的值。</p><p>注意：田地外围两个水平栅栏（坐标 (1, 1) 到 (1, n) 和坐标 (m, 1) 到 (m, n) ）以及两个垂直栅栏（坐标 (1, 1) 到 (m, 1) 和坐标 (1, n) 到 (m, n) ）所包围。这些栅栏 不能 被移除。<br><img src="/img/%E7%A7%BB%E9%99%A4%E6%A0%85%E6%A0%8F%E5%BE%97%E5%88%B0%E7%9A%84%E6%AD%A3%E6%96%B9%E5%BD%A2%E7%94%B0%E5%9C%B0%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%A2%E7%A7%AF.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maximizeSquareArea</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n, vector&lt;<span class="hljs-type">int</span>&gt;&amp; hFences, vector&lt;<span class="hljs-type">int</span>&gt;&amp; vFences)</span> </span>&#123;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> modul = <span class="hljs-number">7</span>+<span class="hljs-number">1e9</span>;<br>        hFences.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>        hFences.<span class="hljs-built_in">push_back</span>(m);<br>        vFences.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>        vFences.<span class="hljs-built_in">push_back</span>(n);<br>        unordered_set&lt;<span class="hljs-type">int</span>&gt; st;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;vFences.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=vFences.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>; j&gt;i; j-- )&#123;<br>                st.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">abs</span>(vFences[j]-vFences[i]));<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;hFences.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = hFences.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>; j&gt;i; j--)&#123;<br>                <span class="hljs-type">int</span> diff = <span class="hljs-built_in">abs</span>(hFences[j]-hFences[i]);<br>                <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">count</span>(diff))&#123;<br>                    ans = <span class="hljs-built_in">max</span>(ans, diff);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(ans == <span class="hljs-number">0</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;&#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1ll</span> * ans * ans % modul;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="2-转换字符串的最小成本I"><a href="#2-转换字符串的最小成本I" class="headerlink" title="2.  转换字符串的最小成本I"></a>2.  转换字符串的最小成本I</h1><p><strong>提示</strong>：Floyd-Warshall 最短路算法<a href="https://zhuanlan.zhihu.com/p/623757829">Click to jump</a></p><p>给你两个下标从 0 开始的字符串 source 和 target ，它们的长度均为 n 并且由 小写 英文字母组成。</p><p>另给你两个下标从 0 开始的字符数组 original 和 changed ，以及一个整数数组 cost ，其中 cost[i] 代表将字符 original[i] 更改为字符 changed[i] 的成本。</p><p>你从字符串 source 开始。在一次操作中，如果 存在 任意 下标 j 满足 cost[j] &#x3D;&#x3D; z  、original[j] &#x3D;&#x3D; x 以及 changed[j] &#x3D;&#x3D; y 。你就可以选择字符串中的一个字符 x 并以 z 的成本将其更改为字符 y 。</p><p>返回将字符串 source 转换为字符串 target 所需的 最小 成本。如果不可能完成转换，则返回 -1 。</p><p>注意，可能存在下标 i 、j 使得 original[j] &#x3D;&#x3D; original[i] 且 changed[j] &#x3D;&#x3D; changed[i] 。<br><img src="/img/%E8%BD%AC%E6%8D%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9C%80%E5%B0%8F%E6%88%90%E6%9C%ACI.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">minimumCost</span><span class="hljs-params">(string source, string target, vector&lt;<span class="hljs-type">char</span>&gt;&amp; original, vector&lt;<span class="hljs-type">char</span>&gt;&amp; changed, vector&lt;<span class="hljs-type">int</span>&gt;&amp; cost)</span> </span>&#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(<span class="hljs-number">26</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">26</span>,<span class="hljs-number">0x3f3f3f3f</span>));<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> result = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;<span class="hljs-number">26</span>; i++)&#123;<br>            dp[i][i] = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;original.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-type">int</span> x = original[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-type">int</span> y = changed[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>            dp[x][y] = <span class="hljs-built_in">min</span>(dp[x][y], cost[i]);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k&lt;<span class="hljs-number">26</span>; k++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;<span class="hljs-number">26</span>; i++)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j&lt;<span class="hljs-number">26</span>; j++)&#123;<br>                    dp[i][j] = <span class="hljs-built_in">min</span>(dp[i][j], dp[i][k]+dp[k][j]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;source.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            result += dp[source[i]-<span class="hljs-string">&#x27;a&#x27;</span>][target[i]-<span class="hljs-string">&#x27;a&#x27;</span>];<br>            <span class="hljs-keyword">if</span>(dp[source[i]-<span class="hljs-string">&#x27;a&#x27;</span>][target[i]-<span class="hljs-string">&#x27;a&#x27;</span>] ==<span class="hljs-number">0x3f3f3f3f</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>@版权归Leetcode所有</p>]]></content>
    
    
    <categories>
      
      <category>Daily Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-Day11</title>
    <link href="/2023/12/24/Algorithms/LeetCode/LeetCode-20231224/"/>
    <url>/2023/12/24/Algorithms/LeetCode/LeetCode-20231224/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="1-找出两数组的不同"><a href="#1-找出两数组的不同" class="headerlink" title="1. 找出两数组的不同"></a>1. 找出两数组的不同</h1><p>给你两个下标从 0 开始的整数数组 nums1 和 nums2 ，请你返回一个长度为 2 的列表 answer ，其中：</p><ul><li>answer[0] 是 nums1 中所有 不 存在于 nums2 中的 不同 整数组成的列表。</li><li>answer[1] 是 nums2 中所有 不 存在于 nums1 中的 不同 整数组成的列表。<br>注意：列表中的整数可以按 任意 顺序返回。<br><img src="/img/%E6%89%BE%E5%87%BA%E4%B8%A4%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%8D%E5%90%8C.png"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">findDifference</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2) &#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; result1;<br>        vector&lt;<span class="hljs-type">int</span>&gt; result2;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; result;<br>        <span class="hljs-type">int</span> point1 = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> point2 = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> number1 = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> number2 = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-built_in">sort</span>(nums1.<span class="hljs-built_in">begin</span>(), nums1.<span class="hljs-built_in">end</span>());<br>        nums1.<span class="hljs-built_in">erase</span>(<span class="hljs-built_in">unique</span>(nums1.<span class="hljs-built_in">begin</span>(), nums1.<span class="hljs-built_in">end</span>()), nums1.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-built_in">sort</span>(nums2.<span class="hljs-built_in">begin</span>(), nums2.<span class="hljs-built_in">end</span>());<br>        nums2.<span class="hljs-built_in">erase</span>(<span class="hljs-built_in">unique</span>(nums2.<span class="hljs-built_in">begin</span>(), nums2.<span class="hljs-built_in">end</span>()), nums2.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-type">int</span> n1 = nums1.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> n2 = nums2.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">while</span>(point1&lt;n1 &amp;&amp; point2&lt;n2)&#123;<br>            number1 = nums1[point1];<br>            number2 = nums2[point2];<br>            <span class="hljs-keyword">if</span>(number1 == number2)&#123;<br>                point1++;<br>                point2++;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(number1&lt;number2)&#123;<br>                result2.<span class="hljs-built_in">push_back</span>(number1);<br>                point1++;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(number2&lt;number1)&#123;<br>                result1.<span class="hljs-built_in">push_back</span>(number2);<br>                point2++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(point1&lt;n1)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = point1; i&lt;n1; i++)&#123;<br>                result2.<span class="hljs-built_in">push_back</span>(nums1[i]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(point2&lt;n2)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = point2; i&lt;n2; i++)&#123;<br>                result1.<span class="hljs-built_in">push_back</span>(nums2[i]);<br>            &#125;<br>        &#125;<br>        result.<span class="hljs-built_in">push_back</span>(result2);<br>        result.<span class="hljs-built_in">push_back</span>(result1);<br>        <span class="hljs-keyword">return</span> result; <br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="2-执行逐位运算使字符串相等"><a href="#2-执行逐位运算使字符串相等" class="headerlink" title="2.  执行逐位运算使字符串相等"></a>2.  执行逐位运算使字符串相等</h1><p>给你两个下标从 0 开始的 二元 字符串 s 和 target ，两个字符串的长度均为 n 。你可以对 s 执行下述操作 任意 次：</p><ul><li>选择两个 不同 的下标 i 和 j ，其中 0 &lt;&#x3D; i, j &lt; n 。</li><li>同时，将 s[i] 替换为 (s[i] OR s[j]) ，s[j] 替换为 (s[i] XOR s[j]) 。<br>例如，如果 s &#x3D; “0110” ，你可以选择 i &#x3D; 0 和 j &#x3D; 2，然后同时将 s[0] 替换为 (s[0] OR s[2] &#x3D; 0 OR 1 &#x3D; 1)，并将 s[2] 替换为 (s[0] XOR s[2] &#x3D; 0 XOR 1 &#x3D; 1)，最终得到 s &#x3D; “1110” 。</li></ul><p>如果可以使 s 等于 target ，返回 true ，否则，返回 false 。<br><img src="/img/%E6%89%A7%E8%A1%8C%E9%80%90%E4%BD%8D%E8%BF%90%E7%AE%97%E4%BD%BF%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E7%AD%89.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">makeStringsEqual</span><span class="hljs-params">(string s, string target)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>();<br>        unordered_map&lt;<span class="hljs-type">char</span>,<span class="hljs-type">int</span>&gt; s_map;<br>        unordered_map&lt;<span class="hljs-type">char</span>,<span class="hljs-type">int</span>&gt; target_map;<br>        <span class="hljs-type">bool</span> flag;<br><br>        s_map[<span class="hljs-string">&#x27;0&#x27;</span>] = <span class="hljs-number">0</span>;<br>        s_map[<span class="hljs-string">&#x27;1&#x27;</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            s_map[s[i]]++;<br>            target_map[target[i]]++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> s==target || (target_map[<span class="hljs-string">&#x27;1&#x27;</span>]&amp;&amp;s_map[<span class="hljs-string">&#x27;1&#x27;</span>]);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="3-矩阵中的幸运数"><a href="#3-矩阵中的幸运数" class="headerlink" title="3. 矩阵中的幸运数"></a>3. 矩阵中的幸运数</h1><p>给你一个 m * n 的矩阵，矩阵中的数字 各不相同 。请你按 任意 顺序返回矩阵中的所有幸运数。</p><p>幸运数 是指矩阵中满足同时下列两个条件的元素：</p><ul><li>在同一行的所有元素中最小</li><li>在同一列的所有元素中最大<br><img src="/img/%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E5%B9%B8%E8%BF%90%E6%95%B0.png"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">luckyNumbers</span> <span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; matrix)</span> </span>&#123;<br>        <span class="hljs-type">int</span> row = matrix.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> column = matrix[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">max_list</span>(row, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">2</span>, INT_MAX));<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">min_list</span><span class="hljs-params">(column,<span class="hljs-number">0</span>)</span></span>;<br>        vector&lt;<span class="hljs-type">int</span>&gt; result;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;row; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j&lt;column; j++)&#123;<br>                <span class="hljs-type">int</span> num = matrix[i][j];<br>                <span class="hljs-keyword">if</span>(max_list[i][<span class="hljs-number">0</span>] &gt; num)&#123;<br>                    max_list[i][<span class="hljs-number">0</span>] = num;<br>                    max_list[i][<span class="hljs-number">1</span>] = j;<br>                &#125;<br>                min_list[j] = <span class="hljs-built_in">max</span>(min_list[j], num);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;row; i++)&#123;<br>            <span class="hljs-type">int</span> c = max_list[i][<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span>(max_list[i][<span class="hljs-number">0</span>] == min_list[c] &amp;&amp; max_list[i][<span class="hljs-number">0</span>] == matrix[i][c])&#123;result.<span class="hljs-built_in">push_back</span>(max_list[i][<span class="hljs-number">0</span>]);&#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="4-警告一小时内使用相同员工卡大于等于三次的人"><a href="#4-警告一小时内使用相同员工卡大于等于三次的人" class="headerlink" title="4. 警告一小时内使用相同员工卡大于等于三次的人"></a>4. 警告一小时内使用相同员工卡大于等于三次的人</h1><p>力扣公司的员工都使用员工卡来开办公室的门。每当一个员工使用一次他的员工卡，安保系统会记录下员工的名字和使用时间。如果一个员工在一小时时间内使用员工卡的次数大于等于三次，这个系统会自动发布一个 警告 。</p><p>给你字符串数组 keyName 和 keyTime ，其中 [keyName[i], keyTime[i]] 对应一个人的名字和他在 某一天 内使用员工卡的时间。</p><p>使用时间的格式是 24小时制 ，形如 “HH:MM” ，比方说 “23:51” 和 “09:49” 。</p><p>请你返回去重后的收到系统警告的员工名字，将它们按 字典序升序 排序后返回。</p><p>请注意 “10:00” - “11:00” 视为一个小时时间范围内，而 “22:51” - “23:52” 不被视为一小时时间范围内。<br><img src="/img/%E8%AD%A6%E5%91%8A%E4%B8%80%E5%B0%8F%E6%97%B6%E5%86%85%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%90%8C%E5%91%98%E5%B7%A5%E5%8D%A1%E5%A4%A7%E4%BA%8E%E7%AD%89%E4%BA%8E%E4%B8%89%E6%AC%A1%E7%9A%84%E4%BA%BA.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">alertNames</span><span class="hljs-params">(vector&lt;string&gt;&amp; keyName, vector&lt;string&gt;&amp; keyTime)</span> </span>&#123;<br>        vector&lt;string&gt; result;<br>        unordered_map&lt;string, vector&lt;<span class="hljs-type">int</span>&gt;&gt; mapping;<br>        <span class="hljs-type">int</span> n = keyName.<span class="hljs-built_in">size</span>();<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-type">int</span> hour;<br>            <span class="hljs-type">int</span> minute;<br>            <br>            hour = <span class="hljs-number">10</span>*(keyTime[i][<span class="hljs-number">0</span>] - <span class="hljs-string">&#x27;0&#x27;</span>) + keyTime[i][<span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>            minute = <span class="hljs-number">10</span>*(keyTime[i][<span class="hljs-number">3</span>] - <span class="hljs-string">&#x27;0&#x27;</span>) + keyTime[i][<span class="hljs-number">4</span>] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>            minute = (minute + <span class="hljs-number">60</span>*hour);<br>            mapping[keyName[i]].<span class="hljs-built_in">push_back</span>(minute);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it=mapping.<span class="hljs-built_in">begin</span>(); it!=mapping.<span class="hljs-built_in">end</span>(); it++)&#123;<br>            vector&lt;<span class="hljs-type">int</span>&gt; time_list = it-&gt;second;<br>            <span class="hljs-type">int</span> flag = <span class="hljs-literal">false</span>;<br>            <span class="hljs-built_in">sort</span>(time_list.<span class="hljs-built_in">begin</span>(),time_list.<span class="hljs-built_in">end</span>());<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;time_list.<span class="hljs-built_in">size</span>(); i++)&#123;<br>                <span class="hljs-type">int</span> reference = time_list[i];<br>                <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>                <span class="hljs-type">int</span> index = i;<br>                <span class="hljs-keyword">while</span>((i&lt;time_list.<span class="hljs-built_in">size</span>()) &amp;&amp; ((<span class="hljs-built_in">abs</span>(reference-time_list[i]))&lt;=<span class="hljs-number">60</span>))&#123;<br>                    cnt++;<br>                    i++;<br>                &#125;<br>                i = index;<br>                <span class="hljs-keyword">if</span>(cnt&gt;=<span class="hljs-number">3</span>)&#123;<br>                    flag = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(flag)&#123;result.<span class="hljs-built_in">push_back</span>(it-&gt;first);&#125;<br>        &#125;<br>        <span class="hljs-comment">//sort(result.begin(),result.end(), [&amp;](string &amp;a, string &amp;b) &#123;return (a[0]-&#x27;a&#x27;)&lt;(b[0]-&#x27;a&#x27;);&#125;);</span><br>        <span class="hljs-built_in">sort</span>(result.<span class="hljs-built_in">begin</span>(),result.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="5-坏了的计算器"><a href="#5-坏了的计算器" class="headerlink" title="5. 坏了的计算器"></a>5. 坏了的计算器</h1><p>在显示着数字 startValue 的坏计算器上，我们可以执行以下两种操作：</p><ul><li>双倍（Double）：将显示屏上的数字乘 2；</li><li>递减（Decrement）：将显示屏上的数字减 1 。<br>给定两个整数 startValue 和 target 。返回显示数字 target 所需的最小操作数。<br><img src="/img/%E5%9D%8F%E4%BA%86%E7%9A%84%E8%AE%A1%E7%AE%97%E5%99%A8.png"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">brokenCalc</span><span class="hljs-params">(<span class="hljs-type">int</span> startValue, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-type">int</span> cycle = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> diff = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span>(startValue &lt; target)&#123;<br>            startValue *=<span class="hljs-number">2</span>;<br>            res++;<br>            cycle++;<br>        &#125;<br>        diff = startValue - target;<br>        <span class="hljs-keyword">while</span>(diff != <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-type">int</span> d = diff/(<span class="hljs-number">1</span> &lt;&lt; (cycle));<br>            diff -= d*(<span class="hljs-number">1</span> &lt;&lt; (cycle));<br>            cycle = <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>,cycle<span class="hljs-number">-1</span>);<br>            res += d;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;                              <br></code></pre></td></tr></table></figure></li></ul><h1 id="6-最长上传前缀"><a href="#6-最长上传前缀" class="headerlink" title="6. 最长上传前缀"></a>6. 最长上传前缀</h1><p>给你一个 n 个视频的上传序列，每个视频编号为 1 到 n 之间的 不同 数字，你需要依次将这些视频上传到服务器。请你实现一个数据结构，在上传的过程中计算 最长上传前缀 。</p><p>如果 闭区间 1 到 i 之间的视频全部都已经被上传到服务器，那么我们称 i 是上传前缀。最长上传前缀指的是符合定义的 i 中的 最大值 。</p><p>请你实现 LUPrefix 类：</p><ul><li>LUPrefix(int n) 初始化一个 n 个视频的流对象。</li><li>void upload(int video) 上传 video 到服务器。</li><li>int longest() 返回上述定义的 最长上传前缀 的长度。<br><img src="/img/%E6%9C%80%E9%95%BF%E4%B8%8A%E4%BC%A0%E5%89%8D%E7%BC%80.png"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LUPrefix</span> &#123;<br>    <span class="hljs-type">int</span> n;<br>    vector&lt;<span class="hljs-type">bool</span>&gt; visited;<br>    <span class="hljs-type">int</span> length;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">LUPrefix</span>(<span class="hljs-type">int</span> n) &#123;<br>        <span class="hljs-keyword">this</span>-&gt;n = n;<br>        length = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++)&#123;<br>            visited.<span class="hljs-built_in">push_back</span>(<span class="hljs-literal">false</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">upload</span><span class="hljs-params">(<span class="hljs-type">int</span> video)</span> </span>&#123;<br>        visited[video]=<span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">longest</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">while</span>(length+<span class="hljs-number">1</span>&lt;=n &amp;&amp; visited[length+<span class="hljs-number">1</span>] == <span class="hljs-literal">true</span>)&#123;<br>            length++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> length;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your LUPrefix object will be instantiated and called as such:</span><br><span class="hljs-comment"> * LUPrefix* obj = new LUPrefix(n);</span><br><span class="hljs-comment"> * obj-&gt;upload(video);</span><br><span class="hljs-comment"> * int param_2 = obj-&gt;longest();</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure></li></ul><h1 id="7-得到山形数组的最少删除次数"><a href="#7-得到山形数组的最少删除次数" class="headerlink" title="7. 得到山形数组的最少删除次数"></a>7. 得到山形数组的最少删除次数</h1><p>我们定义 arr 是 山形数组 当且仅当它满足：</p><ul><li>arr.length &gt;&#x3D; 3</li><li>存在某个下标 i （从 0 开始） 满足 0 &lt; i &lt; arr.length - 1 且：</li><li><ul><li>arr[0] &lt; arr[1] &lt; … &lt; arr[i - 1] &lt; arr[i]</li></ul></li><li><ul><li>arr[i] &gt; arr[i + 1] &gt; … &gt; arr[arr.length - 1]<br>给你整数数组 nums​ ，请你返回将 nums 变成 山形状数组 的​ 最少 删除次数。<br><img src="/img/%E5%BE%97%E5%88%B0%E5%B1%B1%E5%BD%A2%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%91%E5%88%A0%E9%99%A4%E6%AC%A1%E6%95%B0.png"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minimumMountainRemovals</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">after</span><span class="hljs-params">(n)</span>, increase_list</span>;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> pre = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n<span class="hljs-number">-1</span>; i&gt;<span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-type">int</span> x = nums[i];<br>            <span class="hljs-keyword">auto</span> it = <span class="hljs-built_in">lower_bound</span>(increase_list.<span class="hljs-built_in">begin</span>(), increase_list.<span class="hljs-built_in">end</span>(), x);<br>            after[i] = it-increase_list.<span class="hljs-built_in">begin</span>()+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(it == increase_list.<span class="hljs-built_in">end</span>())&#123;<br>                increase_list.<span class="hljs-built_in">push_back</span>(x);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                *it = x;<br>            &#125;<br>        &#125;<br>        increase_list.<span class="hljs-built_in">clear</span>();<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;n<span class="hljs-number">-1</span>; i++)&#123;<br>            <span class="hljs-type">int</span> x = nums[i];<br>            <span class="hljs-keyword">auto</span> it = <span class="hljs-built_in">lower_bound</span>(increase_list.<span class="hljs-built_in">begin</span>(), increase_list.<span class="hljs-built_in">end</span>(), x);<br>            pre = it-increase_list.<span class="hljs-built_in">begin</span>()+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(it == increase_list.<span class="hljs-built_in">end</span>())&#123;<br>                increase_list.<span class="hljs-built_in">push_back</span>(x);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                *it = x;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(pre &gt;= <span class="hljs-number">2</span> &amp;&amp; after[i] &gt;=<span class="hljs-number">2</span>)&#123;<br>                result = <span class="hljs-built_in">max</span>(result, pre + after[i] <span class="hljs-number">-1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> n - result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h1 id="8-移除石子使总数最小"><a href="#8-移除石子使总数最小" class="headerlink" title="8. 移除石子使总数最小"></a>8. 移除石子使总数最小</h1><p>给你一个整数数组 piles ，数组 下标从 0 开始 ，其中 piles[i] 表示第 i 堆石子中的石子数量。另给你一个整数 k ，请你执行下述操作 恰好 k 次：</p><ul><li>选出任一石子堆 piles[i] ，并从中 移除 floor(piles[i] &#x2F; 2) 颗石子。<br>注意：你可以对 同一堆 石子多次执行此操作。</li></ul><p>返回执行 k 次操作后，剩下石子的 最小 总数。</p><p>floor(x) 为 小于 或 等于 x 的 最大 整数。（即，对 x 向下取整）。<br><img src="/img/%E7%A7%BB%E9%99%A4%E7%9F%B3%E5%AD%90%E4%BD%BF%E6%80%BB%E6%95%B0%E6%9C%80%E5%B0%8F.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minStoneSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; piles, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-function">priority_queue&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">pq</span><span class="hljs-params">(piles.begin(), piles.end())</span></span>;<br><br>        <span class="hljs-keyword">while</span>(k&gt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-type">int</span> num = pq.<span class="hljs-built_in">top</span>() - pq.<span class="hljs-built_in">top</span>()/<span class="hljs-number">2</span>;<br>            pq.<span class="hljs-built_in">pop</span>();<br>            pq.<span class="hljs-built_in">push</span>(num);<br>            k--;<br>        &#125;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(!pq.<span class="hljs-built_in">empty</span>())&#123;<br>            result += pq.<span class="hljs-built_in">top</span>();<br>            pq.<span class="hljs-built_in">pop</span>();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>@版权归Leetcode所有</p>]]></content>
    
    
    <categories>
      
      <category>Daily Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-Day10</title>
    <link href="/2023/12/21/Algorithms/LeetCode/LeetCode-20231221/"/>
    <url>/2023/12/21/Algorithms/LeetCode/LeetCode-20231221/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="1-执行子串操作后的字典序最小字符串"><a href="#1-执行子串操作后的字典序最小字符串" class="headerlink" title="1. 执行子串操作后的字典序最小字符串"></a>1. 执行子串操作后的字典序最小字符串</h1><p>给你一个仅由小写英文字母组成的字符串 s 。在一步操作中，你可以完成以下行为：</p><ul><li>选择 s 的任一非空子字符串，可能是整个字符串，接着将字符串中的每一个字符替换为英文字母表中的前一个字符。例如，’b’ 用 ‘a’ 替换，’a’ 用 ‘z’ 替换。<br>返回执行上述操作 恰好一次 后可以获得的 字典序最小 的字符串。</li></ul><p>子字符串 是字符串中的一个连续字符序列。</p><p>现有长度相同的两个字符串 x 和 字符串 y ，在满足 x[i] !&#x3D; y[i] 的第一个位置 i 上，如果  x[i] 在字母表中先于 y[i] 出现，则认为字符串 x 比字符串 y 字典序更小 。<br><img src="/img/%E6%89%A7%E8%A1%8C%E5%AD%90%E4%B8%B2%E6%93%8D%E4%BD%9C%E5%90%8E%E7%9A%84%E5%AD%97%E5%85%B8%E5%BA%8F%E6%9C%80%E5%B0%8F%E5%AD%97%E7%AC%A6%E4%B8%B2.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">smallestString</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> right = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(flag)&#123;<span class="hljs-keyword">break</span>;&#125;<br>            <span class="hljs-keyword">while</span>(s[i] != <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; i&lt;n )&#123;<br>                s[i]--;<br>                i++;<br>                flag = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag)&#123;<span class="hljs-keyword">return</span> s;&#125;<br>        s[n<span class="hljs-number">-1</span>] = <span class="hljs-string">&#x27;z&#x27;</span>;<br>        <br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="2-HTML-实体解析器"><a href="#2-HTML-实体解析器" class="headerlink" title="2.  HTML 实体解析器"></a>2.  HTML 实体解析器</h1><p>「HTML 实体解析器」 是一种特殊的解析器，它将 HTML 代码作为输入，并用字符本身替换掉所有这些特殊的字符实体。</p><p>HTML 里这些特殊字符和它们对应的字符实体包括：</p><ul><li>双引号：字符实体为 &quot; ，对应的字符是 “ 。</li><li>单引号：字符实体为 &apos; ，对应的字符是 ‘ 。</li><li>与符号：字符实体为 &amp; ，对应对的字符是 &amp; 。</li><li>大于号：字符实体为 &gt; ，对应的字符是 &gt; 。</li><li>小于号：字符实体为 &lt; ，对应的字符是 &lt; 。</li><li>斜线号：字符实体为 &frasl; ，对应的字符是 &#x2F; 。<br>给你输入字符串 text ，请你实现一个 HTML 实体解析器，返回解析器解析后的结果。<br>![](&#x2F;img&#x2F;HTML 实体解析器.png)<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">entityParser</span><span class="hljs-params">(string text)</span> </span>&#123;<br>        string str = <span class="hljs-string">&quot;&quot;</span>;<br>        unordered_map&lt;string, string&gt; HTML_list = &#123;&#123;<span class="hljs-string">&quot;&amp;quot;&quot;</span>,<span class="hljs-string">&quot;\&quot;&quot;</span>&#125;, &#123;<span class="hljs-string">&quot;&amp;apos;&quot;</span>, <span class="hljs-string">&quot;\&#x27;&quot;</span>&#125;, &#123;<span class="hljs-string">&quot;&amp;amp;&quot;</span>, <span class="hljs-string">&quot;&amp;&quot;</span>&#125;, &#123;<span class="hljs-string">&quot;&amp;gt;&quot;</span>, <span class="hljs-string">&quot;&gt;&quot;</span>&#125;, &#123;<span class="hljs-string">&quot;&amp;lt;&quot;</span>, <span class="hljs-string">&quot;&lt;&quot;</span>&#125;, &#123;<span class="hljs-string">&quot;&amp;frasl;&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>&#125;&#125;;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;text.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            string tmp = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-type">int</span> index = i;<br>            <span class="hljs-keyword">if</span>(text[i] == <span class="hljs-string">&#x27;&amp;&#x27;</span>)&#123;<br>                <span class="hljs-keyword">while</span>(index-i&lt;<span class="hljs-number">7</span> &amp;&amp; index&lt;text.<span class="hljs-built_in">size</span>())&#123;<br>                    tmp += text[index];<br>                    <span class="hljs-keyword">if</span>(text[index] == <span class="hljs-string">&#x27;;&#x27;</span>)&#123;<span class="hljs-keyword">break</span>;&#125; <br>                    index++;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(HTML_list.<span class="hljs-built_in">find</span>(tmp) != HTML_list.<span class="hljs-built_in">end</span>())&#123;<br>                    i = index;<br>                    str += HTML_list[tmp];<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;str += text[i];&#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                str += text[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> str;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h1 id="3-判断字符串的两半是否相似"><a href="#3-判断字符串的两半是否相似" class="headerlink" title="3. 判断字符串的两半是否相似"></a>3. 判断字符串的两半是否相似</h1><p>给你一个偶数长度的字符串 s 。将其拆分成长度相同的两半，前一半为 a ，后一半为 b 。</p><p>两个字符串 相似 的前提是它们都含有相同数目的元音（’a’，’e’，’i’，’o’，’u’，’A’，’E’，’I’，’O’，’U’）。注意，s 可能同时含有大写和小写字母。</p><p>如果 a 和 b 相似，返回 true ；否则，返回 false 。<br><img src="/img/%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E4%B8%A4%E5%8D%8A%E6%98%AF%E5%90%A6%E7%9B%B8%E4%BC%BC.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">halvesAreAlike</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>()/<span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>        unordered_set&lt;<span class="hljs-type">char</span>&gt; vowel = &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;u&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;I&#x27;</span>,<span class="hljs-string">&#x27;O&#x27;</span>,<span class="hljs-string">&#x27;U&#x27;</span>&#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            cnt += vowel.<span class="hljs-built_in">count</span>(s[i]);<br>            cnt -= vowel.<span class="hljs-built_in">count</span>(s[i+n]);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(cnt)&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//unordered_set 容器，可直译为“无序 set 容器”，即 unordered_set 容器和 set 容器很像，唯一的区别就在于 set 容器会自行对存储的数据进行排序，而 unordered_set 容器不会。</span><br></code></pre></td></tr></table></figure><h1 id="4-美丽塔-II"><a href="#4-美丽塔-II" class="headerlink" title="4. 美丽塔 II"></a>4. 美丽塔 II</h1><p>给你一个长度为 n 下标从 0 开始的整数数组 maxHeights 。</p><p>你的任务是在坐标轴上建 n 座塔。第 i 座塔的下标为 i ，高度为 heights[i] 。</p><p>如果以下条件满足，我们称这些塔是 美丽 的：</p><ol><li>1 &lt;&#x3D; heights[i] &lt;&#x3D; maxHeights[i]</li><li>heights 是一个 山脉 数组。<br>如果存在下标 i 满足以下条件，那么我们称数组 heights 是一个 山脉 数组：</li></ol><ul><li>对于所有 0 &lt; j &lt;&#x3D; i ，都有 heights[j - 1] &lt;&#x3D; heights[j]</li><li>对于所有 i &lt;&#x3D; k &lt; n - 1 ，都有 heights[k + 1] &lt;&#x3D; heights[k]<br>请你返回满足 美丽塔 要求的方案中，高度和的最大值 。<br><img src="/img/%E7%BE%8E%E4%B8%BD%E5%A1%94II.png"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">maximumSumOfHeights</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; maxHeights)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = maxHeights.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; <span class="hljs-title">after</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span></span>;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> sum = <span class="hljs-number">0</span>;<br>        stack&lt;<span class="hljs-type">int</span>&gt; st;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> result = <span class="hljs-number">0</span>;<br>        st.<span class="hljs-built_in">push</span>(n);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-keyword">while</span>(st.<span class="hljs-built_in">size</span>()&gt;<span class="hljs-number">1</span> &amp;&amp; maxHeights[i] &lt; maxHeights[st.<span class="hljs-built_in">top</span>()])&#123;<br>                <span class="hljs-type">int</span> j = st.<span class="hljs-built_in">top</span>();<br>                st.<span class="hljs-built_in">pop</span>();<br>                sum -= (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)maxHeights[j]*(st.<span class="hljs-built_in">top</span>()-j);<br>            &#125;<br>            sum += (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)maxHeights[i]*(st.<span class="hljs-built_in">top</span>()-i);<br>            after[i] = sum;<br>            st.<span class="hljs-built_in">push</span>(i);<br>        &#125;<br>        st = <span class="hljs-built_in">stack</span>&lt;<span class="hljs-type">int</span>&gt;();<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> pre = <span class="hljs-number">0</span>;<br>        st.<span class="hljs-built_in">push</span>(<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j&lt;n; j++)&#123;<br>            <span class="hljs-keyword">while</span>(st.<span class="hljs-built_in">size</span>()&gt;<span class="hljs-number">1</span> &amp;&amp; maxHeights[j] &lt; maxHeights[st.<span class="hljs-built_in">top</span>()])&#123;<br>                <span class="hljs-type">int</span> k = st.<span class="hljs-built_in">top</span>();<br>                st.<span class="hljs-built_in">pop</span>();<br>                pre -= (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)maxHeights[k]*(k-st.<span class="hljs-built_in">top</span>());<br>            &#125;<br>            pre += (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)maxHeights[j]*(j-st.<span class="hljs-built_in">top</span>());<br>            result = <span class="hljs-built_in">max</span>(result, pre + after[j+<span class="hljs-number">1</span>]);<br>            st.<span class="hljs-built_in">push</span>(j);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>@版权归Leetcode所有</li></ul>]]></content>
    
    
    <categories>
      
      <category>Daily Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-Day9</title>
    <link href="/2023/12/20/Algorithms/LeetCode/LeetCode-20231220/"/>
    <url>/2023/12/20/Algorithms/LeetCode/LeetCode-20231220/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="1-最大公因数等于K的子数组数目"><a href="#1-最大公因数等于K的子数组数目" class="headerlink" title="1. 最大公因数等于K的子数组数目"></a>1. 最大公因数等于K的子数组数目</h1><p>给你一个整数数组 nums 和一个整数 k ，请你统计并返回 nums 的子数组中元素的最大公因数等于 k 的子数组数目。</p><p>子数组 是数组中一个连续的非空序列。</p><p>数组的最大公因数 是能整除数组中所有元素的最大整数。<br><img src="/img/%E6%9C%80%E5%A4%A7%E5%85%AC%E5%9B%A0%E6%95%B0%E7%AD%89%E4%BA%8EK%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84%E6%95%B0%E7%9B%AE.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">subarrayGCD</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> left = <span class="hljs-number">0</span>; left&lt;nums.<span class="hljs-built_in">size</span>(); left++)&#123;<br>            <span class="hljs-type">int</span> num = nums[left];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> right = left; right&lt;nums.<span class="hljs-built_in">size</span>(); right++)&#123;<br>                num = <span class="hljs-built_in">gcd</span>(num,nums[right]);<br>                <span class="hljs-keyword">if</span>(num == k)&#123;result++;&#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span>&#123;<br>        <span class="hljs-keyword">while</span>(b != <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-type">int</span> tmp = a%b;<br>            a = b;<br>            b =tmp;<br>        &#125;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="2-二叉树中的伪回文路径"><a href="#2-二叉树中的伪回文路径" class="headerlink" title="2.  二叉树中的伪回文路径"></a>2.  二叉树中的伪回文路径</h1><p>给你一棵二叉树，每个节点的值为 1 到 9 。我们称二叉树中的一条路径是 「伪回文」的，当它满足：路径经过的所有节点值的排列中，存在一个回文序列。</p><p>请你返回从根到叶子节点的所有路径中 伪回文 路径的数目。<br><img src="/img/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E7%9A%84%E4%BC%AA%E5%9B%9E%E6%96%87%E8%B7%AF%E5%BE%84.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">traceback</span><span class="hljs-params">(TreeNode* node, vector&lt;<span class="hljs-type">int</span>&gt; p)</span></span>&#123;<br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(node == <span class="hljs-literal">nullptr</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        p[node -&gt;val] ^= <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(node -&gt; left == <span class="hljs-literal">nullptr</span> &amp;&amp; node -&gt; right == <span class="hljs-literal">nullptr</span>)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">accumulate</span>(p.<span class="hljs-built_in">begin</span>(), p.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>) &lt;= <span class="hljs-number">1</span>)&#123;res++;&#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            res = <span class="hljs-built_in">traceback</span>(node -&gt; left, p) + <span class="hljs-built_in">traceback</span>(node -&gt; right, p);<br>        &#125;<br>        p[node -&gt;val] ^= <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pseudoPalindromicPaths</span> <span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;<br>        result = <span class="hljs-built_in">traceback</span>(root, p);<br>     <br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="3-统计无向图中无法互相到达点对数"><a href="#3-统计无向图中无法互相到达点对数" class="headerlink" title="3. 统计无向图中无法互相到达点对数"></a>3. 统计无向图中无法互相到达点对数</h1><p>给你一个整数 n ，表示一张 无向图 中有 n 个节点，编号为 0 到 n - 1 。同时给你一个二维整数数组 edges ，其中 edges[i] &#x3D; [ai, bi] 表示节点 ai 和 bi 之间有一条 无向 边。</p><p>请你返回 无法互相到达 的不同 点对数目 。<br><img src="/img/%E7%BB%9F%E8%AE%A1%E6%97%A0%E5%90%91%E5%9B%BE%E4%B8%AD%E6%97%A0%E6%B3%95%E4%BA%92%E7%9B%B8%E5%88%B0%E8%BE%BE%E7%82%B9%E5%AF%B9%E6%95%B0.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">countPairs</span><span class="hljs-params">(<span class="hljs-type">int</span> n, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">g</span>(n);<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> ans = <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> e:edges)&#123;<br>            g[e[<span class="hljs-number">0</span>]].<span class="hljs-built_in">push_back</span>(e[<span class="hljs-number">1</span>]);<br>            g[e[<span class="hljs-number">1</span>]].<span class="hljs-built_in">push_back</span>(e[<span class="hljs-number">0</span>]);<br>        &#125;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">visit</span><span class="hljs-params">(n)</span></span>;<br>        function&lt;<span class="hljs-type">int</span>(<span class="hljs-type">int</span>)&gt; dfs = [&amp;](<span class="hljs-type">int</span> input) -&gt; <span class="hljs-type">int</span>&#123;<br>            <span class="hljs-type">int</span> size = <span class="hljs-number">1</span>;<br>            visit[input] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> element:g[input])&#123;<br>                <span class="hljs-keyword">if</span>(!visit[element])&#123;size += <span class="hljs-built_in">dfs</span>(element);&#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> size;<br>        &#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, connected_point = <span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(!visit[i])&#123;<br>                <span class="hljs-type">int</span> new_connection = <span class="hljs-built_in">dfs</span>(i);<br>                ans += (<span class="hljs-type">long</span> <span class="hljs-type">long</span>) connected_point * new_connection;<br>                connected_point += new_connection;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="4-表现良好的最长时间段"><a href="#4-表现良好的最长时间段" class="headerlink" title="4. 表现良好的最长时间段"></a>4. 表现良好的最长时间段</h1><p>给你一份工作时间表 hours，上面记录着某一位员工每天的工作小时数。</p><p>我们认为当员工一天中的工作小时数大于 8 小时的时候，那么这一天就是「劳累的一天」。</p><p>所谓「表现良好的时间段」，意味在这段时间内，「劳累的天数」是严格 大于「不劳累的天数」。</p><p>请你返回「表现良好时间段」的最大长度。<br><img src="/img/%E8%A1%A8%E7%8E%B0%E8%89%AF%E5%A5%BD%E7%9A%84%E6%9C%80%E9%95%BF%E6%97%B6%E9%97%B4%E6%AE%B5.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">longestWPI</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; hours)</span> </span>&#123;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> n = hours.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">presum</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span></span>;<br><br>        presum[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(hours[i]/<span class="hljs-number">9</span>)&#123;hours[i] = <span class="hljs-number">1</span>;&#125;<br>            <span class="hljs-keyword">else</span>&#123;hours[i] = <span class="hljs-number">-1</span>;&#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)&#123;<br>            presum[i] = presum[i<span class="hljs-number">-1</span>]+hours[i<span class="hljs-number">-1</span>];<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;n+<span class="hljs-number">1</span>; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = n; j&gt;i; j--)&#123;<br>                <span class="hljs-keyword">if</span>(presum[j]-presum[i]&gt;<span class="hljs-number">0</span>)&#123;<br>                    result = <span class="hljs-built_in">max</span>(result,j-i);<br>                    <span class="hljs-keyword">break</span>;    <br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//improve using stack</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">longestWPI</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; hours)</span> </span>&#123;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> n = hours.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">presum</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span></span>;<br>        stack&lt;<span class="hljs-type">int</span>&gt; st;<br><br>        presum[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        st.<span class="hljs-built_in">push</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++)&#123;<br>            presum[i] = presum[i<span class="hljs-number">-1</span>]+ (hours[i<span class="hljs-number">-1</span>]&gt;<span class="hljs-number">8</span>?<span class="hljs-number">1</span>:<span class="hljs-number">-1</span>);<br>            <span class="hljs-keyword">if</span>(presum[i] &lt; presum[st.<span class="hljs-built_in">top</span>()]) st.<span class="hljs-built_in">push</span>(i);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n; i&gt;<span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-keyword">while</span>(!st.<span class="hljs-built_in">empty</span>() &amp;&amp; presum[i]&gt;presum[st.<span class="hljs-built_in">top</span>()])&#123;<br>                result = <span class="hljs-built_in">max</span>(result, i-st.<span class="hljs-built_in">top</span>());<br>                st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="5-寻找峰值"><a href="#5-寻找峰值" class="headerlink" title="5. 寻找峰值"></a>5. 寻找峰值</h1><p>峰值元素是指其值严格大于左右相邻值的元素。</p><p>给你一个整数数组 nums，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回 任何一个峰值 所在位置即可。</p><p>你可以假设 nums[-1] &#x3D; nums[n] &#x3D; -∞ 。</p><p>你必须实现时间复杂度为 O(log n) 的算法来解决此问题。<br><img src="/img/%E5%AF%BB%E6%89%BE%E5%B3%B0%E5%80%BC.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findPeakElement</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> right = n<span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> middle;<br><br>        <span class="hljs-keyword">while</span>(left&lt;right)&#123;<br>            middle = (left+right)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(nums[middle] &gt; nums[middle+<span class="hljs-number">1</span>])&#123;<br>                right = middle;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(nums[middle] &lt; nums[middle+<span class="hljs-number">1</span>])&#123;<br>                left = middle +<span class="hljs-number">1</span>;<br>            &#125; <br>        &#125;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="6-统计区间中的整数数目"><a href="#6-统计区间中的整数数目" class="headerlink" title="6. 统计区间中的整数数目"></a>6. 统计区间中的整数数目</h1><p>给你区间的 空 集，请你设计并实现满足要求的数据结构：</p><p>新增：添加一个区间到这个区间集合中。<br>统计：计算出现在 至少一个 区间中的整数个数。<br>实现 CountIntervals 类：</p><p>CountIntervals() 使用区间的空集初始化对象<br>void add(int left, int right) 添加区间 [left, right] 到区间集合之中。<br>int count() 返回出现在 至少一个 区间中的整数个数。<br>注意：区间 [left, right] 表示满足 left &lt;&#x3D; x &lt;&#x3D; right 的所有整数 x 。<br><img src="/img/%E7%BB%9F%E8%AE%A1%E5%8C%BA%E9%97%B4%E4%B8%AD%E7%9A%84%E6%95%B4%E6%95%B0%E6%95%B0%E7%9B%AE.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CountIntervals</span> &#123;<br>    map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; m;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">CountIntervals</span>() &#123;&#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> it = m.<span class="hljs-built_in">lower_bound</span>(left); it!=m.<span class="hljs-built_in">end</span>() &amp;&amp; it -&gt; second &lt;= right; m.<span class="hljs-built_in">erase</span>(it++))&#123;<br>            <span class="hljs-type">int</span> l = it-&gt;second;<br>            <span class="hljs-type">int</span> r = it-&gt;first;<br>            left = <span class="hljs-built_in">min</span>(l, left);<br>            right = <span class="hljs-built_in">max</span>(r,right);<br>            cnt -= r-l+<span class="hljs-number">1</span>;<br>        &#125;<br>        cnt += right-left+<span class="hljs-number">1</span>;<br>        m[right] = left;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">count</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> cnt;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your CountIntervals object will be instantiated and called as such:</span><br><span class="hljs-comment"> * CountIntervals* obj = new CountIntervals();</span><br><span class="hljs-comment"> * obj-&gt;add(left,right);</span><br><span class="hljs-comment"> * int param_2 = obj-&gt;count();</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>@版权归Leetcode所有</p>]]></content>
    
    
    <categories>
      
      <category>Daily Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Inside the C++ Object Model-1</title>
    <link href="/2023/12/18/Inside%20the%20C++%20Object%20Model/Inside%20the%20C++%20Object%20Model-1/"/>
    <url>/2023/12/18/Inside%20the%20C++%20Object%20Model/Inside%20the%20C++%20Object%20Model-1/</url>
    
    <content type="html"><![CDATA[<h1 id="C-对象模式"><a href="#C-对象模式" class="headerlink" title="C++对象模式"></a>C++对象模式</h1><span id="more"></span><p>下面是示例代码，以下对于模型的介绍都围绕着示例代码展开</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Point</span>(<span class="hljs-type">float</span> xval);<br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Point</span>();<br>    <br>    <span class="hljs-function"><span class="hljs-type">float</span> <span class="hljs-title">x</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">PointCount</span><span class="hljs-params">()</span></span>;<br>    <br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> ostream&amp; <span class="hljs-title">print</span><span class="hljs-params">(ostream &amp;os)</span> <span class="hljs-type">const</span></span>;<br>    <br>    <span class="hljs-type">float</span> _x;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> _point_count;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="1-简单对象模型"><a href="#1-简单对象模型" class="headerlink" title="1. 简单对象模型"></a>1. 简单对象模型</h2><p>正如名字中的简单二字，简单对象模式的设计初衷是为了降低C++编译器的复杂度，其示例代码(参考深入探索C++对象模型)和设计模型如下图。对于简单对象模式，一个对象被分成了许多slot，slot的个数对应于class中member的个数，从上到下按照在class中的申明顺序进行排列。为了适应class中member的不同类型，slot中存放的是执行具体member的指针。在进行member寻址的时候通过slot的索引值来进行查找。<br>优点：降低了C++编译器的设计复杂度。<br>缺点：降低了C++编译器的空间利用率和执行时的效率。</p><h3 id="加上继承"><a href="#加上继承" class="headerlink" title="加上继承"></a>加上继承</h3><p>假设有两个类，base_point和 derived_point，其中base_point为derived_class的父类。那么在简单对象模型中，base_point会被derived_point的一个slot来指出，slot中储存的是base_point的地址。<br>优点：由间接性导致的空间和存取时间上的额外损耗。<br>缺点：derived_point的大小与base_point的大小无关。<br><img src="/img/%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%B4%A2C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/%E7%AE%80%E5%8D%95%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B.png"></p><h2 id="2-表格驱动对象模型"><a href="#2-表格驱动对象模型" class="headerlink" title="2.表格驱动对象模型"></a>2.表格驱动对象模型</h2><p>表格驱动对象模型也被称为双表格模型。相比与上面的简单对象模式，表格驱动模式将class中的data member和 function member 做了一个区分，将它们分别放在Data Member Table和Function Member Table中。由此Point pt就简化为只拥有两个指针的slot,分别指向两个Table. 这里需要注意的一点是data member直接存放在Data Member Table中，而对于Function Member Table可以类比上述的简单对象模型。其中的不同点在于将Poitn pt替换成了Function Member Table并且每个slot所指向的对象只包含function member.<br><img src="/img/%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%B4%A2C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/%E8%A1%A8%E6%A0%BC%E9%A9%B1%E5%8A%A8%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B.png"></p><h3 id="加上继承-1"><a href="#加上继承-1" class="headerlink" title="加上继承"></a>加上继承</h3><p>可以类比于VirtualTable，会产生另一个叫做Base Class Table 的表格。表格中的每个slot都包含一个base class的地址。Derived Class通过一个bptr的指针指向Base Class Table。<br>缺点：由间接性导致的空间和存取时间上的额外损耗。<br>优点：由于每个class在固定位置都会存在一个bptr指针，每一个class对于继承都保持了一致性。由于Base Class Table的存在，做到了与class本身的分离，所以在无需改变class本身的大小就能增加或是减少base class。<br><img src="/img/%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%B4%A2C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/base_class_table.png"></p><h2 id="3-C-对象模型"><a href="#3-C-对象模型" class="headerlink" title="3.C++对象模型"></a>3.C++对象模型</h2><p>从简单模型到C++对象模型经历了内存空间和存取时间上的优化。相比于上面的双表格模型，C++对象模型对calss的member做了更细的划分。<br>1.Nonstatic data members 放在class之中。<br>2.Static data member 放在class之外。<br>3.Static和nonstatic function member放在class之外。<br>根据上面的示例代码可以画出下面的模型图，读者可以根据C++对象模型各种元素的存放规则去图中一一对应。对于Virtual table 中指针分配的顺序是以type_info开始，并以程序中的申明顺序进行排列。对与type_info的解释，读者可以移步至这篇博客<a href="https://www.cnblogs.com/xuelisheng/p/9479288.html">Click to jump</a>，笔者个人觉得对于RTTI机制，type_info, typeid 和dynamic_cast都做了不错的解释。<br>优点：空间和存取时间效率。<br>缺点：对于nonstatic data member的改变需要进行重新编译。<br><img src="/img/%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%B4%A2C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B.png"></p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-Day8</title>
    <link href="/2023/12/17/Algorithms/LeetCode/LeetCode-20231217/"/>
    <url>/2023/12/17/Algorithms/LeetCode/LeetCode-20231217/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="1-划分数组并满足最大差限制"><a href="#1-划分数组并满足最大差限制" class="headerlink" title="1. 划分数组并满足最大差限制"></a>1. 划分数组并满足最大差限制</h1><p>给你一个长度为 n 的整数数组 nums，以及一个正整数 k 。</p><p>将这个数组划分为一个或多个长度为 3 的子数组，并满足以下条件：</p><p>nums 中的 每个 元素都必须 恰好 存在于某个子数组中。<br>子数组中 任意 两个元素的差必须小于或等于 k 。<br>返回一个 二维数组 ，包含所有的子数组。如果不可能满足条件，就返回一个空数组。如果有多个答案，返回 任意一个 即可。<br><img src="/img/%E5%88%92%E5%88%86%E6%95%B0%E7%BB%84%E5%B9%B6%E6%BB%A1%E8%B6%B3%E6%9C%80%E5%A4%A7%E5%B7%AE%E9%99%90%E5%88%B6.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">divideArray</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> k) &#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; result;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; empty;<br>        <br>        <span class="hljs-keyword">if</span>(n%<span class="hljs-number">3</span> != <span class="hljs-number">0</span>)&#123;<span class="hljs-keyword">return</span> empty;&#125;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;n; i = i + <span class="hljs-number">3</span>)&#123;<br>            <span class="hljs-type">int</span> left = nums[i];<br>            <span class="hljs-type">int</span> middle = nums[i+<span class="hljs-number">1</span>];<br>            <span class="hljs-type">int</span> right = nums[i+<span class="hljs-number">2</span>];<br>            <span class="hljs-keyword">if</span>(right-left&lt;=k)&#123;result.<span class="hljs-built_in">push_back</span>(&#123;left,middle,right&#125;);&#125;<br>            <span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">return</span> empty;&#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="2-使数组成为等数数组的最小代价"><a href="#2-使数组成为等数数组的最小代价" class="headerlink" title="2.  使数组成为等数数组的最小代价"></a>2.  使数组成为等数数组的最小代价</h1><p>给你一个长度为 n 下标从 0 开始的整数数组 nums 。</p><p>你可以对 nums 执行特殊操作 任意次 （也可以 0 次）。每一次特殊操作中，你需要 按顺序 执行以下步骤：</p><p>从范围 [0, n - 1] 里选择一个下标 i 和一个 正 整数 x 。<br>将 |nums[i] - x| 添加到总代价里。<br>将 nums[i] 变为 x 。<br>如果一个正整数正着读和反着读都相同，那么我们称这个数是 回文数 。比方说，121 ，2552 和 65756 都是回文数，但是 24 ，46 ，235 都不是回文数。</p><p>如果一个数组中的所有元素都等于一个整数 y ，且 y 是一个小于 109 的 回文数 ，那么我们称这个数组是一个 等数数组 。</p><p>请你返回一个整数，表示执行任意次特殊操作后使 nums 成为 等数数组 的 最小 总代价。<br><img src="/img/%E4%BD%BF%E6%95%B0%E7%BB%84%E6%88%90%E4%B8%BA%E7%AD%89%E6%95%B0%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E4%BB%A3%E4%BB%B7.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; <span class="hljs-title">findNum</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> input)</span></span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; <span class="hljs-title">result</span><span class="hljs-params">(<span class="hljs-number">2</span>,<span class="hljs-number">-1</span>)</span></span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">long</span> <span class="hljs-type">long</span> i = input; i&lt;= <span class="hljs-number">1000000000</span>; i++)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isTrue</span>(i))&#123;<br>                result[<span class="hljs-number">0</span>] = i;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">long</span> <span class="hljs-type">long</span> i = input; i&gt;=<span class="hljs-number">1</span>; i--)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isTrue</span>(i))&#123;<br>                result[<span class="hljs-number">1</span>] = i;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isTrue</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> input)</span></span>&#123;<br>        string str = <span class="hljs-built_in">to_string</span>(input);<br>        <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> right = str.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span>(left&lt;right)&#123;<br>            <span class="hljs-keyword">if</span>(str[left] != str[right])&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<br>            left++;<br>            right--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">minimumCost</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> result = <span class="hljs-number">9223372036854775807</span>;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> middle_down = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> middle_up = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> palindrome_number;<br>        vector&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; palindrome_list;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">if</span>(n%<span class="hljs-number">2</span> == <span class="hljs-number">1</span>)&#123;<br>            vector&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; tmp_list;<br>            <br>            middle_up = nums[n/<span class="hljs-number">2</span>];<br>            tmp_list = <span class="hljs-built_in">findNum</span>(middle_up);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;tmp_list.<span class="hljs-built_in">size</span>(); i++)&#123;<br>                <span class="hljs-keyword">if</span>(tmp_list[i]&gt;<span class="hljs-number">0</span>)&#123;<br>                    palindrome_list.<span class="hljs-built_in">push_back</span>(tmp_list[i]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            vector&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; palindrome_list1;<br>            vector&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; palindrome_list2;<br>            <br>            middle_down = (nums[n/<span class="hljs-number">2</span>] + nums[(n/<span class="hljs-number">2</span>)<span class="hljs-number">-1</span>])/<span class="hljs-number">2</span>;<br>            middle_up = middle_down + <span class="hljs-number">1</span>;<br>            palindrome_list1 = <span class="hljs-built_in">findNum</span>(middle_up);<br>            palindrome_list2 = <span class="hljs-built_in">findNum</span>(middle_down);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;palindrome_list1.<span class="hljs-built_in">size</span>(); i++)&#123;<br>                <span class="hljs-keyword">if</span>(palindrome_list1[i] != palindrome_list2[<span class="hljs-number">0</span>] &amp;&amp; palindrome_list1[i] != palindrome_list2[<span class="hljs-number">1</span>] &amp;&amp; palindrome_list1[i]&gt;<span class="hljs-number">0</span>)&#123;<br>                    palindrome_list.<span class="hljs-built_in">push_back</span>(palindrome_list1[i]);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;palindrome_list2.<span class="hljs-built_in">size</span>(); i++)&#123;<br>                <span class="hljs-keyword">if</span>(palindrome_list1[i]&gt;<span class="hljs-number">0</span>)&#123;<br>                    palindrome_list.<span class="hljs-built_in">push_back</span>(palindrome_list2[i]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;palindrome_list.<span class="hljs-built_in">size</span>(); i++)&#123;<br>                <span class="hljs-type">long</span> <span class="hljs-type">long</span> tmp_result = <span class="hljs-number">0</span>;<br>            <br>                palindrome_number = palindrome_list[i];<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j&lt;n; j++)&#123;<br>                    tmp_result += <span class="hljs-built_in">abs</span>(palindrome_number-nums[j]);<br>                &#125;<br>                result = <span class="hljs-built_in">min</span>(result,tmp_result);  <br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h1 id="3-执行操作使频率分数最大"><a href="#3-执行操作使频率分数最大" class="headerlink" title="3. 执行操作使频率分数最大"></a>3. 执行操作使频率分数最大</h1><p>给你一个下标从 0 开始的整数数组 nums 和一个整数 k 。</p><p>你可以对数组执行 至多 k 次操作：</p><p>从数组中选择一个下标 i ，将 nums[i] 增加 或者 减少 1 。<br>最终数组的频率分数定义为数组中众数的 频率 。</p><p>请你返回你可以得到的 最大 频率分数。</p><p>众数指的是数组中出现次数最多的数。一个元素的频率指的是数组中这个元素的出现次数。<br><img src="/img/%E6%89%A7%E8%A1%8C%E6%93%8D%E4%BD%9C%E4%BD%BF%E9%A2%91%E7%8E%87%E5%88%86%E6%95%B0%E6%9C%80%E5%A4%A7.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxFrequencyScore</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">long</span> <span class="hljs-type">long</span> k)</span> </span>&#123;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; <span class="hljs-title">presum</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span></span>;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> start = <span class="hljs-number">0</span>;<br><br>        presum[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i&lt;=n; i++)&#123;<br>            presum[i] = presum[i<span class="hljs-number">-1</span>] + nums[i<span class="hljs-number">-1</span>];<br>        &#125;<br>        <span class="hljs-keyword">auto</span> operation_num = [&amp;](<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> r) -&gt; <span class="hljs-type">long</span> <span class="hljs-type">long</span>&#123;<br>            <span class="hljs-type">long</span> <span class="hljs-type">long</span> left = (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)nums[m]*(m-l) - presum[m] + presum[l];<br>            <span class="hljs-type">long</span> <span class="hljs-type">long</span> right = presum[r+<span class="hljs-number">1</span>] - presum[m+<span class="hljs-number">1</span>] - (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)nums[m]*(r-m);<br>            <span class="hljs-keyword">return</span> left + right;<br>        &#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-built_in">operation_num</span>(start, (start+i)/<span class="hljs-number">2</span>, i) &gt; k)&#123;<br>                start++;<br>            &#125;<br>            ans = <span class="hljs-built_in">max</span>(ans,i-start+<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>    <br>&#125;;<br></code></pre></td></tr></table></figure><p>@版权归Leetcode所有</p>]]></content>
    
    
    <categories>
      
      <category>Daily Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-Day7</title>
    <link href="/2023/12/16/Algorithms/LeetCode/LeetCode-20231216/"/>
    <url>/2023/12/16/Algorithms/LeetCode/LeetCode-20231216/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="1-元素计数"><a href="#1-元素计数" class="headerlink" title="1. 元素计数"></a>1. 元素计数</h1><p>给你一个整数数组 nums ，统计并返回在 nums 中同时至少具有一个严格较小元素和一个严格较大元素的元素数目。<br><img src="/img/%E5%85%83%E7%B4%A0%E8%AE%A1%E6%95%B0.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">countElements</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; vec;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">if</span>(n &lt; <span class="hljs-number">2</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-type">int</span> left = nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> right = nums[n<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">1</span>; i&lt;n<span class="hljs-number">-1</span>; i++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[i] != left &amp;&amp; nums[i] != right)&#123;<br>                result++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="2-统计圆内格点数目"><a href="#2-统计圆内格点数目" class="headerlink" title="2.  统计圆内格点数目"></a>2.  统计圆内格点数目</h1><p>给你一个二维整数数组 circles ，其中 circles[i] &#x3D; [xi, yi, ri] 表示网格上圆心为 (xi, yi) 且半径为 ri 的第 i 个圆，返回出现在 至少一个 圆内的 格点数目 。<br><img src="/img/%E7%BB%9F%E8%AE%A1%E5%9C%86%E5%86%85%E6%A0%BC%E7%82%B9%E6%95%B0%E7%9B%AE.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">countLatticePoints</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; circles)</span> </span>&#123;<br>        <span class="hljs-type">int</span> left = INT_MAX;<br>        <span class="hljs-type">int</span> right = INT_MIN;<br>        <span class="hljs-type">int</span> up = INT_MIN;<br>        <span class="hljs-type">int</span> down = INT_MAX;<br>        <span class="hljs-type">int</span> n = circles.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-type">int</span> cc_x = circles[i][<span class="hljs-number">0</span>];<br>            <span class="hljs-type">int</span> cc_y = circles[i][<span class="hljs-number">1</span>];<br>            <span class="hljs-type">int</span> r = circles[i][<span class="hljs-number">2</span>];<br>            left = <span class="hljs-built_in">min</span>(left, cc_x-r);<br>            right = <span class="hljs-built_in">max</span>(right, cc_x+r);<br>            up = <span class="hljs-built_in">max</span>(up, cc_y+r);<br>            down = <span class="hljs-built_in">min</span>(down, cc_y-r);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = left; i&lt;=right; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = down; j&lt;=up; j++)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> index = <span class="hljs-number">0</span>; index&lt;n; index++)&#123;<br>                    <span class="hljs-type">int</span> x = circles[index][<span class="hljs-number">0</span>];<br>                    <span class="hljs-type">int</span> y = circles[index][<span class="hljs-number">1</span>];<br>                    <span class="hljs-type">int</span> R = circles[index][<span class="hljs-number">2</span>];<br>                    <span class="hljs-keyword">if</span>((i-x)*(i-x) + (j-y)*(j-y) &lt;= R*R)&#123;<br>                        result++;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="3-反转二叉树的奇数层"><a href="#3-反转二叉树的奇数层" class="headerlink" title="3. 反转二叉树的奇数层"></a>3. 反转二叉树的奇数层</h1><p>给你一棵 完美 二叉树的根节点 root ，请你反转这棵树中每个 奇数 层的节点值。</p><p>例如，假设第 3 层的节点值是 [2,1,3,4,7,11,29,18] ，那么反转后它应该变成 [18,29,11,7,4,3,1,2] 。<br>反转后，返回树的根节点。</p><p>完美 二叉树需满足：二叉树的所有父节点都有两个子节点，且所有叶子节点都在同一层。</p><p>节点的 层数 等于该节点到根节点之间的边数。<br><img src="/img/%E5%8F%8D%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%A5%87%E6%95%B0%E5%B1%82.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">reverseOddLevels</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        queue&lt;TreeNode*&gt; q;<br>        <span class="hljs-type">bool</span> isOdd = <span class="hljs-literal">false</span>;<br>        <br>        q.<span class="hljs-built_in">push</span>(root);<br>        <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())&#123;<br>            <span class="hljs-type">int</span> n = q.<span class="hljs-built_in">size</span>();<br>            vector&lt;TreeNode*&gt; arr;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>                TreeNode* newnode = q.<span class="hljs-built_in">front</span>();<br>                q.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-keyword">if</span>(isOdd)&#123;arr.<span class="hljs-built_in">push_back</span>(newnode);&#125;<br>                <span class="hljs-keyword">if</span>(newnode -&gt; left &amp;&amp; newnode -&gt;right)&#123;<br>                    q.<span class="hljs-built_in">push</span>(newnode -&gt; left);<br>                    q.<span class="hljs-built_in">push</span>(newnode -&gt;right);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(isOdd)&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;arr.<span class="hljs-built_in">size</span>(); i = i+<span class="hljs-number">2</span>)&#123;<br>                    <span class="hljs-built_in">swap</span>(arr[i] -&gt; val, arr[arr.<span class="hljs-built_in">size</span>()-i<span class="hljs-number">-1</span>] -&gt; val);<br>                &#125;<br>            &#125;<br>            isOdd ^= <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h1 id="4-图中的最短环"><a href="#4-图中的最短环" class="headerlink" title="4. 图中的最短环"></a>4. 图中的最短环</h1><p>现有一个含 n 个顶点的 双向 图，每个顶点按从 0 到 n - 1 标记。图中的边由二维整数数组 edges 表示，其中 edges[i] &#x3D; [ui, vi] 表示顶点 ui 和 vi 之间存在一条边。每对顶点最多通过一条边连接，并且不存在与自身相连的顶点。</p><p>返回图中 最短 环的长度。如果不存在环，则返回 -1 。</p><p>环 是指以同一节点开始和结束，并且路径中的每条边仅使用一次。<br><img src="/img/%E5%9B%BE%E4%B8%AD%E7%9A%84%E6%9C%80%E7%9F%AD%E7%8E%AF.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findShortestCycle</span><span class="hljs-params">(<span class="hljs-type">int</span> n, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">num_map</span>(n);<br>        <span class="hljs-type">int</span> ans = INT_MAX;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;edges.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-type">int</span> x = edges[i][<span class="hljs-number">0</span>];<br>            <span class="hljs-type">int</span> y = edges[i][<span class="hljs-number">1</span>];<br>            num_map[x].<span class="hljs-built_in">push_back</span>(y);<br>            num_map[y].<span class="hljs-built_in">push_back</span>(x);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            ans = <span class="hljs-built_in">min</span>(ans, <span class="hljs-built_in">bfs</span>(i, n, num_map));<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans &lt; INT_MAX? ans:<span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> st, <span class="hljs-type">int</span> n, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; g)</span></span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">count</span><span class="hljs-params">(n, <span class="hljs-number">-1</span>)</span></span>;<br>        queue&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; q;<br>        <span class="hljs-type">int</span> ans = INT_MAX;<br><br>        q.<span class="hljs-built_in">emplace</span>(st,<span class="hljs-number">-1</span>);<br>        count[st] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())&#123;<br>            <span class="hljs-keyword">auto</span> [end,start] = q.<span class="hljs-built_in">front</span>();<br>            q.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> newend:g[end])&#123;<br>                <span class="hljs-keyword">if</span>(count[newend] &lt; <span class="hljs-number">0</span>)&#123;<br>                    count[newend] = count[end] + <span class="hljs-number">1</span>;<br>                    q.<span class="hljs-built_in">emplace</span>(newend,end);<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(newend != start)&#123;ans = <span class="hljs-built_in">min</span>(ans,count[end] + count[newend]+<span class="hljs-number">1</span>);&#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>@版权归Leetcode所有</p>]]></content>
    
    
    <categories>
      
      <category>Daily Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-待复习</title>
    <link href="/2023/12/15/Algorithms/LeetCode/LeetCode-%E5%BE%85%E5%A4%8D%E4%B9%A0/"/>
    <url>/2023/12/15/Algorithms/LeetCode/LeetCode-%E5%BE%85%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="1-用邮票贴满网格图"><a href="#1-用邮票贴满网格图" class="headerlink" title="1. 用邮票贴满网格图"></a>1. 用邮票贴满网格图</h1><p>给你一个 m x n 的二进制矩阵 grid ，每个格子要么为 0 （空）要么为 1 （被占据）。</p><p>给你邮票的尺寸为 stampHeight x stampWidth 。我们想将邮票贴进二进制矩阵中，且满足以下 限制 和 要求 ：</p><ol><li>覆盖所有 空 格子。</li><li>不覆盖任何 被占据 的格子。</li><li>我们可以放入任意数目的邮票。</li><li>邮票可以相互有 重叠 部分。</li><li>邮票不允许 旋转 。</li><li>邮票必须完全在矩阵 内 。<br>如果在满足上述要求的前提下，可以放入邮票，请返回 true ，否则返回 false 。<br><img src="/img/%E7%94%A8%E9%82%AE%E7%A5%A8%E8%B4%B4%E6%BB%A1%E7%BD%91%E6%A0%BC%E5%9B%BE.png"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">possibleToStamp</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; grid, <span class="hljs-type">int</span> stampHeight, <span class="hljs-type">int</span> stampWidth)</span> </span>&#123;<br>        <span class="hljs-type">int</span> m = grid.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> n = grid[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">s</span>(m+<span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>));<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">d</span>(m+<span class="hljs-number">2</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n+<span class="hljs-number">2</span>,<span class="hljs-number">0</span>));<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;m; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j&lt;n; j++)&#123;<br>                s[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>] = s[i][j+<span class="hljs-number">1</span>] + s[i+<span class="hljs-number">1</span>][j] - s[i][j]+grid[i][j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i1 = stampHeight; i1&lt;=m; i1++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j1 = stampWidth; j1&lt;=n; j1++)&#123;<br>                <span class="hljs-type">int</span> i2 = i1-stampHeight+<span class="hljs-number">1</span>;<br>                <span class="hljs-type">int</span> j2 = j1-stampWidth+<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span>(s[i1][j1] - s[i2<span class="hljs-number">-1</span>][j1] - s[i1][j2<span class="hljs-number">-1</span>] + s[i2<span class="hljs-number">-1</span>][j2<span class="hljs-number">-1</span>] == <span class="hljs-number">0</span>)&#123;<br>                    d[i2][j2]++;<br>                    d[i1+<span class="hljs-number">1</span>][j2]--;<br>                    d[i2][j1+<span class="hljs-number">1</span>]--;<br>                    d[i1+<span class="hljs-number">1</span>][j1+<span class="hljs-number">1</span>]++;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;m; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j&lt;n; j++)&#123;<br>                d[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>] += d[i][j+<span class="hljs-number">1</span>]+d[i+<span class="hljs-number">1</span>][j] - d[i][j];<br>                <span class="hljs-keyword">if</span>(grid[i][j] == <span class="hljs-number">0</span> &amp;&amp; d[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ol><h1 id="2-美丽塔-II"><a href="#2-美丽塔-II" class="headerlink" title="2. 美丽塔 II"></a>2. 美丽塔 II</h1><p>给你一个长度为 n 下标从 0 开始的整数数组 maxHeights 。</p><p>你的任务是在坐标轴上建 n 座塔。第 i 座塔的下标为 i ，高度为 heights[i] 。</p><p>如果以下条件满足，我们称这些塔是 美丽 的：</p><ol><li>1 &lt;&#x3D; heights[i] &lt;&#x3D; maxHeights[i]</li><li>heights 是一个 山脉 数组。<br>如果存在下标 i 满足以下条件，那么我们称数组 heights 是一个 山脉 数组：</li></ol><ul><li>对于所有 0 &lt; j &lt;&#x3D; i ，都有 heights[j - 1] &lt;&#x3D; heights[j]</li><li>对于所有 i &lt;&#x3D; k &lt; n - 1 ，都有 heights[k + 1] &lt;&#x3D; heights[k]<br>请你返回满足 美丽塔 要求的方案中，高度和的最大值 。<br><img src="/img/%E7%BE%8E%E4%B8%BD%E5%A1%94II.png"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">maximumSumOfHeights</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; maxHeights)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = maxHeights.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; <span class="hljs-title">after</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span></span>;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> sum = <span class="hljs-number">0</span>;<br>        stack&lt;<span class="hljs-type">int</span>&gt; st;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> result = <span class="hljs-number">0</span>;<br>        st.<span class="hljs-built_in">push</span>(n);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n<span class="hljs-number">-1</span>; i&gt;=<span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-keyword">while</span>(st.<span class="hljs-built_in">size</span>()&gt;<span class="hljs-number">1</span> &amp;&amp; maxHeights[i] &lt; maxHeights[st.<span class="hljs-built_in">top</span>()])&#123;<br>                <span class="hljs-type">int</span> j = st.<span class="hljs-built_in">top</span>();<br>                st.<span class="hljs-built_in">pop</span>();<br>                sum -= (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)maxHeights[j]*(st.<span class="hljs-built_in">top</span>()-j);<br>            &#125;<br>            sum += (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)maxHeights[i]*(st.<span class="hljs-built_in">top</span>()-i);<br>            after[i] = sum;<br>            st.<span class="hljs-built_in">push</span>(i);<br>        &#125;<br>        st = <span class="hljs-built_in">stack</span>&lt;<span class="hljs-type">int</span>&gt;();<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> pre = <span class="hljs-number">0</span>;<br>        st.<span class="hljs-built_in">push</span>(<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j&lt;n; j++)&#123;<br>            <span class="hljs-keyword">while</span>(st.<span class="hljs-built_in">size</span>()&gt;<span class="hljs-number">1</span> &amp;&amp; maxHeights[j] &lt; maxHeights[st.<span class="hljs-built_in">top</span>()])&#123;<br>                <span class="hljs-type">int</span> k = st.<span class="hljs-built_in">top</span>();<br>                st.<span class="hljs-built_in">pop</span>();<br>                pre -= (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)maxHeights[k]*(k-st.<span class="hljs-built_in">top</span>());<br>            &#125;<br>            pre += (<span class="hljs-type">long</span> <span class="hljs-type">long</span>)maxHeights[j]*(j-st.<span class="hljs-built_in">top</span>());<br>            result = <span class="hljs-built_in">max</span>(result, pre + after[j+<span class="hljs-number">1</span>]);<br>            st.<span class="hljs-built_in">push</span>(j);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>@版权归Leetcode所有</li></ul>]]></content>
    
    
    <categories>
      
      <category>Daily Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-Day6</title>
    <link href="/2023/12/15/Algorithms/LeetCode/LeetCode-20231215/"/>
    <url>/2023/12/15/Algorithms/LeetCode/LeetCode-20231215/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="1-子数组和排序后的区间和"><a href="#1-子数组和排序后的区间和" class="headerlink" title="1. 子数组和排序后的区间和"></a>1. 子数组和排序后的区间和</h1><p>给你一个数组 nums ，它包含 n 个正整数。你需要计算所有非空连续子数组的和，并将它们按升序排序，得到一个新的包含 n * (n + 1) &#x2F; 2 个数字的数组。</p><p>请你返回在新数组中下标为 left 到 right （下标从 1 开始）的所有数字和（包括左右端点）。由于答案可能很大，请你将它对 10^9 + 7 取模后返回。<br><img src="/img/%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C%E6%8E%92%E5%BA%8F%E5%90%8E%E7%9A%84%E5%8C%BA%E9%97%B4%E5%92%8C.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rangeSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> </span>&#123;<br>        <span class="hljs-type">const</span> <span class="hljs-type">int</span> MODULO = <span class="hljs-number">1000000007</span>;<br>        vector&lt;<span class="hljs-type">int</span>&gt; result;<br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br><br>        result.<span class="hljs-built_in">push_back</span>(nums[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i; j&gt;=<span class="hljs-number">0</span>; j--)&#123;<br>                sum += nums[j];<br>                result.<span class="hljs-built_in">push_back</span>(sum);<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(result.<span class="hljs-built_in">begin</span>(),result.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = left<span class="hljs-number">-1</span>; i&lt;=right<span class="hljs-number">-1</span>; i++)&#123;<br>            res += result[i];<br>            res = res%MODULO;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="2-将字符串翻转到单调递增"><a href="#2-将字符串翻转到单调递增" class="headerlink" title="2.  将字符串翻转到单调递增"></a>2.  将字符串翻转到单调递增</h1><p>如果一个二进制字符串，是以一些 0（可能没有 0）后面跟着一些 1（也可能没有 1）的形式组成的，那么该字符串是 单调递增 的。</p><p>给你一个二进制字符串 s，你可以将任何 0 翻转为 1 或者将 1 翻转为 0 。</p><p>返回使 s 单调递增的最小翻转次数。<br><img src="/img/%E5%B0%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BF%BB%E8%BD%AC%E5%88%B0%E5%8D%95%E8%B0%83%E9%80%92%E5%A2%9E.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minFlipsMonoIncr</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>();<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(n+<span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;0&#x27;</span>)&#123;<br>                dp[i+<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = dp[i][<span class="hljs-number">0</span>];<br>                dp[i+<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-built_in">min</span>(dp[i][<span class="hljs-number">0</span>], dp[i][<span class="hljs-number">1</span>]) + <span class="hljs-number">1</span>; <br>            &#125;<br>            <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>                dp[i+<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = dp[i][<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>;<br>                dp[i+<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-built_in">min</span>(dp[i][<span class="hljs-number">0</span>], dp[i][<span class="hljs-number">1</span>]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(dp[n][<span class="hljs-number">0</span>],dp[n][<span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="3-使数组元素全部相等的最少操作次数"><a href="#3-使数组元素全部相等的最少操作次数" class="headerlink" title="3. 使数组元素全部相等的最少操作次数"></a>3. 使数组元素全部相等的最少操作次数</h1><p>给你一个正整数数组 nums 。</p><p>同时给你一个长度为 m 的整数数组 queries 。第 i 个查询中，你需要将 nums 中所有元素变成 queries[i] 。你可以执行以下操作 任意 次：</p><p>将数组里一个元素 增大 或者 减小 1 。<br>请你返回一个长度为 m 的数组 answer ，其中 answer[i]是将 nums 中所有元素变成 queries[i] 的 最少 操作次数。</p><p>注意，每次查询后，数组变回最开始的值。<br><img src="/img/%E4%BD%BF%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E5%85%A8%E9%83%A8%E7%9B%B8%E7%AD%89%E7%9A%84%E6%9C%80%E5%B0%91%E6%93%8D%E4%BD%9C%E6%AC%A1%E6%95%B0.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; <span class="hljs-title">minOperations</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, vector&lt;<span class="hljs-type">int</span>&gt;&amp; queries)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; result;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> breakpoint = <span class="hljs-number">0</span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; <span class="hljs-title">presum</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span></span>;<br>        presum[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>; i&lt;n; i++)&#123;<br>            presum[i+<span class="hljs-number">1</span>] = presum[i] + nums[i];<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; queries.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-type">long</span> <span class="hljs-type">long</span> tmp = queries[i];<br>            breakpoint = <span class="hljs-built_in">findlocation</span>(nums, tmp);<br>            <span class="hljs-type">long</span> <span class="hljs-type">long</span> left = breakpoint*tmp - presum[breakpoint];<br>            <span class="hljs-type">long</span> <span class="hljs-type">long</span> right = presum[n] - presum[breakpoint+<span class="hljs-number">1</span>]  - (n-breakpoint<span class="hljs-number">-1</span>)*tmp;<br>            result.<span class="hljs-built_in">push_back</span>(left+right + <span class="hljs-built_in">abs</span>(nums[breakpoint] - tmp));<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">findlocation</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">long</span> <span class="hljs-type">long</span> target)</span></span>&#123;<br>        <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> right = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> middle = (left+right)/<span class="hljs-number">2</span>;;<br><br>        <span class="hljs-keyword">while</span>(left &lt; right)&#123;<br>            <br>            <span class="hljs-keyword">if</span>(nums[middle] == target)&#123;<span class="hljs-keyword">return</span> middle;&#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[middle] &lt; target)&#123;<br>                left  = middle+<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                right = middle;<br>            &#125;<br>            middle = (left+right)/<span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> middle;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//lower_bound() 函数用于在指定区域内查找不小于目标值的第一个元素。也就是说，使用该函数在指定范围内查找某个目标值时，最终查找到的不一定是和目标值相等的元素，还可能是比目标值大的元素。</span><br></code></pre></td></tr></table></figure><h1 id="4-用邮票贴满网格图"><a href="#4-用邮票贴满网格图" class="headerlink" title="4. 用邮票贴满网格图"></a>4. 用邮票贴满网格图</h1><p>给你一个 m x n 的二进制矩阵 grid ，每个格子要么为 0 （空）要么为 1 （被占据）。</p><p>给你邮票的尺寸为 stampHeight x stampWidth 。我们想将邮票贴进二进制矩阵中，且满足以下 限制 和 要求 ：</p><ol><li>覆盖所有 空 格子。</li><li>不覆盖任何 被占据 的格子。</li><li>我们可以放入任意数目的邮票。</li><li>邮票可以相互有 重叠 部分。</li><li>邮票不允许 旋转 。</li><li>邮票必须完全在矩阵 内 。<br>如果在满足上述要求的前提下，可以放入邮票，请返回 true ，否则返回 false 。<br><img src="/img/%E7%94%A8%E9%82%AE%E7%A5%A8%E8%B4%B4%E6%BB%A1%E7%BD%91%E6%A0%BC%E5%9B%BE.png"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">possibleToStamp</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; grid, <span class="hljs-type">int</span> stampHeight, <span class="hljs-type">int</span> stampWidth)</span> </span>&#123;<br>        <span class="hljs-type">int</span> m = grid.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> n = grid[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">s</span>(m+<span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>));<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">d</span>(m+<span class="hljs-number">2</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n+<span class="hljs-number">2</span>,<span class="hljs-number">0</span>));<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;m; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j&lt;n; j++)&#123;<br>                s[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>] = s[i][j+<span class="hljs-number">1</span>] + s[i+<span class="hljs-number">1</span>][j] - s[i][j]+grid[i][j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i1 = stampHeight; i1&lt;=m; i1++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j1 = stampWidth; j1&lt;=n; j1++)&#123;<br>                <span class="hljs-type">int</span> i2 = i1-stampHeight+<span class="hljs-number">1</span>;<br>                <span class="hljs-type">int</span> j2 = j1-stampWidth+<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span>(s[i1][j1] - s[i2<span class="hljs-number">-1</span>][j1] - s[i1][j2<span class="hljs-number">-1</span>] + s[i2<span class="hljs-number">-1</span>][j2<span class="hljs-number">-1</span>] == <span class="hljs-number">0</span>)&#123;<br>                    d[i2][j2]++;<br>                    d[i1+<span class="hljs-number">1</span>][j2]--;<br>                    d[i2][j1+<span class="hljs-number">1</span>]--;<br>                    d[i1+<span class="hljs-number">1</span>][j1+<span class="hljs-number">1</span>]++;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;m; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j&lt;n; j++)&#123;<br>                d[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>] += d[i][j+<span class="hljs-number">1</span>]+d[i+<span class="hljs-number">1</span>][j] - d[i][j];<br>                <span class="hljs-keyword">if</span>(grid[i][j] == <span class="hljs-number">0</span> &amp;&amp; d[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>] == <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>@版权归Leetcode所有</li></ol>]]></content>
    
    
    <categories>
      
      <category>Daily Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-Day5</title>
    <link href="/2023/12/13/Algorithms/LeetCode/LeetCode-20231213/"/>
    <url>/2023/12/13/Algorithms/LeetCode/LeetCode-20231213/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="1-找出所有行中最小公共元素"><a href="#1-找出所有行中最小公共元素" class="headerlink" title="1. 找出所有行中最小公共元素"></a>1. 找出所有行中最小公共元素</h1><p>给你一个 m x n 的矩阵 mat，其中每一行的元素均符合 严格递增 。请返回 所有行中的 最小公共元素 。</p><p>如果矩阵中没有这样的公共元素，就请返回 -1。<br><img src="/img/%E6%89%BE%E5%87%BA%E6%89%80%E6%9C%89%E8%A1%8C%E4%B8%AD%E6%9C%80%E5%B0%8F%E5%85%AC%E5%85%B1%E5%85%83%E7%B4%A0.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">smallestCommonElement</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; mat)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; result;<br>        result = <span class="hljs-built_in">cycle</span>(<span class="hljs-number">0</span>, mat.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>, mat);<br>        <span class="hljs-built_in">sort</span>(result.<span class="hljs-built_in">begin</span>(), result.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">if</span>(result.<span class="hljs-built_in">size</span>())&#123;<span class="hljs-keyword">return</span> result[<span class="hljs-number">0</span>];&#125;<br>        <span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;&#125;<br>    &#125;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">cycle</span><span class="hljs-params">(<span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; mat)</span></span>&#123;<br><br>        <span class="hljs-keyword">if</span>(left == right)&#123;<span class="hljs-keyword">return</span> mat[left];&#125;<br>        <span class="hljs-keyword">if</span>(right - left == <span class="hljs-number">1</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-built_in">intersection</span>(mat[left], mat[right]);&#125;<br><br>        <span class="hljs-type">int</span> middle = (left+right)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">intersection</span>(<span class="hljs-built_in">cycle</span>(left, middle, mat), <span class="hljs-built_in">cycle</span>(middle+<span class="hljs-number">1</span>, right, mat));<br>    &#125;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">intersection</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; a, vector&lt;<span class="hljs-type">int</span>&gt; b)</span></span>&#123;<br>        unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">bool</span>&gt; int_mapping;<br>        vector&lt;<span class="hljs-type">int</span>&gt; result;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;a.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            int_mapping[a[i]] = <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;b.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-keyword">if</span>(int_mapping.<span class="hljs-built_in">find</span>(b[i]) != int_mapping.<span class="hljs-built_in">end</span>())&#123;result.<span class="hljs-built_in">push_back</span>(b[i]);&#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="2-构成交替字符串需要的最小交换次数"><a href="#2-构成交替字符串需要的最小交换次数" class="headerlink" title="2.  构成交替字符串需要的最小交换次数"></a>2.  构成交替字符串需要的最小交换次数</h1><p>给你一个二进制字符串 s ，现需要将其转化为一个 交替字符串 。请你计算并返回转化所需的 最小 字符交换次数，如果无法完成转化，返回 -1 。</p><p>交替字符串 是指：相邻字符之间不存在相等情况的字符串。例如，字符串 “010” 和 “1010” 属于交替字符串，但 “0100” 不是。</p><p>任意两个字符都可以进行交换，不必相邻 。<br><img src="/img/%E6%9E%84%E6%88%90%E4%BA%A4%E6%9B%BF%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%9C%80%E8%A6%81%E7%9A%84%E6%9C%80%E5%B0%8F%E4%BA%A4%E6%8D%A2%E6%AC%A1%E6%95%B0.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minSwaps</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; binary_mapping;<br>        vector&lt;<span class="hljs-type">int</span>&gt; continu_1;<br>        <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        string target1=<span class="hljs-string">&quot;&quot;</span>;<br>        string target2=<span class="hljs-string">&quot;&quot;</span>;<br><br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>        binary_mapping[<span class="hljs-string">&#x27;0&#x27;</span>] = <span class="hljs-number">0</span>;<br>        binary_mapping[<span class="hljs-string">&#x27;1&#x27;</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> c:s)&#123;<br>            <span class="hljs-type">char</span> tmp = c;<br>            <span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;0&#x27;</span>)&#123;binary_mapping[<span class="hljs-string">&#x27;0&#x27;</span>]++;&#125;<br>            <span class="hljs-keyword">else</span>&#123;binary_mapping[<span class="hljs-string">&#x27;1&#x27;</span>]++;&#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(binary_mapping[<span class="hljs-string">&#x27;0&#x27;</span>]-binary_mapping[<span class="hljs-string">&#x27;1&#x27;</span>]) &gt; <span class="hljs-number">1</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;&#125;<br><br>        <span class="hljs-keyword">if</span>((binary_mapping[<span class="hljs-string">&#x27;0&#x27;</span>]-binary_mapping[<span class="hljs-string">&#x27;1&#x27;</span>]) == <span class="hljs-number">1</span>)&#123;target1 += <span class="hljs-string">&#x27;0&#x27;</span>;&#125;<br>        <span class="hljs-keyword">if</span>((binary_mapping[<span class="hljs-string">&#x27;0&#x27;</span>]-binary_mapping[<span class="hljs-string">&#x27;1&#x27;</span>]) == <span class="hljs-number">-1</span>)&#123;target2 += <span class="hljs-string">&#x27;1&#x27;</span>;&#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i= <span class="hljs-number">0</span>; i&lt;(binary_mapping[<span class="hljs-string">&#x27;0&#x27;</span>]+binary_mapping[<span class="hljs-string">&#x27;1&#x27;</span>])/<span class="hljs-number">2</span>; i++)&#123;<br>            target1 += <span class="hljs-string">&quot;10&quot;</span>;<br>            target2 += <span class="hljs-string">&quot;01&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>((binary_mapping[<span class="hljs-string">&#x27;0&#x27;</span>]-binary_mapping[<span class="hljs-string">&#x27;1&#x27;</span>]) == <span class="hljs-number">-1</span>)&#123;target1 += <span class="hljs-string">&#x27;1&#x27;</span>;&#125;<br>        <span class="hljs-keyword">if</span>((binary_mapping[<span class="hljs-string">&#x27;0&#x27;</span>]-binary_mapping[<span class="hljs-string">&#x27;1&#x27;</span>]) == <span class="hljs-number">1</span>)&#123;target2 += <span class="hljs-string">&#x27;0&#x27;</span>;&#125;<br>        result = <span class="hljs-built_in">min</span>(<span class="hljs-built_in">binarystr_and</span>(target1, s),<span class="hljs-built_in">binarystr_and</span>(target2, s));<br><br>        result = (result == s.<span class="hljs-built_in">size</span>())?<span class="hljs-number">0</span>:result;<br>        <br>        <span class="hljs-keyword">return</span> result/<span class="hljs-number">2</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">binarystr_and</span><span class="hljs-params">(string a, string b)</span></span>&#123;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;a.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-keyword">if</span>(a[i] != b[i])&#123;result += <span class="hljs-number">1</span>;&#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="3-完成所有任务的最少初始能量"><a href="#3-完成所有任务的最少初始能量" class="headerlink" title="3. 完成所有任务的最少初始能量"></a>3. 完成所有任务的最少初始能量</h1><p>给你一个任务数组 tasks ，其中 tasks[i] &#x3D; [actuali, minimumi] ：</p><p>actuali 是完成第 i 个任务 需要耗费 的实际能量。<br>minimumi 是开始第 i 个任务前需要达到的最低能量。<br>比方说，如果任务为 [10, 12] 且你当前的能量为 11 ，那么你不能开始这个任务。如果你当前的能量为 13 ，你可以完成这个任务，且完成它后剩余能量为 3 。</p><p>你可以按照 任意顺序 完成任务。</p><p>请你返回完成所有任务的 最少 初始能量。<br><img src="/img/%E5%AE%8C%E6%88%90%E6%89%80%E6%9C%89%E4%BB%BB%E5%8A%A1%E7%9A%84%E6%9C%80%E5%B0%91%E5%88%9D%E5%A7%8B%E8%83%BD%E9%87%8F.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minimumEffort</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; tasks)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = tasks.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        <br><br>        <span class="hljs-built_in">sort</span>(tasks.<span class="hljs-built_in">begin</span>(), tasks.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt; &amp;a, <span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt; &amp;b) &#123;<span class="hljs-keyword">return</span> a[<span class="hljs-number">1</span>]-a[<span class="hljs-number">0</span>] &lt; b[<span class="hljs-number">1</span>]-b[<span class="hljs-number">0</span>];&#125;);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i =<span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            result = <span class="hljs-built_in">max</span>(result+tasks[i][<span class="hljs-number">0</span>],tasks[i][<span class="hljs-number">1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>@版权归Leetcode所有</p>]]></content>
    
    
    <categories>
      
      <category>Daily Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DOSBox development environment setup</title>
    <link href="/2023/12/12/DOSBox/DOSBox%20development%20environment%20setup/"/>
    <url>/2023/12/12/DOSBox/DOSBox%20development%20environment%20setup/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="1-Download-DOSBox"><a href="#1-Download-DOSBox" class="headerlink" title="1. Download DOSBox"></a>1. Download DOSBox</h1><p>DosBox download link：<a href="https://sourceforge.net/projects/dosbox/">Click to jump</a><br>DosBox offical link：<a href="https://www.dosbox.com/">Click to jump</a></p><h1 id="2-Download-the-assembly-toolkit"><a href="#2-Download-the-assembly-toolkit" class="headerlink" title="2. Download the assembly toolkit"></a>2. Download the assembly toolkit</h1><p>Download link：<a href="https://github.com/xDarkLemon/DOSBox_MASM/tree/master/masm">Click to jump</a><br>At least 4 files must be included in the toolkit</p><ul><li>masm.exe id the assembler, used to execute the assembly source code (.asm) and obtain the target program (.obj).</li><li>link.exe linkd the program, connect the target program, and get the executable program exe</li><li>debug.exe is the debugger, used to debug executable programs (.exe)</li><li>exe2bin.exe is a post-compiled command line utility available on MS-DOS and other operating systems to convert DOS MZ executable files to COM files</li></ul><h1 id="3-Install-DOSBox"><a href="#3-Install-DOSBox" class="headerlink" title="3.Install DOSBox"></a>3.Install DOSBox</h1><p><img src="/img/Dosbox%E5%AE%89%E8%A3%851.png"><br>Click Next<br><img src="/img/Dosbox%E5%AE%89%E8%A3%852.png"><br>Click Next<br><img src="/img/Dosbox%E5%AE%89%E8%A3%852.png"><br>Here I choose to install to the D drive.</p><p>Note: The selection of the directory here will affect the following instructions to mount the working directory.</p><h1 id="4-Create-a-new-working-directory"><a href="#4-Create-a-new-working-directory" class="headerlink" title="4.Create a new working directory"></a>4.Create a new working directory</h1><p><img src="/img/Dosbox%E6%96%B0%E5%BB%BA%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%951.png"><br>Create a new working directory DOSBox under the D drive, and cut the installed DOSBox-0.74 to the working directory.<br><img src="/img/Dosbox%E6%96%B0%E5%BB%BA%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%952.png"><br>Open the Debug directory, cut the assembly tool package masm to the directory, and create a new folder ASM to store the assembly program you wrote in the future.</p><h1 id="5-Mount-the-working-directory"><a href="#5-Mount-the-working-directory" class="headerlink" title="5.Mount the working directory"></a>5.Mount the working directory</h1><p>The purpose of mounting the working directory here is to enable dosbox to use masm.exe in the configuration tool package<br><img src="/img/Dosbox%E6%8C%82%E8%BD%BD%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%951.png"></p><ul><li>Open the DOSBox installation directory and find the file DOSBox 0.74 Options.bat</li><li>Add the following command below [autoexec]:<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">MOUNT F D:\DOSBox\Debug<br>set PATH=%PATH%;F:\MASM;<br>F:<br>cd F:\ASM<br><br></code></pre></td></tr></table></figure><img src="/img/Dosbox%E6%8C%82%E8%BD%BD%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%952.png"><br>The purpose of this is to avoid having to manually mount it again every time you use DOSBox.<br><img src="/img/Dosbox%E6%8C%82%E8%BD%BD%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%953.png"><br>Start DOSBox 0.74.exe, and the following automatic program execution will appear to verify the validity of the second part above.</li></ul><h1 id="5-Change-the-size-of-the-DOSBox-command-window"><a href="#5-Change-the-size-of-the-DOSBox-command-window" class="headerlink" title="5.Change the size of the DOSBox command window"></a>5.Change the size of the DOSBox command window</h1><p><img src="/img/Dosbox%E6%8C%82%E8%BD%BD%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%951.png"><br>Open the DOSBox installation directory and find the file DOSBox 0.74 Options.bat<br><img src="/img/%E6%9B%B4%E6%94%B9DOSBox%E5%91%BD%E4%BB%A4%E7%AA%97%E5%8F%A3%E5%A4%A7%E5%B0%8F.png"><br>Find the above code block, change the output to ddraw, and windowresolution to the specific size of the command window. Change it according to your own habits. Here the author chose 1200x640 as the size of the command window.</p><p>Note: x in 1200x640 is a lowercase letter x</p>]]></content>
    
    
    <categories>
      
      <category>Operating System</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Environment Setup</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-Day4</title>
    <link href="/2023/12/12/Algorithms/LeetCode/LeetCode-20231212/"/>
    <url>/2023/12/12/Algorithms/LeetCode/LeetCode-20231212/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="1-罗马数字转整数"><a href="#1-罗马数字转整数" class="headerlink" title="1. 罗马数字转整数"></a>1. 罗马数字转整数</h1><p>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</p><p>字符          数值<br>I             1<br>V             5<br>X             10<br>L             50<br>C             100<br>D             500<br>M             1000<br>例如， 罗马数字 2 写做 II ，即为两个并列的 1 。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><p>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。<br>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。<br>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。<br>给定一个罗马数字，将其转换成整数。<br><img src="/img/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">romanToInt</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">char</span>,<span class="hljs-type">int</span>&gt; roam_mapping = &#123;&#123;<span class="hljs-string">&#x27;I&#x27;</span>,<span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-string">&#x27;V&#x27;</span>,<span class="hljs-number">5</span>&#125;, &#123;<span class="hljs-string">&#x27;X&#x27;</span>,<span class="hljs-number">10</span>&#125;,&#123;<span class="hljs-string">&#x27;L&#x27;</span>,<span class="hljs-number">50</span>&#125;,&#123;<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-number">100</span>&#125;,&#123;<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-number">500</span>&#125;,&#123;<span class="hljs-string">&#x27;M&#x27;</span>,<span class="hljs-number">1000</span>&#125;&#125;;<br>        <span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>)&#123;<span class="hljs-keyword">return</span> roam_mapping[s[<span class="hljs-number">0</span>]];&#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;s.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span> ; i++)&#123;<br>            <span class="hljs-keyword">if</span>((<span class="hljs-number">5</span>*roam_mapping[s[i]] == roam_mapping[s[i+<span class="hljs-number">1</span>]]) || (<span class="hljs-number">10</span>*roam_mapping[s[i]] == roam_mapping[s[i+<span class="hljs-number">1</span>]]))&#123;<br>                result = result + roam_mapping[s[i+<span class="hljs-number">1</span>]]-roam_mapping[s[i]];<br>                i++;<br>                <span class="hljs-keyword">if</span>(i == s.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>)&#123;flag = <span class="hljs-literal">true</span>;&#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                result +=roam_mapping[s[i]];<br>                flag = <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!flag)&#123;result+=roam_mapping[s[s.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>]];&#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="2-列举单词的全部缩写"><a href="#2-列举单词的全部缩写" class="headerlink" title="2.  列举单词的全部缩写"></a>2.  列举单词的全部缩写</h1><p>单词的 广义缩写词 可以通过下述步骤构造：先取任意数量的 不重叠、不相邻 的子字符串，再用它们各自的长度进行替换。</p><p>例如，”abcde” 可以缩写为：<br>“a3e”（”bcd” 变为 “3” ）<br>“1bcd1”（”a” 和 “e” 都变为 “1”）<br>“5” (“abcde” 变为 “5”)<br>“abcde” (没有子字符串被代替)<br>然而，这些缩写是 无效的 ：<br>“23”（”ab” 变为 “2” ，”cde” 变为 “3” ）是无效的，因为被选择的字符串是相邻的<br>“22de” (“ab” 变为 “2” ， “bc” 变为 “2”)  是无效的，因为被选择的字符串是重叠的<br>给你一个字符串 word ，返回 一个由 word 的所有可能 广义缩写词 组成的列表 。按 任意顺序 返回答案。<br><img src="/img/%E5%88%97%E4%B8%BE%E5%8D%95%E8%AF%8D%E7%9A%84%E5%85%A8%E9%83%A8%E7%BC%A9%E5%86%99.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;string&gt; res;<br>    <span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">generateAbbreviations</span><span class="hljs-params">(string word)</span> </span>&#123;<br>        <span class="hljs-built_in">traceback</span>(word,<span class="hljs-number">0</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">traceback</span><span class="hljs-params">(string word, <span class="hljs-type">int</span> i, string tmp, <span class="hljs-type">int</span> cnt)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(i == word.<span class="hljs-built_in">size</span>())&#123;<br>            <span class="hljs-keyword">if</span>(cnt&gt;<span class="hljs-number">0</span>)&#123;tmp += <span class="hljs-built_in">to_string</span>(cnt);&#125;<br>            res.<span class="hljs-built_in">push_back</span>(tmp);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">traceback</span>(word, i+<span class="hljs-number">1</span>, tmp, cnt+<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(cnt &gt; <span class="hljs-number">0</span>)&#123;<span class="hljs-built_in">traceback</span>(word, i+<span class="hljs-number">1</span>, tmp + <span class="hljs-built_in">to_string</span>(cnt) + word[i], <span class="hljs-number">0</span>);&#125;<br>            <span class="hljs-keyword">else</span>&#123;<span class="hljs-built_in">traceback</span>(word, i+<span class="hljs-number">1</span>, tmp+ word[i], <span class="hljs-number">0</span>);&#125;<br>        &#125;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="3-最长公共前缀"><a href="#3-最长公共前缀" class="headerlink" title="3. 最长公共前缀"></a>3. 最长公共前缀</h1><p>编写一个函数来查找字符串数组中的最长公共前缀。<br>如果不存在公共前缀，返回空字符串 “”。<br><img src="/img/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">longestCommonPrefix</span><span class="hljs-params">(vector&lt;string&gt;&amp; strs)</span> </span>&#123;<br>        string result = <span class="hljs-string">&quot;&quot;</span>;<br>        map&lt;<span class="hljs-type">int</span>, string&gt; strs_mapping;<br>        <span class="hljs-type">int</span> index = <span class="hljs-number">1</span>;<br>        <br><br>        <span class="hljs-keyword">if</span>(strs.<span class="hljs-built_in">size</span>() == <span class="hljs-number">1</span>)&#123;<span class="hljs-keyword">return</span> strs[<span class="hljs-number">0</span>];&#125;<br>        <span class="hljs-built_in">sort</span>(strs.<span class="hljs-built_in">begin</span>(), strs.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">const</span> string&amp; a,<span class="hljs-type">const</span> string&amp; b)&#123;<span class="hljs-keyword">return</span> a.<span class="hljs-built_in">size</span>()&lt;b.<span class="hljs-built_in">size</span>();&#125;);<br>        string smallest_str = strs[<span class="hljs-number">0</span>];<br><br>        <span class="hljs-keyword">while</span>(index&lt;strs.<span class="hljs-built_in">size</span>())&#123;<br>            result = <span class="hljs-built_in">CommonStr</span>(smallest_str, strs[index]);<br>            <span class="hljs-keyword">if</span>(result == <span class="hljs-string">&quot;&quot;</span>)&#123;<span class="hljs-keyword">break</span>;&#125;<br>            smallest_str = result;<br>            index++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-function">string <span class="hljs-title">CommonStr</span><span class="hljs-params">(string a, string b)</span></span>&#123;<br>        string result = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;a.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-keyword">if</span>(a[i] == b[i])&#123;<br>                result += a[i];<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">break</span>;&#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result; <br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="4-下一个更大元素-IV"><a href="#4-下一个更大元素-IV" class="headerlink" title="4. 下一个更大元素 IV"></a>4. 下一个更大元素 IV</h1><p>给你一个下标从 0 开始的非负整数数组 nums 。对于 nums 中每一个整数，你必须找到对应元素的 第二大 整数。</p><p>如果 nums[j] 满足以下条件，那么我们称它为 nums[i] 的 第二大 整数：</p><p>j &gt; i<br>nums[j] &gt; nums[i]<br>恰好存在 一个 k 满足 i &lt; k &lt; j 且 nums[k] &gt; nums[i] 。<br>如果不存在 nums[j] ，那么第二大整数为 -1 。</p><p>比方说，数组 [1, 2, 4, 3] 中，1 的第二大整数是 4 ，2 的第二大整数是 3 ，3 和 4 的第二大整数是 -1 。<br>请你返回一个整数数组 answer ，其中 answer[i]是 nums[i] 的第二大整数。<br><img src="/img/%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0_IV.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">secondGreaterElement</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">result</span><span class="hljs-params">(n, <span class="hljs-number">-1</span>)</span></span>;<br>        stack&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt; first_st, second_st;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;nums.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            vector&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt; tmp;<br>            <span class="hljs-keyword">while</span>(!second_st.<span class="hljs-built_in">empty</span>() &amp;&amp; nums[i]&gt;second_st.<span class="hljs-built_in">top</span>().second)&#123;<br>                result[second_st.<span class="hljs-built_in">top</span>().first] = nums[i];<br>                second_st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            <span class="hljs-keyword">while</span>(!first_st.<span class="hljs-built_in">empty</span>() &amp;&amp; nums[i]&gt;first_st.<span class="hljs-built_in">top</span>().second)&#123;<br>                tmp.<span class="hljs-built_in">push_back</span>(first_st.<span class="hljs-built_in">top</span>());<br>                first_st.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            <span class="hljs-keyword">while</span>(!tmp.<span class="hljs-built_in">empty</span>())&#123;<br>                second_st.<span class="hljs-built_in">push</span>(tmp.<span class="hljs-built_in">back</span>());<br>                tmp.<span class="hljs-built_in">pop_back</span>();<br>            &#125;<br>            first_st.<span class="hljs-built_in">push</span>(&#123;i,nums[i]&#125;);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>@版权归Leetcode所有</p>]]></content>
    
    
    <categories>
      
      <category>Daily Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-Day3</title>
    <link href="/2023/12/11/Algorithms/LeetCode/LeetCode-20231211/"/>
    <url>/2023/12/11/Algorithms/LeetCode/LeetCode-20231211/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="1-去除重复字母"><a href="#1-去除重复字母" class="headerlink" title="1. 去除重复字母"></a>1. 去除重复字母</h1><p>给你一个字符串 s ，请你去除字符串中重复的字母，使得每个字母只出现一次。需保证 返回结果的字典序最小（要求不能打乱其他字符的相对位置）。<br><img src="/img/%E5%8E%BB%E9%99%A4%E9%87%8D%E5%A4%8D%E5%AD%97%E6%AF%8D.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">removeDuplicateLetters</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">alpha_list</span><span class="hljs-params">(<span class="hljs-number">26</span>,<span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">left_list</span><span class="hljs-params">(<span class="hljs-number">26</span>,<span class="hljs-number">0</span>)</span></span>;<br>        stack&lt;<span class="hljs-type">char</span>&gt; result;<br>        string res = <span class="hljs-string">&quot;&quot;</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;s.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            alpha_list[s[i]-<span class="hljs-string">&#x27;a&#x27;</span>]++;<br>        &#125;<br>        result.<span class="hljs-built_in">push</span>(s[<span class="hljs-number">0</span>]);<br>        alpha_list[s[<span class="hljs-number">0</span>]-<span class="hljs-string">&#x27;a&#x27;</span>]--;<br>        left_list[s[<span class="hljs-number">0</span>]-<span class="hljs-string">&#x27;a&#x27;</span>]++;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; <span class="hljs-built_in">i</span>&lt;s.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-type">int</span> s_num = s[i]-<span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span>(!result.<span class="hljs-built_in">empty</span>() &amp;&amp;(left_list[s_num]))&#123;<br>                alpha_list[s_num]--;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">while</span>(!result.<span class="hljs-built_in">empty</span>() &amp;&amp; (result.<span class="hljs-built_in">top</span>() - <span class="hljs-string">&#x27;a&#x27;</span>)&gt;(s_num) &amp;&amp; alpha_list[result.<span class="hljs-built_in">top</span>()-<span class="hljs-string">&#x27;a&#x27;</span>] &gt; <span class="hljs-number">0</span>)&#123;<br>                left_list[result.<span class="hljs-built_in">top</span>()-<span class="hljs-string">&#x27;a&#x27;</span>]--;<br>                result.<span class="hljs-built_in">pop</span>();   <br>            &#125;   <br>            <span class="hljs-keyword">if</span>(left_list[s_num])&#123;<span class="hljs-keyword">continue</span>;&#125;<br>            alpha_list[s_num]--;<br>            result.<span class="hljs-built_in">push</span>(s[i]);<br>            left_list[s_num]++;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(!result.<span class="hljs-built_in">empty</span>())&#123;<br>            res += result.<span class="hljs-built_in">top</span>();<br>            result.<span class="hljs-built_in">pop</span>();<br>        &#125;<br><br>        <span class="hljs-built_in">reverse</span>(res.<span class="hljs-built_in">begin</span>(), res.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">return</span> res;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="2-二叉树的垂直遍历"><a href="#2-二叉树的垂直遍历" class="headerlink" title="2.  二叉树的垂直遍历"></a>2.  二叉树的垂直遍历</h1><p>给你一个二叉树的根结点，返回其结点按 垂直方向（从上到下，逐列）遍历的结果。<br>如果两个结点在同一行和列，那么顺序则为 从左到右。<br><img src="/img/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%9E%82%E7%9B%B4%E9%81%8D%E5%8E%86.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">maxTaxiEarnings</span><span class="hljs-params">(<span class="hljs-type">int</span> n, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; rides)</span> </span>&#123;<br>        <span class="hljs-built_in">sort</span>(rides.<span class="hljs-built_in">begin</span>(), rides.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; a, <span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; b) &#123;<span class="hljs-keyword">return</span> a[<span class="hljs-number">1</span>] &lt; b[<span class="hljs-number">1</span>];&#125;);<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(rides.size()+<span class="hljs-number">1</span>)</span></span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i&lt; rides.<span class="hljs-built_in">size</span>()+<span class="hljs-number">1</span>; i++)&#123;<br>            <span class="hljs-type">int</span> st = rides[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>];<br>            <span class="hljs-type">int</span> ed = rides[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>];<br>            <span class="hljs-type">int</span> tip = rides[i<span class="hljs-number">-1</span>][<span class="hljs-number">2</span>];<br>            <span class="hljs-keyword">auto</span> it = <span class="hljs-built_in">lower_bound</span>(rides.<span class="hljs-built_in">begin</span>(),rides.<span class="hljs-built_in">begin</span>()+i, st+<span class="hljs-number">1</span>, [](<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; a, <span class="hljs-type">int</span> val) &#123;<span class="hljs-keyword">return</span> a[<span class="hljs-number">1</span>]&lt; val;&#125;);<br>            <span class="hljs-type">int</span> j = <span class="hljs-built_in">distance</span>(rides.<span class="hljs-built_in">begin</span>(), it);<br>            dp[i] = <span class="hljs-built_in">max</span>(dp[i<span class="hljs-number">-1</span>], dp[j]+ed-st+tip);<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[rides.<span class="hljs-built_in">size</span>()];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="3-最大单词长度乘积"><a href="#3-最大单词长度乘积" class="headerlink" title="3. 最大单词长度乘积"></a>3. 最大单词长度乘积</h1><p>给你一个字符串数组 words ，找出并返回 length(words[i]) * length(words[j]) 的最大值，并且这两个单词不含有公共字母。如果不存在这样的两个单词，返回 0 。<br><img src="/img/%E6%9C%80%E5%A4%A7%E5%8D%95%E8%AF%8D%E9%95%BF%E5%BA%A6%E4%B9%98%E7%A7%AF.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProduct</span><span class="hljs-params">(vector&lt;string&gt;&amp; words)</span> </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">masks</span><span class="hljs-params">(words.size(), <span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;words.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            string str = words[i];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> s:str)&#123;<br>                masks[i] |= <span class="hljs-number">1</span> &lt;&lt; (s - <span class="hljs-string">&#x27;a&#x27;</span>);<br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;words.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i+<span class="hljs-number">1</span>; j&lt;words.<span class="hljs-built_in">size</span>(); j++)&#123;<br>                <span class="hljs-keyword">if</span>((masks[i] &amp; masks[j]) == <span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-type">int</span> tmp = words[i].<span class="hljs-built_in">size</span>()*words[j].<span class="hljs-built_in">size</span>();<br>                    result = <span class="hljs-built_in">max</span>(result,tmp);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="4-寻找两个正序数组的中位数"><a href="#4-寻找两个正序数组的中位数" class="headerlink" title="4. 寻找两个正序数组的中位数"></a>4. 寻找两个正序数组的中位数</h1><p>给你一个字符串数组 words ，找出并返回 length(words[i]) * length(words[j]) 的最大值，并且这两个单词不含有公共字母。如果不存在这样的两个单词，返回 0 。<br><img src="/img/%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">kelement</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2, <span class="hljs-type">int</span> k)</span></span>&#123;<br>        <span class="hljs-type">int</span> m = nums1.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> n = nums2.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> index1 = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> index2 = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">if</span>(index1 == m)&#123;<br>                <span class="hljs-keyword">return</span> nums2[index2+k<span class="hljs-number">-1</span>];<br>            &#125;<br>            <span class="hljs-keyword">if</span>(index2 == n)&#123;<br>                <span class="hljs-keyword">return</span> nums1[index1+k<span class="hljs-number">-1</span>];<br>            &#125;<br>            <span class="hljs-keyword">if</span>(k==<span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(nums1[index1], nums2[index2]);<br>            &#125;<br>            <span class="hljs-type">int</span> newindex1 = <span class="hljs-built_in">min</span>(m<span class="hljs-number">-1</span>,index1+k/<span class="hljs-number">2</span><span class="hljs-number">-1</span>);<br>            <span class="hljs-type">int</span> newindex2 = <span class="hljs-built_in">min</span>(n<span class="hljs-number">-1</span>,index2+k/<span class="hljs-number">2</span><span class="hljs-number">-1</span>);<br>            <span class="hljs-type">int</span> val1 = nums1[newindex1];<br>            <span class="hljs-type">int</span> val2 = nums2[newindex2];<br>            <span class="hljs-keyword">if</span>(val1&lt;=val2)&#123;<br>                k -= newindex1-index1+<span class="hljs-number">1</span>;<br>                index1 = newindex1+<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                k -= newindex2-index2+<span class="hljs-number">1</span>;<br>                index2 = newindex2+<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">findMedianSortedArrays</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2)</span> </span>&#123;<br>        <span class="hljs-type">int</span> m = nums1.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> n = nums2.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> total = m+n;<br><br>        <span class="hljs-keyword">if</span>(total%<span class="hljs-number">2</span> == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">kelement</span>(nums1,nums2,(total+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">return</span> ((<span class="hljs-built_in">kelement</span>(nums1,nums2,(total)/<span class="hljs-number">2</span>)+<span class="hljs-built_in">kelement</span>(nums1,nums2,(total)/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>))/<span class="hljs-number">2.0</span>);<br>        &#125;<br>        <br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>@版权归Leetcode所有</p>]]></content>
    
    
    <categories>
      
      <category>Daily Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STL Sources Learning-1</title>
    <link href="/2023/12/09/STL/STL%20Sources%20Learning-1/"/>
    <url>/2023/12/09/STL/STL%20Sources%20Learning-1/</url>
    
    <content type="html"><![CDATA[<h1 id="查看GCC对各种C-特性的支持程度"><a href="#查看GCC对各种C-特性的支持程度" class="headerlink" title="查看GCC对各种C++特性的支持程度"></a>查看GCC对各种C++特性的支持程度</h1><span id="more"></span><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-meta"># <span class="hljs-keyword">if</span> defined(__sgi)</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;__sgi&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-meta"># <span class="hljs-keyword">if</span> defined(__GNUC__)</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;__GNUC__&quot;</span> &lt;&lt;endl;<br>    cout &lt;&lt; __GNUC__ &lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;__GNUC_MINOR__&lt;&lt;endl;<br>    <span class="hljs-meta"># <span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//case 2</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __STL_NO_DRAND48</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_NO_DRAND48 defined&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_NO_DRAND48 undefined&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//case 3</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __STL_STATIC_TEMPLATE_MEMBER_BUG</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_STATIC_TEMPLATE_MEMBER_BUG defined&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_STATIC_TEMPLATE_MEMBER_BUG undefined&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//case 4</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __STL_CLASS_PARTIAL_SPECIALIZATION</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_CLASS_PARTIAL_SPECIALIZATION defined&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_CLASS_PARTIAL_SPECIALIZATION undefined&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//case 5</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __STL_EXPLICIT_FUNCTION_TMPL_ARGS</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_EXPLICIT_FUNCTION_TMPL_ARGS defined&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_EXPLICIT_FUNCTION_TMPL_ARGS undefined&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//case 6</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __STL_MEMBER_TEMPLATES</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_MEMBER_TEMPLATES defined&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_MEMBER_TEMPLATES undefined&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//case 7</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __STL_LIMITED_DEFAULT_TEMPLATES</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_LIMITED_DEFAULT_TEMPLATES defined&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_LIMITED_DEFAULT_TEMPLATES undefined&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//case 8</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __STL_NON_TYPE_TMPL_PARAM_BUG</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_NON_TYPE_TMPL_PARAM_BUG defined&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_NON_TYPE_TMPL_PARAM_BUG undefined&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//case 9</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __SGI_STL_NO_ARROW_OPERATOR</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__SGI_STL_NO_ARROW_OPERATOR defined&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__SGI_STL_NO_ARROW_OPERATOR undefined&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//case 10</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __STL_USE_EXCEPTIONS</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_USE_EXCEPTIONS defined&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_USE_EXCEPTIONS undefined&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//case 11</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __STL_USE_NAMESPACES</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_USE_NAMESPACES defined&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_USE_NAMESPACES undefined&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//case 12</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __STL_SGI_THREADS</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_SGI_THREADS defined&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_SGI_THREADS undefined&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//case 13</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __STL_WIN32THREADS</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_WIN32THREADS defined&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_WIN32THREADS undefined&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//case 14</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __STL_NO_NAMESPACES</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_NO_NAMESPACES defined&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_NO_NAMESPACES undefined&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//case 15</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __STL_NEED_TYPENAME</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_NEED_TYPENAME defined&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_NEED_TYPENAME undefined&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//case 16</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __STL_NEED_BOOL</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_NEED_BOOL defined&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_NEED_BOOL undefined&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//case 17</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __STL_NEED_EXPLICIT</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_NEED_EXPLICIT defined&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_NEED_EXPLICIT undefined&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">//case 18</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span>  __STL_ASSERTIONS</span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_ASSERTIONS defined&quot;</span> &lt;&lt;endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>      cout &lt;&lt; <span class="hljs-string">&quot;__STL_ASSERTIONS undefined&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-Day2</title>
    <link href="/2023/12/09/Algorithms/LeetCode/LeetCode-20231209/"/>
    <url>/2023/12/09/Algorithms/LeetCode/LeetCode-20231209/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="1-下一个更大的数值平衡数"><a href="#1-下一个更大的数值平衡数" class="headerlink" title="1. 下一个更大的数值平衡数"></a>1. 下一个更大的数值平衡数</h1><p>如果整数  x 满足：对于每个数位 d ，这个数位 恰好 在 x 中出现 d 次。那么整数 x 就是一个 数值平衡数 。<br>给你一个整数 n ，请你返回 严格大于 n 的 最小数值平衡数 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isBalance</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">count</span><span class="hljs-params">(<span class="hljs-number">10</span>,<span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-keyword">while</span> (x&gt;<span class="hljs-number">0</span>)&#123;<br>            count[x%<span class="hljs-number">10</span>]++;<br>            x = x/<span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10</span>; i++)&#123;<br>            <span class="hljs-keyword">if</span>(count[i] &gt; <span class="hljs-number">0</span> &amp;&amp; count[i] != i)&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;&#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">nextBeautifulNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = n+<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">1224444</span>; i++)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isBalance</span>(i))&#123;<span class="hljs-keyword">return</span> i;&#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="2-出租车的最大盈利"><a href="#2-出租车的最大盈利" class="headerlink" title="2.  出租车的最大盈利"></a>2.  出租车的最大盈利</h1><p>你驾驶出租车行驶在一条有 n 个地点的路上。这 n 个地点从近到远编号为 1 到 n ，你想要从 1 开到 n ，通过接乘客订单盈利。你只能沿着编号递增的方向前进，不能改变方向。<br>乘客信息用一个下标从 0 开始的二维数组 rides 表示，其中 rides[i] &#x3D; [starti, endi, tipi] 表示第 i 位乘客需要从地点 starti 前往 endi ，愿意支付 tipi 元的小费。<br>每一位 你选择接单的乘客 i ，你可以 盈利 endi - starti + tipi 元。你同时 最多 只能接一个订单。<br>给你 n 和 rides ，请你返回在最优接单方案下，你能盈利 最多 多少元。<br>注意：你可以在一个地点放下一位乘客，并在同一个地点接上另一位乘客。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">maxTaxiEarnings</span><span class="hljs-params">(<span class="hljs-type">int</span> n, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; rides)</span> </span>&#123;<br>        <span class="hljs-built_in">sort</span>(rides.<span class="hljs-built_in">begin</span>(), rides.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; a, <span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; b) &#123;<span class="hljs-keyword">return</span> a[<span class="hljs-number">1</span>] &lt; b[<span class="hljs-number">1</span>];&#125;);<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(rides.size()+<span class="hljs-number">1</span>)</span></span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i&lt; rides.<span class="hljs-built_in">size</span>()+<span class="hljs-number">1</span>; i++)&#123;<br>            <span class="hljs-type">int</span> st = rides[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>];<br>            <span class="hljs-type">int</span> ed = rides[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>];<br>            <span class="hljs-type">int</span> tip = rides[i<span class="hljs-number">-1</span>][<span class="hljs-number">2</span>];<br>            <span class="hljs-keyword">auto</span> it = <span class="hljs-built_in">lower_bound</span>(rides.<span class="hljs-built_in">begin</span>(),rides.<span class="hljs-built_in">begin</span>()+i, st+<span class="hljs-number">1</span>, [](<span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; a, <span class="hljs-type">int</span> val) &#123;<span class="hljs-keyword">return</span> a[<span class="hljs-number">1</span>]&lt; val;&#125;);<br>            <span class="hljs-type">int</span> j = <span class="hljs-built_in">distance</span>(rides.<span class="hljs-built_in">begin</span>(), it);<br>            dp[i] = <span class="hljs-built_in">max</span>(dp[i<span class="hljs-number">-1</span>], dp[j]+ed-st+tip);<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[rides.<span class="hljs-built_in">size</span>()];<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h1 id="3-超级丑数"><a href="#3-超级丑数" class="headerlink" title="3. 超级丑数"></a>3. 超级丑数</h1><p>超级丑数 是一个正整数，并满足其所有质因数都出现在质数数组 primes 中。<br>给你一个整数 n 和一个整数数组 primes ，返回第 n 个 超级丑数 。<br>题目数据保证第 n 个 超级丑数 在 32-bit 带符号整数范围内</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">nthSuperUglyNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> n, vector&lt;<span class="hljs-type">int</span>&gt;&amp; primes)</span> </span>&#123;<br>        <span class="hljs-type">int</span> m = primes.<span class="hljs-built_in">size</span>();<br>        vector&lt;<span class="hljs-type">long</span>&gt; result;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">primes_list</span><span class="hljs-params">(m, <span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-type">int</span> start_point= <span class="hljs-number">0</span>;<br>        result.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-type">long</span> primes_min = INT_MAX;<br>            <span class="hljs-type">long</span> tmp = <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> flag = <span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j&lt;m; j++)&#123;<br>                tmp = result[primes_list[j]]*primes[j];<br>                <span class="hljs-keyword">if</span>(tmp &gt; result.<span class="hljs-built_in">back</span>())&#123;<br>                    <span class="hljs-keyword">if</span>(tmp &lt; primes_min)&#123;<br>                        primes_min = tmp;<br>                        flag = j;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            result.<span class="hljs-built_in">push_back</span>(primes_min);<br>            primes_list[flag]++;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;m; i++)&#123;<br>                <span class="hljs-keyword">if</span>(i != flag &amp;&amp; result[primes_list[i]]*primes[i] == primes_min)&#123;<br>                    primes_list[i]++;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result.<span class="hljs-built_in">back</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>@版权归Leetcode所有</p><!--版权归LeedCode所有-->]]></content>
    
    
    <categories>
      
      <category>Daily Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-Day1</title>
    <link href="/2023/12/08/Algorithms/LeetCode/LeetCode-20231208/"/>
    <url>/2023/12/08/Algorithms/LeetCode/LeetCode-20231208/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="1-买卖股票的最佳时机含手续费"><a href="#1-买卖股票的最佳时机含手续费" class="headerlink" title="1. 买卖股票的最佳时机含手续费"></a>1. 买卖股票的最佳时机含手续费</h1><p>给定一个整数数组 prices，其中 prices[i]表示第 i 天的股票价格 ；整数 fee 代表了交易股票的手续费用。<br>你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。<br>返回获得利润的最大值。<br>注意：这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices, <span class="hljs-type">int</span> fee)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = prices.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> buy = -prices[<span class="hljs-number">0</span>]-fee;<br>        <span class="hljs-type">int</span> sell = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i&lt;n; i++)&#123;<br>            <span class="hljs-type">int</span> newbuy = <span class="hljs-built_in">max</span>(buy, sell-prices[i]-fee);<br>            <span class="hljs-type">int</span> newsell = <span class="hljs-built_in">max</span>(sell, buy+prices[i]);<br>            buy = newbuy;<br>            sell = newsell;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sell;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="2-买卖芯片的最佳时机数组"><a href="#2-买卖芯片的最佳时机数组" class="headerlink" title="2. 买卖芯片的最佳时机数组"></a>2. 买卖芯片的最佳时机数组</h1><p>prices 记录了某芯片近期的交易价格，其中 prices[i] 表示的 i 天该芯片的价格。你只能选择 某一天 买入芯片，并选择在 未来的某一个不同的日子 卖出该芯片。请设计一个算法计算并返回你从这笔交易中能获取的最大利润。<br>如果你不能获取任何利润，返回 0。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">bestTiming</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(prices.<span class="hljs-built_in">empty</span>()) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> smallest = prices[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> result = <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i&lt;prices.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-keyword">if</span>(smallest &lt; prices[i]) result = <span class="hljs-built_in">max</span>(result, prices[i]-smallest);<br>            <span class="hljs-keyword">else</span> smallest = prices[i]; <br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="3-稀疏矩阵的乘法"><a href="#3-稀疏矩阵的乘法" class="headerlink" title="3. 稀疏矩阵的乘法"></a>3. 稀疏矩阵的乘法</h1><p>给定两个 稀疏矩阵 ：大小为 m x k 的稀疏矩阵 mat1 和大小为 k x n 的稀疏矩阵 mat2 ，返回 mat1 x mat2 的结果。你可以假设乘法总是可能的<br><img src="/img/%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">multiply</span>(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; mat1, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; mat2) &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; newmat2;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; result;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j&lt;mat2[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>(); j++)&#123;<br>            vector&lt;<span class="hljs-type">int</span>&gt; tmp;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;mat2.<span class="hljs-built_in">size</span>(); i++)&#123;<br>                tmp.<span class="hljs-built_in">push_back</span>(mat2[i][j]);<br>            &#125;<br>            newmat2.<span class="hljs-built_in">push_back</span>(tmp);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt;mat1.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            vector&lt;<span class="hljs-type">int</span>&gt;tmp;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j&lt;newmat2.<span class="hljs-built_in">size</span>(); j++)&#123;<br>                <span class="hljs-type">int</span> value = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k&lt;mat1[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>(); k++)&#123;<br>                    value += mat1[i][k]*newmat2[j][k];<br>                &#125;<br>                tmp.<span class="hljs-built_in">push_back</span>(value);<br>            &#125;<br>            result.<span class="hljs-built_in">push_back</span>(tmp);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br>@版权归Leetcode所有<br><br></code></pre></td></tr></table></figure><!--版权归LeedCode所有-->]]></content>
    
    
    <categories>
      
      <category>Daily Algorithm</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_GetRGB</title>
    <link href="/1999/01/18/SDL/Dictionary/SDL_GetRGB/"/>
    <url>/1999/01/18/SDL/Dictionary/SDL_GetRGB/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-GetRGB"><a href="#SDL-GetRGB" class="headerlink" title="SDL_GetRGB"></a>SDL_GetRGB</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_GetRGB">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>从指定格式的像素获取 RGB 值。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SDL_GetRGB</span><span class="hljs-params">(Uint32 pixel,</span></span><br><span class="hljs-params"><span class="hljs-function">                <span class="hljs-type">const</span> SDL_PixelFormat * format,</span></span><br><span class="hljs-params"><span class="hljs-function">                Uint8 * r, Uint8 * g, Uint8 * b)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>pixel：像素值<br>format:描述像素格式的 <a href="/1999/01/05/SDL/Dictionary/SDL_PixelFormat/" title="SDL_PixelFormat">SDL_PixelFormat</a> 结构<br>r:用红色分量填充的指针<br>g:用绿色组件填充的指针<br>b:填充有蓝色分量的指针<br>a:填充有 alpha 分量的指针</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_GetRGBA</title>
    <link href="/1999/01/18/SDL/Dictionary/SDL_GetRGBA/"/>
    <url>/1999/01/18/SDL/Dictionary/SDL_GetRGBA/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-GetRGBA"><a href="#SDL-GetRGBA" class="headerlink" title="SDL_GetRGBA"></a>SDL_GetRGBA</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_GetRGBA">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>从指定格式的像素中获取 RGBA 值。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SDL_GetRGBA</span><span class="hljs-params">(Uint32 pixel,</span></span><br><span class="hljs-params"><span class="hljs-function">                 <span class="hljs-type">const</span> SDL_PixelFormat * format,</span></span><br><span class="hljs-params"><span class="hljs-function">                 Uint8 * r, Uint8 * g, Uint8 * b,</span></span><br><span class="hljs-params"><span class="hljs-function">                 Uint8 * a)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>pixel：像素值<br>format:描述像素格式的 <a href="/1999/01/05/SDL/Dictionary/SDL_PixelFormat/" title="SDL_PixelFormat">SDL_PixelFormat</a> 结构<br>r:用红色分量填充的指针<br>g:用绿色组件填充的指针<br>b:填充有蓝色分量的指针<br>a:填充有 alpha 分量的指针</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_MapRGB</title>
    <link href="/1999/01/18/SDL/Dictionary/SDL_MapRGB/"/>
    <url>/1999/01/18/SDL/Dictionary/SDL_MapRGB/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-MapRGB"><a href="#SDL-MapRGB" class="headerlink" title="SDL_MapRGB"></a>SDL_MapRGB</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_MapRGB">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>将 RGB 三元组映射到给定像素格式的不透明像素值。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">Uint32 <span class="hljs-title">SDL_MapRGB</span><span class="hljs-params">(<span class="hljs-type">const</span> SDL_PixelFormat * format,</span></span><br><span class="hljs-params"><span class="hljs-function">                  Uint8 r, Uint8 g, Uint8 b)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>format:描述像素格式的 <a href="/1999/01/05/SDL/Dictionary/SDL_PixelFormat/" title="SDL_PixelFormat">SDL_PixelFormat</a> 结构<br>r:像素的红色分量在 0-255 范围内<br>g:像素的绿色分量在 0-255 范围内<br>b:像素的蓝色分量在 0-255 范围内</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回像素值</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_MapRGBA</title>
    <link href="/1999/01/18/SDL/Dictionary/SDL_MapRGBA/"/>
    <url>/1999/01/18/SDL/Dictionary/SDL_MapRGBA/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-MapRGBA"><a href="#SDL-MapRGBA" class="headerlink" title="SDL_MapRGBA"></a>SDL_MapRGBA</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_MapRGBA">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>将 RGBA 四元组映射到给定像素格式的像素值。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">Uint32 <span class="hljs-title">SDL_MapRGBA</span><span class="hljs-params">(<span class="hljs-type">const</span> SDL_PixelFormat * format,</span></span><br><span class="hljs-params"><span class="hljs-function">                   Uint8 r, Uint8 g, Uint8 b,</span></span><br><span class="hljs-params"><span class="hljs-function">                   Uint8 a)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>format:描述像素格式的 <a href="/1999/01/05/SDL/Dictionary/SDL_PixelFormat/" title="SDL_PixelFormat">SDL_PixelFormat</a> 结构<br>r:像素的红色分量在 0-255 范围内<br>g:像素的绿色分量在 0-255 范围内<br>b:像素的蓝色分量在 0-255 范围内<br>a:像素的 alpha 分量在 0-255 范围内</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回像素值</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_Linked_Version</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_Linked_Version/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_Linked_Version/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-Linked-Version"><a href="#IMG-Linked-Version" class="headerlink" title="IMG_Linked_Version"></a>IMG_Linked_Version</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_Linked_Version">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>该函数获取动态链接的SDL_image库的版本。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">const</span> SDL_version * <span class="hljs-title">IMG_Linked_Version</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回SDL_image版本</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_LoadAVIF_RW</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_LoadAVIF_RW/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_LoadAVIF_RW/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-LoadAVIF-RW"><a href="#IMG-LoadAVIF-RW" class="headerlink" title="IMG_LoadAVIF_RW"></a>IMG_LoadAVIF_RW</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_LoadAVIF_RW">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>直接加载 AVIF 图像</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Surface * <span class="hljs-title">IMG_LoadAVIF_RW</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src：将从中读取数据的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回 SDL 表面，或出错时返回 NULL</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_Load</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_Load/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_Load/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-Load"><a href="#IMG-Load" class="headerlink" title="IMG_Load"></a>IMG_Load</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_Load">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>将图像从文件系统路径加载到软件表面中。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Surface * <span class="hljs-title">IMG_Load</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *file)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>file： 文件系统上加载图像的路径。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回一个新的 SDL 表面，如果出错则返回 NULL。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_LoadAnimation</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_LoadAnimation/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_LoadAnimation/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-LoadAnimation"><a href="#IMG-LoadAnimation" class="headerlink" title="IMG_LoadAnimation"></a>IMG_LoadAnimation</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_LoadAnimation">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>从文件加载动画。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">IMG_Animation * <span class="hljs-title">IMG_LoadAnimation</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *file)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>file：文件系统上包含动画图像的路径。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回一个新的 IMG_Animation，如果出错则返回 NULL。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_LoadAnimation_RW</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_LoadAnimation_RW/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_LoadAnimation_RW/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-LoadAnimation-RW"><a href="#IMG-LoadAnimation-RW" class="headerlink" title="IMG_LoadAnimation_RW"></a>IMG_LoadAnimation_RW</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_LoadAnimation_RW">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>从 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a>加载动画。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">IMG_Animation * <span class="hljs-title">IMG_LoadAnimation_RW</span><span class="hljs-params">(SDL_RWops *src, <span class="hljs-type">int</span> freesrc)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src：将从中读取数据的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a><br>freesrc：非零表示在返回之前关闭&#x2F;释放 SDL_RWops，零表示使其保持打开状态。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回一个新的 IMG_Animation，如果出错则返回 NULL。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_LoadAnimationTyped_RW</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_LoadAnimationTyped_RW/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_LoadAnimationTyped_RW/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-LoadAnimationTyped-RW"><a href="#IMG-LoadAnimationTyped-RW" class="headerlink" title="IMG_LoadAnimationTyped_RW"></a>IMG_LoadAnimationTyped_RW</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_LoadAnimationTyped_RW">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>从 SDL 数据源加载动画</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">IMG_Animation * <span class="hljs-title">IMG_LoadAnimationTyped_RW</span><span class="hljs-params">(SDL_RWops *src, <span class="hljs-type">int</span> freesrc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *type)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src：将从中读取数据的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a><br>freesrc：非零表示在返回之前关闭&#x2F;释放 SDL_RWops，零表示使其保持打开状态。<br>type：表示该数据的文件扩展名（“GIF”等）。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回一个新的 IMG_Animation，如果出错则返回 NULL。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_LoadBMP_RW</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_LoadBMP_RW/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_LoadBMP_RW/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-LoadBMP-RW"><a href="#IMG-LoadBMP-RW" class="headerlink" title="IMG_LoadBMP_RW"></a>IMG_LoadBMP_RW</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_LoadBMP_RW">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>直接加载 BMP 图像。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Surface * <span class="hljs-title">IMG_LoadBMP_RW</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src：将从中读取数据的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回 SDL 表面，或出错时返回 NULL</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_LoadGIFAnimation_RW</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_LoadGIFAnimation_RW/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_LoadGIFAnimation_RW/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-LoadGIFAnimation-RW"><a href="#IMG-LoadGIFAnimation-RW" class="headerlink" title="IMG_LoadGIFAnimation_RW"></a>IMG_LoadGIFAnimation_RW</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_LoadGIFAnimation_RW">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>直接加载GIF动画。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">IMG_Animation * <span class="hljs-title">IMG_LoadGIFAnimation_RW</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src：将从中读取数据的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回一个新的 IMG_Animation，如果出错则返回 NULL。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_LoadCUR_RW</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_LoadCUR_RW/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_LoadCUR_RW/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-LoadCUR-RW"><a href="#IMG-LoadCUR-RW" class="headerlink" title="IMG_LoadCUR_RW"></a>IMG_LoadCUR_RW</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_LoadCUR_RW">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>直接加载 CUR 图像。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Surface * <span class="hljs-title">IMG_LoadCUR_RW</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src：将从中读取数据的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回 SDL 表面，或出错时返回 NULL</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_LoadGIF_RW</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_LoadGIF_RW/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_LoadGIF_RW/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-LoadGIF-RW"><a href="#IMG-LoadGIF-RW" class="headerlink" title="IMG_LoadGIF_RW"></a>IMG_LoadGIF_RW</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_LoadGIF_RW">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>直接加载 GIF 图片。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Surface * <span class="hljs-title">IMG_LoadGIF_RW</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src：将从中读取数据的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回 SDL 表面，或出错时返回 NULL</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_LoadICO_RW</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_LoadICO_RW/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_LoadICO_RW/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-LoadICO-RW"><a href="#IMG-LoadICO-RW" class="headerlink" title="IMG_LoadICO_RW"></a>IMG_LoadICO_RW</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_LoadICO_RW">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>直接加载 ICO 镜像。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Surface * <span class="hljs-title">IMG_LoadICO_RW</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src：将从中读取数据的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回 SDL 表面，或出错时返回 NULL</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_LoadJPG_RW</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_LoadJPG_RW/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_LoadJPG_RW/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-LoadJPG-RW"><a href="#IMG-LoadJPG-RW" class="headerlink" title="IMG_LoadJPG_RW"></a>IMG_LoadJPG_RW</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_LoadJPG_RW">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>直接加载 JPG 图片。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Surface * <span class="hljs-title">IMG_LoadJPG_RW</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src：将从中读取数据的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回 SDL 表面，或出错时返回 NULL</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_LoadJXL_RW</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_LoadJXL_RW/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_LoadJXL_RW/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-LoadJXL-RW"><a href="#IMG-LoadJXL-RW" class="headerlink" title="IMG_LoadJXL_RW"></a>IMG_LoadJXL_RW</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_LoadJXL_RW">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>直接加载 JXL 图像。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Surface * <span class="hljs-title">IMG_LoadJXL_RW</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src：将从中读取数据的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回 SDL 表面，或出错时返回 NULL</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_LoadLBM_RW</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_LoadLBM_RW/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_LoadLBM_RW/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-LoadLBM-RW"><a href="#IMG-LoadLBM-RW" class="headerlink" title="IMG_LoadLBM_RW"></a>IMG_LoadLBM_RW</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_LoadLBM_RW">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>直接加载LBM图像。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Surface * <span class="hljs-title">IMG_LoadLBM_RW</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src：将从中读取数据的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回 SDL 表面，或出错时返回 NULL</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_LoadPCX_RW</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_LoadPCX_RW/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_LoadPCX_RW/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-LoadPCX-RW"><a href="#IMG-LoadPCX-RW" class="headerlink" title="IMG_LoadPCX_RW"></a>IMG_LoadPCX_RW</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_LoadPCX_RW">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>直接加载PCX图像。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Surface * <span class="hljs-title">IMG_LoadPCX_RW</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src：将从中读取数据的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回 SDL 表面，或出错时返回 NULL</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_LoadPNG_RW</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_LoadPNG_RW/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_LoadPNG_RW/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-LoadPNG-RW"><a href="#IMG-LoadPNG-RW" class="headerlink" title="IMG_LoadPNG_RW"></a>IMG_LoadPNG_RW</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_LoadPNG_RW">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>直接加载PNG图像。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Surface * <span class="hljs-title">IMG_LoadPNG_RW</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src：将从中读取数据的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回 SDL 表面，或出错时返回 NULL</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_LoadPNM_RW</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_LoadPNM_RW/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_LoadPNM_RW/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-LoadPNM-RW"><a href="#IMG-LoadPNM-RW" class="headerlink" title="IMG_LoadPNM_RW"></a>IMG_LoadPNM_RW</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_LoadPNM_RW">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>直接加载 PNM 图像。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Surface * <span class="hljs-title">IMG_LoadPNM_RW</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src：将从中读取数据的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回 SDL 表面，或出错时返回 NULL</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_LoadQOI_RW</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_LoadQOI_RW/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_LoadQOI_RW/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-LoadQOI-RW"><a href="#IMG-LoadQOI-RW" class="headerlink" title="IMG_LoadQOI_RW"></a>IMG_LoadQOI_RW</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_LoadQOI_RW">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>直接加载 QOI 图像。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Surface * <span class="hljs-title">IMG_LoadQOI_RW</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src：将从中读取数据的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回 SDL 表面，或出错时返回 NULL</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_LoadSVG_RW</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_LoadSVG_RW/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_LoadSVG_RW/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-LoadSVG-RW"><a href="#IMG-LoadSVG-RW" class="headerlink" title="IMG_LoadSVG_RW"></a>IMG_LoadSVG_RW</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_LoadSVG_RW">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>直接加载 SVG 图像。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Surface * <span class="hljs-title">IMG_LoadSVG_RW</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src：将从中读取数据的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回 SDL 表面，或出错时返回 NULL</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_LoadSizedSVG_RW</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_LoadSizedSVG_RW/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_LoadSizedSVG_RW/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-LoadSizedSVG-RW"><a href="#IMG-LoadSizedSVG-RW" class="headerlink" title="IMG_LoadSizedSVG_RW"></a>IMG_LoadSizedSVG_RW</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_LoadSizedSVG_RW">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>加载缩放至特定尺寸的 SVG 图像。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Surface * <span class="hljs-title">IMG_LoadSizedSVG_RW</span><span class="hljs-params">(SDL_RWops *src, <span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src：用于加载 SVG 数据的<a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a><br>width：生成表面的所需宽度（以像素为单位）。<br>height：生成表面的所需高度（以像素为单位）。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回 SDL 表面，或出错时返回 NULL</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_LoadTGA_RW</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_LoadTGA_RW/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_LoadTGA_RW/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-LoadTGA-RW"><a href="#IMG-LoadTGA-RW" class="headerlink" title="IMG_LoadTGA_RW"></a>IMG_LoadTGA_RW</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_LoadTGA_RW">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>直接加载 TGA 图像。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Surface * <span class="hljs-title">IMG_LoadTGA_RW</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src：将从中读取数据的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a> </p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回 SDL 表面，或出错时返回 NULL</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_LoadTIF_RW</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_LoadTIF_RW/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_LoadTIF_RW/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-LoadTIF-RW"><a href="#IMG-LoadTIF-RW" class="headerlink" title="IMG_LoadTIF_RW"></a>IMG_LoadTIF_RW</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_LoadTIF_RW">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>直接加载 TIFF 图像。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Surface * <span class="hljs-title">IMG_LoadTIF_RW</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src：将从中读取数据的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a> </p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回 SDL 表面，或出错时返回 NULL</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_LoadTexture</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_LoadTexture/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_LoadTexture/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-LoadTexture"><a href="#IMG-LoadTexture" class="headerlink" title="IMG_LoadTexture"></a>IMG_LoadTexture</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_LoadTexture">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>图像从文件系统路径加载到 GPU 纹理中。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Texture * <span class="hljs-title">IMG_LoadTexture</span><span class="hljs-params">(SDL_Renderer *renderer, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *file)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer：用于创建 GPU 纹理的<a href="/1999/01/10/SDL/Dictionary/SDL_Renderer/" title="SDL_Renderer">SDL_Renderer</a><br>file：文件系统上加载图像的路径。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回一个新的纹理，如果出错则返回 NULL。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_LoadTexture_RW</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_LoadTexture_RW/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_LoadTexture_RW/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-LoadTexture-RW"><a href="#IMG-LoadTexture-RW" class="headerlink" title="IMG_LoadTexture_RW"></a>IMG_LoadTexture_RW</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_LoadTexture_RW">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>将图像从 SDL 数据源加载到 GPU 纹理中。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Texture * <span class="hljs-title">IMG_LoadTexture_RW</span><span class="hljs-params">(SDL_Renderer *renderer, SDL_RWops *src, <span class="hljs-type">int</span> freesrc)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer：用于创建 GPU 纹理的<a href="/1999/01/10/SDL/Dictionary/SDL_Renderer/" title="SDL_Renderer">SDL_Renderer</a><br>src：将从中读取数据的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a><br>freesrc：非零表示在返回之前关闭&#x2F;释放 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a>，零表示使其保持打开状态。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回一个新的纹理，如果出错则返回 NULL。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_LoadTextureTyped_RW</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_LoadTextureTyped_RW/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_LoadTextureTyped_RW/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-LoadTextureTyped-RW"><a href="#IMG-LoadTextureTyped-RW" class="headerlink" title="IMG_LoadTextureTyped_RW"></a>IMG_LoadTextureTyped_RW</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_LoadTextureTyped_RW">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>将图像从 SDL 数据源加载到 GPU 纹理中。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Texture * <span class="hljs-title">IMG_LoadTextureTyped_RW</span><span class="hljs-params">(SDL_Renderer *renderer, SDL_RWops *src, <span class="hljs-type">int</span> freesrc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *type)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer：用于创建 GPU 纹理的<a href="/1999/01/10/SDL/Dictionary/SDL_Renderer/" title="SDL_Renderer">SDL_Renderer</a><br>src：将从中读取数据的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a><br>freesrc：非零表示在返回之前关闭&#x2F;释放 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a>，零表示使其保持打开状态。<br>type：表示该数据的文件扩展名（“BMP”、“GIF”、“PNG”等）。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回一个新的纹理，如果出错则返回 NULL。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_LoadTyped_RW</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_LoadTyped_RW/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_LoadTyped_RW/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-LoadTyped-RW"><a href="#IMG-LoadTyped-RW" class="headerlink" title="IMG_LoadTyped_RW"></a>IMG_LoadTyped_RW</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_LoadTyped_RW">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>将图像从 SDL 数据源加载到软件界面中。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Surface * <span class="hljs-title">IMG_LoadTyped_RW</span><span class="hljs-params">(SDL_RWops *src, <span class="hljs-type">int</span> freesrc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *type)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src：将从中读取数据的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a><br>freesrc：非零表示在返回之前关闭&#x2F;释放 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a>，零表示使其保持打开状态。<br>type：表示该数据的文件扩展名（“BMP”、“GIF”、“PNG”等）。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回一个新的 SDL 表面，如果出错则返回 NULL。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_LoadWEBPAnimation_RW</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_LoadWEBPAnimation_RW/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_LoadWEBPAnimation_RW/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-LoadWEBPAnimation-RW"><a href="#IMG-LoadWEBPAnimation-RW" class="headerlink" title="IMG_LoadWEBPAnimation_RW"></a>IMG_LoadWEBPAnimation_RW</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_LoadWEBPAnimation_RW">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>直接加载WEBP动画。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">IMG_Animation * <span class="hljs-title">IMG_LoadWEBPAnimation_RW</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src：将从中读取数据的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a> </p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回一个新的 IMG_Animation，如果出错则返回 NULL。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_LoadWEBP_RW</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_LoadWEBP_RW/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_LoadWEBP_RW/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-LoadWEBP-RW"><a href="#IMG-LoadWEBP-RW" class="headerlink" title="IMG_LoadWEBP_RW"></a>IMG_LoadWEBP_RW</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_LoadWEBP_RW">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>直接加载WEBP图像。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Surface * <span class="hljs-title">IMG_LoadWEBP_RW</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src：将从中读取数据的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a> </p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回 SDL 表面，或出错时返回 NULL</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_LoadXCF_RW</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_LoadXCF_RW/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_LoadXCF_RW/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-LoadXCF-RW"><a href="#IMG-LoadXCF-RW" class="headerlink" title="IMG_LoadXCF_RW"></a>IMG_LoadXCF_RW</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_LoadXCF_RW">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>直接加载 XCF 图像。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Surface * <span class="hljs-title">IMG_LoadXCF_RW</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src：将从中读取数据的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a> </p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回 SDL 表面，或出错时返回 NULL</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_LoadXPM_RW</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_LoadXPM_RW/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_LoadXPM_RW/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-LoadXPM-RW"><a href="#IMG-LoadXPM-RW" class="headerlink" title="IMG_LoadXPM_RW"></a>IMG_LoadXPM_RW</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_LoadXPM_RW">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>直接加载 XPM 图像</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Surface * <span class="hljs-title">IMG_LoadXPM_RW</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src：将从中读取数据的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a> </p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回 SDL 表面，或出错时返回 NULL</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_LoadXV_RW</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_LoadXV_RW/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_LoadXV_RW/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-LoadXV-RW"><a href="#IMG-LoadXV-RW" class="headerlink" title="IMG_LoadXV_RW"></a>IMG_LoadXV_RW</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_LoadXV_RW">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>直接加载 XV 图像。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Surface * <span class="hljs-title">IMG_LoadXV_RW</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src：将从中读取数据的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a> </p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回 SDL 表面，或出错时返回 NULL</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_Load_RW</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_Load_RW/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_Load_RW/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-Load-RW"><a href="#IMG-Load-RW" class="headerlink" title="IMG_Load_RW"></a>IMG_Load_RW</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_Load_RW">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>将图像从 SDL 数据源加载到软件界面中。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Surface * <span class="hljs-title">IMG_Load_RW</span><span class="hljs-params">(SDL_RWops *src, <span class="hljs-type">int</span> freesrc)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src：将从中读取数据的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a><br>freesrc：非零表示在返回之前关闭&#x2F;释放 SDL_RWops，零表示使其保持打开状态。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回一个新的 SDL 表面，如果出错则返回 NULL。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_Quit</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_Quit/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_Quit/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-Quit"><a href="#IMG-Quit" class="headerlink" title="IMG_Quit"></a>IMG_Quit</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_Quit">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>取消初始化SDL_image。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">IMG_Quit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_ReadXPMFromArray</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_ReadXPMFromArray/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_ReadXPMFromArray/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-ReadXPMFromArray"><a href="#IMG-ReadXPMFromArray" class="headerlink" title="IMG_ReadXPMFromArray"></a>IMG_ReadXPMFromArray</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_ReadXPMFromArray">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>从内存阵列加载 XPM 图像。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Surface * <span class="hljs-title">IMG_ReadXPMFromArray</span><span class="hljs-params">(<span class="hljs-type">char</span> **xpm)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>xpm：包含 XPM 数据的以 null 结尾的字符串数组。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回一个新的 SDL 表面，如果出错则返回 NULL。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_ReadXPMFromArrayToRGB888</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_ReadXPMFromArrayToRGB888/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_ReadXPMFromArrayToRGB888/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-ReadXPMFromArrayToRGB888"><a href="#IMG-ReadXPMFromArrayToRGB888" class="headerlink" title="IMG_ReadXPMFromArrayToRGB888"></a>IMG_ReadXPMFromArrayToRGB888</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_ReadXPMFromArrayToRGB888">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>从内存阵列加载 XPM 图像。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Surface * <span class="hljs-title">IMG_ReadXPMFromArrayToRGB888</span><span class="hljs-params">(<span class="hljs-type">char</span> **xpm)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>xpm：包含 XPM 数据的以 null 结尾的字符串数组。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回一个新的 SDL 表面，如果出错则返回 NULL。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_SaveJPG</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_SaveJPG/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_SaveJPG/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-SaveJPG"><a href="#IMG-SaveJPG" class="headerlink" title="IMG_SaveJPG"></a>IMG_SaveJPG</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_SaveJPG">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>将 SDL_Surface 保存到 JPEG 图像文件中。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IMG_SaveJPG</span><span class="hljs-params">(SDL_Surface *surface, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *file, <span class="hljs-type">int</span> quality)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>surface：要保存的 SDL 表面<br>file：文件系统上要写入新文件的路径。<br>quality：[0; 33] 是最低质量，[34； 66] 是中等质量，[67； 100] 是最高质量</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果成功则返回 0，如果错误则返回 -1</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_SaveJPG_RW</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_SaveJPG_RW/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_SaveJPG_RW/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-SaveJPG-RW"><a href="#IMG-SaveJPG-RW" class="headerlink" title="IMG_SaveJPG_RW"></a>IMG_SaveJPG_RW</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_SaveJPG_RW">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>通过 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a> 将 <a href="/1999/01/05/SDL/Dictionary/SDL_Surface/" title="SDL_Surface">SDL_Surface</a>  保存到 JPEG 图像数据中。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IMG_SaveJPG_RW</span><span class="hljs-params">(SDL_Surface *surface, SDL_RWops *dst, <span class="hljs-type">int</span> freedst, <span class="hljs-type">int</span> quality)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>surface：要保存的 SDL 表面<br>dst：用于保存图像数据的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果成功则返回 0，如果错误则返回 -1</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_SavePNG_RW</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_SavePNG_RW/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_SavePNG_RW/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-SavePNG-RW"><a href="#IMG-SavePNG-RW" class="headerlink" title="IMG_SavePNG_RW"></a>IMG_SavePNG_RW</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_SavePNG_RW">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>通过 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a> 将 <a href="/1999/01/05/SDL/Dictionary/SDL_Surface/" title="SDL_Surface">SDL_Surface</a>  保存到 PNG 图像数据中。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IMG_SavePNG_RW</span><span class="hljs-params">(SDL_Surface *surface, SDL_RWops *dst, <span class="hljs-type">int</span> freedst)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>surface：要保存的 SDL 表面<br>dst：用于保存图像数据的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果成功则返回 0，如果错误则返回 -1</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_SavePNG</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_SavePNG/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_SavePNG/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-SavePNG"><a href="#IMG-SavePNG" class="headerlink" title="IMG_SavePNG"></a>IMG_SavePNG</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_SavePNG">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>将 SDL_Surface 保存到 PNG 图像文件中。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IMG_SavePNG</span><span class="hljs-params">(SDL_Surface *surface, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *file)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>surface：要保存的 SDL 表面<br>file：文件系统上要写入新文件的路径。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果成功则返回 0，如果错误则返回 -1</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_isTIF</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_isTIF/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_isTIF/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-isTIF"><a href="#IMG-isTIF" class="headerlink" title="IMG_isTIF"></a>IMG_isTIF</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_isTIF">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>检测可读&#x2F;可查找的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a> 上的  TIFF  图像数据。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IMG_isTIF</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src: 可查找&#x2F;可读的 SDL_RWops 来提供图像数据。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果这是 TIFF 数据，则返回非零，否则返回零。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_isWEBP</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_isWEBP/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_isWEBP/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-isWEBP"><a href="#IMG-isWEBP" class="headerlink" title="IMG_isWEBP"></a>IMG_isWEBP</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_isWEBP">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>检测可读&#x2F;可查找的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a> 上的  WEBP  图像数据。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IMG_isWEBP</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src: 可查找&#x2F;可读的 SDL_RWops 来提供图像数据。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果这是 WEBP 数据，则返回非零，否则返回零。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_isXCF</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_isXCF/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_isXCF/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-isXCF"><a href="#IMG-isXCF" class="headerlink" title="IMG_isXCF"></a>IMG_isXCF</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_isXCF">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>检测可读&#x2F;可查找的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a> 上的  XCF  图像数据。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IMG_isXCF</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src: 可查找&#x2F;可读的 SDL_RWops 来提供图像数据。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果这是 XCF 数据，则返回非零，否则返回零。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_isXPM</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_isXPM/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_isXPM/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-isXPM"><a href="#IMG-isXPM" class="headerlink" title="IMG_isXPM"></a>IMG_isXPM</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_isXPM">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>检测可读&#x2F;可查找的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a> 上的  XPM  图像数据。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IMG_isXPM</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src: 可查找&#x2F;可读的 SDL_RWops 来提供图像数据。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果这是 XPM 数据，则返回非零，否则返回零。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_isXV</title>
    <link href="/1999/01/15/SDL/Dictionary/IMG_isXV/"/>
    <url>/1999/01/15/SDL/Dictionary/IMG_isXV/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-isXV"><a href="#IMG-isXV" class="headerlink" title="IMG_isXV"></a>IMG_isXV</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_isXV">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>检测可读&#x2F;可查找的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a> 上的  XV  图像数据。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IMG_isXV</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src: 可查找&#x2F;可读的 SDL_RWops 来提供图像数据。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果这是 XV 数据，则返回非零，否则返回零。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-ANDROID-APK-EXPANSION-MAIN-FILE-VERSION"><a href="#SDL-HINT-ANDROID-APK-EXPANSION-MAIN-FILE-VERSION" class="headerlink" title="SDL_HINT_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION"></a>SDL_HINT_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定 Android APK 扩展主文件版本的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下不设置此提示。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>X：Android APK 扩展主文件版本（应该是“1”、“2”等字符串数字）</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_ACCELEROMETER_AS_JOYSTICK</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_ACCELEROMETER_AS_JOYSTICK/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_ACCELEROMETER_AS_JOYSTICK/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-ACCELEROMETER-AS-JOYSTICK"><a href="#SDL-HINT-ACCELEROMETER-AS-JOYSTICK" class="headerlink" title="SDL_HINT_ACCELEROMETER_AS_JOYSTICK"></a>SDL_HINT_ACCELEROMETER_AS_JOYSTICK</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_ACCELEROMETER_AS_JOYSTICK">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定 Android &#x2F; iOS 内置加速度计是否应列为操纵杆设备，而不是仅仅实际操纵杆列表。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，SDL 将加速计添加到真实的操纵杆列表，就好像它是 3 轴操纵杆一样</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0：仅列出真实的操纵杆列表并接受来自它们的输入<br>1：将加速计添加到真实的操纵杆列表，并将它们列出。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-ANDROID-APK-EXPANSION-PATCH-FILE-VERSION"><a href="#SDL-HINT-ANDROID-APK-EXPANSION-PATCH-FILE-VERSION" class="headerlink" title="SDL_HINT_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION"></a>SDL_HINT_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定Android APK扩展补丁文件版本的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下不设置此提示。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>Android APK扩展补丁文件版本（应该是“1”、“2”等字符串数字）</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_ANDROID_SEPARATE_MOUSE_AND_TOUCH</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_ANDROID_SEPARATE_MOUSE_AND_TOUCH/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_ANDROID_SEPARATE_MOUSE_AND_TOUCH/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-ANDROID-SEPARATE-MOUSE-AND-TOUCH"><a href="#SDL-HINT-ANDROID-SEPARATE-MOUSE-AND-TOUCH" class="headerlink" title="SDL_HINT_ANDROID_SEPARATE_MOUSE_AND_TOUCH"></a>SDL_HINT_ANDROID_SEPARATE_MOUSE_AND_TOUCH</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_ANDROID_SEPARATE_MOUSE_AND_TOUCH">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定一个变量来控制鼠标和触摸事件是一起处理还是单独处理的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，鼠标事件将作为触摸事件处理，并且触摸将引发假鼠标事件。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0：鼠标事件将作为触摸事件处理，触摸将引发假鼠标事件<br>1：鼠标事件将与纯触摸事件分开处理</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-APPLE-TV-CONTROLLER-UI-EVENTS"><a href="#SDL-HINT-APPLE-TV-CONTROLLER-UI-EVENTS" class="headerlink" title="SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS"></a>SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定与 Apple TV 一起使用的控制器是否生成 UI 事件的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，控制器输入不会生成 UI 事件。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0：控制器输入不会生成 UI 事件<br>1：控制器输入生成 UI 事件</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-APPLE-TV-REMOTE-ALLOW-ROTATION"><a href="#SDL-HINT-APPLE-TV-REMOTE-ALLOW-ROTATION" class="headerlink" title="SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION"></a>SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定 Apple TV 遥控器的操纵杆轴是否自动匹配遥控器旋转的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，远程指向不会影响操纵杆轴。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0：远程指向不会影响操纵杆轴<br>1：操纵杆轴基于遥控器的方向</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_BMP_SAVE_LEGACY_FORMAT</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_BMP_SAVE_LEGACY_FORMAT/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_BMP_SAVE_LEGACY_FORMAT/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-BMP-SAVE-LEGACY-FORMAT"><a href="#SDL-HINT-BMP-SAVE-LEGACY-FORMAT" class="headerlink" title="SDL_HINT_BMP_SAVE_LEGACY_FORMAT"></a>SDL_HINT_BMP_SAVE_LEGACY_FORMAT</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_BMP_SAVE_LEGACY_FORMAT">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定在保存 BMP 时， SDL 是否使用点阵图版本 4。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>使用</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0：使用<br>1：不使用</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_EMSCRIPTEN_ASYNCIFY</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_EMSCRIPTEN_ASYNCIFY/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_EMSCRIPTEN_ASYNCIFY/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-EMSCRIPTEN-ASYNCIFY"><a href="#SDL-HINT-EMSCRIPTEN-ASYNCIFY" class="headerlink" title="SDL_HINT_EMSCRIPTEN_ASYNCIFY"></a>SDL_HINT_EMSCRIPTEN_ASYNCIFY</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_EMSCRIPTEN_ASYNCIFY">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>在使用 asyncify 运行时 SDL 是否应自动将控制权交还给浏览器的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>当使用 asyncify 支持编译应用程序时，SDL 会暂停应用程序并将控制权自动交还给浏览器通过调用<a href="https://emscripten.org/docs/api_reference/emscripten.h.html#pseudo-synchronous-functions">emscripten_sleep</a></p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0：禁用 emscripten_sleep 调用<br>1：启用 emscripten_sleep 调用</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-EMSCRIPTEN-KEYBOARD-ELEMENT"><a href="#SDL-HINT-EMSCRIPTEN-KEYBOARD-ELEMENT" class="headerlink" title="SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT"></a>SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定一个值来覆盖 <a href="https://zh.wikipedia.org/wiki/Emscripten">Emscripten</a> 构建的键盘输入的绑定元素</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，SDL 将使用 JavaScript 窗口对象。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>#window: JavaScript 窗口对象（这是默认值）<br>#document: JavaScript 文档对象<br>#screen: JavaScript window.screen 对象<br>#canvas: 默认的 <a href="https://zh.wikipedia.org/wiki/WebGL">WebGL</a> 画布元素</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_FRAMEBUFFER_ACCELERATION</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_FRAMEBUFFER_ACCELERATION/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_FRAMEBUFFER_ACCELERATION/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-FRAMEBUFFER-ACCELERATION"><a href="#SDL-HINT-FRAMEBUFFER-ACCELERATION" class="headerlink" title="SDL_HINT_FRAMEBUFFER_ACCELERATION"></a>SDL_HINT_FRAMEBUFFER_ACCELERATION</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_FRAMEBUFFER_ACCELERATION">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定如何将 3D 加速与 <a href="/1999/01/05/SDL/Dictionary/SDL_GetWindowSurface/" title="SDL_GetWindowSurface">SDL_GetWindowSurface</a>结合使用的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，SDL 会尝试对是否在每个平台上使用加速进行最佳猜测。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0:禁用 3D 加速<br>1:启用 3D 加速，使用默认渲染器<br>X:使用 X 启用 3D 加速，其中 X 是有效的渲染驱动程序之一。 （例如“direct3d”、“opengl”等）</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_GAMECONTROLLERCONFIG</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_GAMECONTROLLERCONFIG/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_GAMECONTROLLERCONFIG/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-GAMECONTROLLERCONFIG"><a href="#SDL-HINT-GAMECONTROLLERCONFIG" class="headerlink" title="SDL_HINT_GAMECONTROLLERCONFIG"></a>SDL_HINT_GAMECONTROLLERCONFIG</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_GAMECONTROLLERCONFIG">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定额外游戏控制器数据库条目的提示.</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，没有指定额外的游戏控制器数据库条目。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>X:游戏控制器配置数据行，请参阅 SDL_gamecontroller.h</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_GRAB_KEYBOARD</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_GRAB_KEYBOARD/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_GRAB_KEYBOARD/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-GRAB-KEYBOARD"><a href="#SDL-HINT-GRAB-KEYBOARD" class="headerlink" title="SDL_HINT_GRAB_KEYBOARD"></a>SDL_HINT_GRAB_KEYBOARD</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_GRAB_KEYBOARD">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定从键盘抓取输入的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，SDL 不会占用键盘，因此系统快捷键仍然有效。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0:抓取只会影响鼠标<br>1：抓取会影响鼠标和键盘</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_IDLE_TIMER_DISABLED</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_IDLE_TIMER_DISABLED/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_IDLE_TIMER_DISABLED/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-IDLE-TIMER-DISABLED"><a href="#SDL-HINT-IDLE-TIMER-DISABLED" class="headerlink" title="SDL_HINT_IDLE_TIMER_DISABLED"></a>SDL_HINT_IDLE_TIMER_DISABLED</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_IDLE_TIMER_DISABLED">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定是否在 iOS 上禁用空闲计时器的变量的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，空闲计时器已启用。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0:启用空闲定时器<br>1：禁用空闲定时器</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_IME_INTERNAL_EDITING</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_IME_INTERNAL_EDITING/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_IME_INTERNAL_EDITING/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-IME-INTERNAL-EDITING"><a href="#SDL-HINT-IME-INTERNAL-EDITING" class="headerlink" title="SDL_HINT_IME_INTERNAL_EDITING"></a>SDL_HINT_IME_INTERNAL_EDITING</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_IME_INTERNAL_EDITING">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定特定 <a href="https://learn.microsoft.com/zh-cn/windows/apps/design/input/input-method-editors">IME</a> 是否应在内部处理文本编辑而不是发送<a href="/1999/01/07/SDL/Dictionary/SDL_TextEditingEvent/" title="SDL_TextEditingEvent">SDL_TEXTEDITING</a>  事件的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，发送 <a href="/1999/01/07/SDL/Dictionary/SDL_TextEditingEvent/" title="SDL_TextEditingEvent">SDL_TEXTEDITING</a> 事件，应用程序负责呈现这些事件中的文本，并以某种方式将其与提交的文本区分开来。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0:发送 <a href="/1999/01/07/SDL/Dictionary/SDL_TextEditingEvent/" title="SDL_TextEditingEvent">SDL_TEXTEDITING</a> 事件，应用程序负责呈现这些事件中的文本并以某种方式将其与提交的文本区分开来。 （默认）<br>1：如果 IME 支持，则不会发送 <a href="/1999/01/07/SDL/Dictionary/SDL_TextEditingEvent/" title="SDL_TextEditingEvent">SDL_TEXTEDITING</a> 事件，并且正在编写的文本将在其自己的 UI 中呈现。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-JOYSTICK-ALLOW-BACKGROUND-EVENTS"><a href="#SDL-HINT-JOYSTICK-ALLOW-BACKGROUND-EVENTS" class="headerlink" title="SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS"></a>SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定即使应用程序位于后台是否启用操纵杆（和游戏控制器）事件的提示</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，当应用程序处于后台时，不会启用操纵杆（和游戏控制器）事件</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0:当应用程序在后台时禁用操纵杆和游戏控制器输入事件<br>1:当应用程序在后台时启用操纵杆和游戏控制器输入事件</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-MAC-CTRL-CLICK-EMULATE-RIGHT-CLICK"><a href="#SDL-HINT-MAC-CTRL-CLICK-EMULATE-RIGHT-CLICK" class="headerlink" title="SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK"></a>SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定 ctrl+click 是否应在 Mac 上生成右键单击事件的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，在 Mac 上按住 ctrl 的同时单击左键不会生成右键单击事件。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0:禁用模拟右键单击<br>1:启用模拟右键单击</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-MOUSE-FOCUS-CLICKTHROUGH"><a href="#SDL-HINT-MOUSE-FOCUS-CLICKTHROUGH" class="headerlink" title="SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH"></a>SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定当单击以聚焦 SDL 窗口时是否发送鼠标单击事件的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，单击焦点时不会发送鼠标单击事件。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0:单击聚焦时不发送鼠标单击事件<br>1:单击聚焦时发送鼠标单击事件</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_MAC_BACKGROUND_APP</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_MAC_BACKGROUND_APP/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_MAC_BACKGROUND_APP/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-MAC-BACKGROUND-APP"><a href="#SDL-HINT-MAC-BACKGROUND-APP" class="headerlink" title="SDL_HINT_MAC_BACKGROUND_APP"></a>SDL_HINT_MAC_BACKGROUND_APP</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_MAC_BACKGROUND_APP">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定是否不应强制 SDL 应用程序成为 Mac OS X 上的前台进程的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，SDL 应用程序将被迫成为 Mac OS X 上的前台进程。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0:强制 SDL 应用程序成为前台进程（默认）<br>1:不要强制 SDL 应用程序成为前台进程</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_MOUSE_RELATIVE_MODE_WARP</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_MOUSE_RELATIVE_MODE_WARP/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_MOUSE_RELATIVE_MODE_WARP/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-MOUSE-RELATIVE-MODE-WARP"><a href="#SDL-HINT-MOUSE-RELATIVE-MODE-WARP" class="headerlink" title="SDL_HINT_MOUSE_RELATIVE_MODE_WARP"></a>SDL_HINT_MOUSE_RELATIVE_MODE_WARP</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_MOUSE_RELATIVE_MODE_WARP">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定是否使用鼠标变形实现相对鼠标模式的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，SDL 将使用原始输入进行相对鼠标模式</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0:相对鼠标模式使用原始输入<br>1:相对鼠标模式使用鼠标扭曲</p><p>相对鼠标模式:<br>相对鼠标是一种将鼠标移动转换为距离上一个鼠标位置的增量的方法，而不是移动到屏幕上的绝对位置。 这种类型的鼠标控制用于许多 CAD&#x2F;CAM、视觉效果和第一人称游戏软件。 在 CAD 程序中，您可能希望通过鼠标移动来控制 3D 对象的方向。 向左或向右移动鼠标可绕 Z 轴旋转对象，向上或向下移动鼠标可绕 X 轴旋转对象。 当您继续向左移动鼠标时，对象将继续绕轴旋转，并且旋转不受停在屏幕边框处的鼠标限制。</p><p>在相对鼠标模式下，鼠标光标不可见，因为鼠标正在控制方向移动并且未指向屏幕上的位置。</p><p>使用相对鼠标移动的应用程序通常提供进入或退出相对鼠标模式的方法，例如使用中键单击对象。 当按住中间按钮时，可以使用相对鼠标移动来控制对象。</p><p>所有 PCoIP 客户端都支持相对鼠标模式。 请注意，必须配置 PCoIP 零客户端才能启用它。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_MOUSE_RELATIVE_SCALING</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_MOUSE_RELATIVE_SCALING/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_MOUSE_RELATIVE_SCALING/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-MOUSE-RELATIVE-SCALING"><a href="#SDL-HINT-MOUSE-RELATIVE-SCALING" class="headerlink" title="SDL_HINT_MOUSE_RELATIVE_SCALING"></a>SDL_HINT_MOUSE_RELATIVE_SCALING</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_MOUSE_RELATIVE_SCALING">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定相对运动是否受渲染器缩放影响的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，相对鼠标增量受 DPI 和渲染器缩放的影响</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0:相对运动不受 DPI 或渲染器逻辑大小的影响<br>1:相对运动根据 DPI 缩放和逻辑大小进行缩放</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_NO_SIGNAL_HANDLERS</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_NO_SIGNAL_HANDLERS/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_NO_SIGNAL_HANDLERS/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-NO-SIGNAL-HANDLERS"><a href="#SDL-HINT-NO-SIGNAL-HANDLERS" class="headerlink" title="SDL_HINT_NO_SIGNAL_HANDLERS"></a>SDL_HINT_NO_SIGNAL_HANDLERS</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_NO_SIGNAL_HANDLERS">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定不捕获 SIGINT 或 SIGTERM 信号的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下安装 SIGINT 和 SIGTERM 处理程序，当它捕获信号时，将其转换为 SDL_QUIT 事件。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0:相对运动不受 DPI 或渲染器逻辑大小的影响<br>1:相对运动根据 DPI 缩放和逻辑大小进行缩放</p><p>SIGINT:<br>SIGINT信号为ctrl+c发送出来的信号，该信号只能结束前台进程，信号被当前进程树接收到，也就是说，不仅当前进程会收到信号，它的子进程也会收到；<br>SIGTERM:<br>SIGTERM可以被阻塞，kill不加任何参数的时候发送的就是这个信号，只有当前进程收到信号，子进程不会收到。如果当前进程被kill了，那么它的子进程的父进程将会是init，也就是pid为1的进程；</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_RENDER_DIRECT3D11_DEBUG</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_RENDER_DIRECT3D11_DEBUG/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_RENDER_DIRECT3D11_DEBUG/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-RENDER-DIRECT3D11-DEBUG"><a href="#SDL-HINT-RENDER-DIRECT3D11-DEBUG" class="headerlink" title="SDL_HINT_RENDER_DIRECT3D11_DEBUG"></a>SDL_HINT_RENDER_DIRECT3D11_DEBUG</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_RENDER_DIRECT3D11_DEBUG">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定控制是否启用 Direct3D 11+ 的调试层的变量的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，SDL 不使用 Direct3D 调试层。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0：禁用调试层使用<br>1：启用调试层使用</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_ORIENTATIONS</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_ORIENTATIONS/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_ORIENTATIONS/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-ORIENTATIONS"><a href="#SDL-HINT-ORIENTATIONS" class="headerlink" title="SDL_HINT_ORIENTATIONS"></a>SDL_HINT_ORIENTATIONS</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_ORIENTATIONS">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定控制iOS 上允许方向的变量的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，允许所有方向。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>LandscapeLeft:左侧<br>LandscapeRight:右侧<br>Portrait:上侧<br>PortraitUpsideDown:下侧</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_RENDER_DIRECT3D_THREADSAFE</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_RENDER_DIRECT3D_THREADSAFE/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_RENDER_DIRECT3D_THREADSAFE/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-RENDER-DIRECT3D-THREADSAFE"><a href="#SDL-HINT-RENDER-DIRECT3D-THREADSAFE" class="headerlink" title="SDL_HINT_RENDER_DIRECT3D_THREADSAFE"></a>SDL_HINT_RENDER_DIRECT3D_THREADSAFE</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_RENDER_DIRECT3D_THREADSAFE">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定是否为Direct3D 设备线程安全操作初始化 的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，创建 Direct3D 设备时禁用线程安全。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0：禁用线程安全（更快）<br>1：启用线程安全（较慢）</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_RENDER_DRIVER</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_RENDER_DRIVER/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_RENDER_DRIVER/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-RENDER-DRIVER"><a href="#SDL-HINT-RENDER-DRIVER" class="headerlink" title="SDL_HINT_RENDER_DRIVER"></a>SDL_HINT_RENDER_DRIVER</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_RENDER_DRIVER">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定要使用哪个渲染驱动程序的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，选择列表中当前平台上可用的第一个。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>direct3d<br>opengl<br>opengles2<br>opengles<br>metal<br>software</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_RENDER_LINE_METHOD</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_RENDER_LINE_METHOD/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_RENDER_LINE_METHOD/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-RENDER-LINE-METHOD"><a href="#SDL-HINT-RENDER-LINE-METHOD" class="headerlink" title="SDL_HINT_RENDER_LINE_METHOD"></a>SDL_HINT_RENDER_LINE_METHOD</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_RENDER_LINE_METHOD">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>控制 2D 渲染 API 如何渲染线条的变量。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0:使用默认的线条绘制方法（SDL 2.0.20 中的 Bresenham 线条算法）<br>1:使用 Bresenham 线算法的驱动点 API（正确，绘制许多点）<br>2:使用驱动程序线路 API（由于硬件驱动程序，偶尔会错过线路端点，这是 2.0.20 之前的默认设置）<br>3:使用驱动几何API（正确，绘制更粗的对角线）</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_RENDER_OPENGL_SHADERS</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_RENDER_OPENGL_SHADERS/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_RENDER_OPENGL_SHADERS/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-RENDER-OPENGL-SHADERS"><a href="#SDL-HINT-RENDER-OPENGL-SHADERS" class="headerlink" title="SDL_HINT_RENDER_OPENGL_SHADERS"></a>SDL_HINT_RENDER_OPENGL_SHADERS</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_RENDER_OPENGL_SHADERS">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定 OpenGL 渲染驱动程序是否使用着色器的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>如果 OpenGL 支持，则默认使用着色器。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0:禁用着色器<br>1:启用着色器（如果可用）</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_RENDER_SCALE_QUALITY</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_RENDER_SCALE_QUALITY/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_RENDER_SCALE_QUALITY/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-RENDER-SCALE-QUALITY"><a href="#SDL-HINT-RENDER-SCALE-QUALITY" class="headerlink" title="SDL_HINT_RENDER_SCALE_QUALITY"></a>SDL_HINT_RENDER_SCALE_QUALITY</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_RENDER_SCALE_QUALITY">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定缩放质量的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下使用最近像素采样。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0 or nearest:<a href="https://learn.microsoft.com/en-us/windows/uwp/graphics-concepts/nearest-point-sampling">nearest pixel sampling</a><br>1 or linear:<a href="https://medium.com/@rajilini/different-filters-for-image-processing-698e72924101">linear filtering (supported by OpenGL and Direct3D)</a><br>2 or best:<a href="https://zh.wikipedia.org/wiki/%E5%90%84%E5%90%91%E5%BC%82%E6%80%A7%E8%BF%87%E6%BB%A4">anisotropic filtering (supported by Direct3D)</a></p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_RENDER_VSYNC</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_RENDER_VSYNC/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_RENDER_VSYNC/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-RENDER-VSYNC"><a href="#SDL-HINT-RENDER-VSYNC" class="headerlink" title="SDL_HINT_RENDER_VSYNC"></a>SDL_HINT_RENDER_VSYNC</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_RENDER_VSYNC">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定在 <a href="/1999/01/10/SDL/Dictionary/SDL_CreateRenderer/" title="SDL_CreateRenderer">SDL_CreateRenderer</a> 中启用还是禁用垂直刷新同步以避免撕裂的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，SDL 使用传递到 <a href="/1999/01/10/SDL/Dictionary/SDL_CreateRenderer/" title="SDL_CreateRenderer">SDL_CreateRenderer</a> 的 <a href="/1999/01/10/SDL/Dictionary/SDL_RendererFlags/" title="SDL_RendererFlags">SDL_RENDERER_PRESENTVSYNC</a> 标志。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0:禁用垂直同步<br>1:启用垂直同步</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_RPI_VIDEO_LAYER</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_RPI_VIDEO_LAYER/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_RPI_VIDEO_LAYER/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-RPI-VIDEO-LAYER"><a href="#SDL-HINT-RPI-VIDEO-LAYER" class="headerlink" title="SDL_HINT_RPI_VIDEO_LAYER"></a>SDL_HINT_RPI_VIDEO_LAYER</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_RPI_VIDEO_LAYER">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定 SDL 应在 Raspberry PI 上使用哪个 Dispmanx 层的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，Dispmanx 层为“10000”。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>X:要使用的 Dispmanx 层</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_THREAD_STACK_SIZE</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_THREAD_STACK_SIZE/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_THREAD_STACK_SIZE/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-THREAD-STACK-SIZE"><a href="#SDL-HINT-THREAD-STACK-SIZE" class="headerlink" title="SDL_HINT_THREAD_STACK_SIZE"></a>SDL_HINT_THREAD_STACK_SIZE</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_THREAD_STACK_SIZE">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定一个变量的提示，该变量指定 SDL 的线程堆栈大小（以字节为单位）或“0”表示后端的默认大小。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，使用后端的默认线程堆栈大小。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0:使用后端的默认线程堆栈大小<br>X:使用提供的正线程堆栈大小</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_TIMER_RESOLUTION</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_TIMER_RESOLUTION/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_TIMER_RESOLUTION/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-TIMER-RESOLUTION"><a href="#SDL-HINT-TIMER-RESOLUTION" class="headerlink" title="SDL_HINT_TIMER_RESOLUTION"></a>SDL_HINT_TIMER_RESOLUTION</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_TIMER_RESOLUTION">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定计时器分辨率（以毫秒为单位）的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认值为“1”。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>X:计时器分辨率（以毫秒为单位）</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_VIDEO_ALLOW_SCREENSAVER</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_VIDEO_ALLOW_SCREENSAVER/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_VIDEO_ALLOW_SCREENSAVER/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-VIDEO-ALLOW-SCREENSAVER"><a href="#SDL-HINT-VIDEO-ALLOW-SCREENSAVER" class="headerlink" title="SDL_HINT_VIDEO_ALLOW_SCREENSAVER"></a>SDL_HINT_VIDEO_ALLOW_SCREENSAVER</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_VIDEO_ALLOW_SCREENSAVER">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定是否启用屏幕保护程序的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，SDL 将禁用屏幕保护程序。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0:禁用屏幕保护程序（默认）<br>1:启用屏幕保护程序</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-VIDEO-MAC-FULLSCREEN-SPACES"><a href="#SDL-HINT-VIDEO-MAC-FULLSCREEN-SPACES" class="headerlink" title="SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES"></a>SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指示 Mac OS X 上全屏 Spaces 策略的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下启用<a href="https://zh.wikipedia.org/wiki/Spaces">空间支持</a>。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0:禁用 Spaces 支持（FULLSCREEN_DESKTOP 不会使用它们，<a href="/1999/01/03/SDL/Dictionary/SDL_CreateWindow/" title="SDL_CreateWindow">SDL_WINDOW_RESIZABLE</a> 窗口不会在标题栏上提供“全屏”按钮）<br>1:启用空间支持（FULLSCREEN_DESKTOP 将使用它们，<a href="/1999/01/03/SDL/Dictionary/SDL_CreateWindow/" title="SDL_CreateWindow">SDL_WINDOW_RESIZABLE</a>  窗口将在其标题栏上提供“全屏”按钮）</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-VIDEO-MINIMIZE-ON-FOCUS-LOSS"><a href="#SDL-HINT-VIDEO-MINIMIZE-ON-FOCUS-LOSS" class="headerlink" title="SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS"></a>SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定 SDL_Window 在全屏模式下失去按键焦点时是否最小化的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，如果 SDL_Window 在全屏模式下失去关键焦点，则会最小化。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0:如果 SDL_Window 在全屏模式下失去焦点，不要最小化 SDL_Window<br>1:如果 SDL_Window 在全屏模式下失去焦点，最小化 SDL_Window</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-VIDEO-WINDOW-SHARE-PIXEL-FORMAT"><a href="#SDL-HINT-VIDEO-WINDOW-SHARE-PIXEL-FORMAT" class="headerlink" title="SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT"></a>SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定另一个 SDL_Window* 地址的提示（作为用“%p”格式化的十六进制字符串）。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下不设置此提示。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>X：SDL_Window* 的地址（作为字符串“%p”），使用 <a href="/1999/01/03/SDL/Dictionary/SDL_CreateWindowFrom/" title="SDL_CreateWindowFrom">SDL_CreateWindowFrom</a> 创建的新窗口应与其共享像素格式</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_VIDEO_HIGHDPI_DISABLED</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_VIDEO_HIGHDPI_DISABLED/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_VIDEO_HIGHDPI_DISABLED/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-VIDEO-HIGHDPI-DISABLED"><a href="#SDL-HINT-VIDEO-HIGHDPI-DISABLED" class="headerlink" title="SDL_HINT_VIDEO_HIGHDPI_DISABLED"></a>SDL_HINT_VIDEO_HIGHDPI_DISABLED</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_VIDEO_HIGHDPI_DISABLED">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定是否允许<a href="https://zhuanlan.zhihu.com/p/477471475">高 DPI </a>窗口（Mac 和 iOS 上的“Retina”）的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，允许使用高 DPI 窗口（Mac 和 iOS 上的“Retina”）。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0:允许高 DPI 窗口<br>1:不允许高 DPI 窗口</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_VIDEO_WIN_D3DCOMPILER</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_VIDEO_WIN_D3DCOMPILER/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_VIDEO_WIN_D3DCOMPILER/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-VIDEO-WIN-D3DCOMPILER"><a href="#SDL-HINT-VIDEO-WIN-D3DCOMPILER" class="headerlink" title="SDL_HINT_VIDEO_WIN_D3DCOMPILER"></a>SDL_HINT_VIDEO_WIN_D3DCOMPILER</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_VIDEO_WIN_D3DCOMPILER">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定在使用 <a href="https://zhuanlan.zhihu.com/p/584578172">Chrome ANGLE</a> 二进制文件时预加载哪个着色器编译器的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，将使用“d3dcompiler_46.dll”。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>d3dcompiler_46.dll:默认，最适合 <a href="https://zhuanlan.zhihu.com/p/467142740">Vista</a> 或更高版本<br>d3dcompiler_43.dll:给 XP使用<br>none:不加载任何库，如果您从源代码编译 ANGLE 并将编译器包含在二进制文件中，则很有用</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_VIDEO_X11_NET_WM_PING</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_VIDEO_X11_NET_WM_PING/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_VIDEO_X11_NET_WM_PING/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-VIDEO-X11-NET-WM-PING"><a href="#SDL-HINT-VIDEO-X11-NET-WM-PING" class="headerlink" title="SDL_HINT_VIDEO_X11_NET_WM_PING"></a>SDL_HINT_VIDEO_X11_NET_WM_PING</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_VIDEO_X11_NET_WM_PING">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定是否应支持 X11 <a href="https://specifications.freedesktop.org/wm-spec/1.4/ar01s06.html">_NET_WM_PING</a> 协议的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，SDL 将使用 _NET_WM_PING，但对于知道自己并不总是能够及时响应 ping 请求的应用程序，可以将其关闭以避免窗口管理器认为应用程序已挂起。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0:禁用_NET_WM_PING<br>1:启用_NET_WM_PING</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_VIDEO_X11_XINERAMA</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_VIDEO_X11_XINERAMA/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_VIDEO_X11_XINERAMA/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-VIDEO-X11-XINERAMA"><a href="#SDL-HINT-VIDEO-X11-XINERAMA" class="headerlink" title="SDL_HINT_VIDEO_X11_XINERAMA"></a>SDL_HINT_VIDEO_X11_XINERAMA</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_VIDEO_X11_XINERAMA">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定是否应使用 <a href="https://en.wikipedia.org/wiki/Xinerama">X11 Xinerama</a> 扩展的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，SDL 将使用 Xinerama（如果可用）。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0:禁用Xinerama<br>1:启用Xinerama</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_VIDEO_X11_XRANDR</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_VIDEO_X11_XRANDR/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_VIDEO_X11_XRANDR/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-VIDEO-X11-XRANDR"><a href="#SDL-HINT-VIDEO-X11-XRANDR" class="headerlink" title="SDL_HINT_VIDEO_X11_XRANDR"></a>SDL_HINT_VIDEO_X11_XRANDR</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_VIDEO_X11_XRANDR">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定是否应使用 X11 <a href="https://wiki.archlinuxcn.org/wiki/Xrandr">XRandR</a> 扩展的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，由于窗口管理器问题，SDL 不会使用 XRandR。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0:禁用XRandR<br>1:启用XRandR</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_VIDEO_X11_XVIDMODE</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_VIDEO_X11_XVIDMODE/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_VIDEO_X11_XVIDMODE/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-VIDEO-X11-XVIDMODE"><a href="#SDL-HINT-VIDEO-X11-XVIDMODE" class="headerlink" title="SDL_HINT_VIDEO_X11_XVIDMODE"></a>SDL_HINT_VIDEO_X11_XVIDMODE</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_VIDEO_X11_XVIDMODE">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定是否应使用 X11 !VidMode(定义待补充) 扩展的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，SDL 将使用 XVidMode（如果可用）。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0:禁用XVidMode<br>1:启用XVidMode</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-WINDOWS-DISABLE-THREAD-NAMING"><a href="#SDL-HINT-WINDOWS-DISABLE-THREAD-NAMING" class="headerlink" title="SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING"></a>SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>SDL 是否不应命名 Microsoft Windows 上的线程的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，SDL 将命名 Microsoft Windows 上的线程。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0:线程将被命名<br>1:线程将不被命名</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-WINDOWS-ENABLE-MESSAGELOOP"><a href="#SDL-HINT-WINDOWS-ENABLE-MESSAGELOOP" class="headerlink" title="SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP"></a>SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>Windows消息循环是否由SDL处理的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，SDL 将处理 Windows 消息循环。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0:窗口消息循环未运行<br>1:窗口消息循环在<a href="/1999/01/03/SDL/Dictionary/SDL_PumpEvents/" title="SDL_PumpEvents">SDL_PumpEvents</a>中处理</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_WINDOWS_NO_CLOSE_ON_ALT_F4</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_WINDOWS_NO_CLOSE_ON_ALT_F4/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_WINDOWS_NO_CLOSE_ON_ALT_F4/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-WINDOWS-NO-CLOSE-ON-ALT-F4"><a href="#SDL-HINT-WINDOWS-NO-CLOSE-ON-ALT-F4" class="headerlink" title="SDL_HINT_WINDOWS_NO_CLOSE_ON_ALT_F4"></a>SDL_HINT_WINDOWS_NO_CLOSE_ON_ALT_F4</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_WINDOWS_NO_CLOSE_ON_ALT_F4">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定 SDL 不应在 Microsoft Windows 上为 Alt+F4 生成 <a href="/1999/01/07/SDL/Dictionary/SDL_WindowEventID/" title="SDL_WindowEventID">SDL_WINDOWEVENT_CLOSE</a> 事件的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，SDL 将为 Alt+F4 生成 SDL_WINDOWEVENT_CLOSE 事件。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0:为 Alt+F4 生成 SDL_WINDOWEVENT_CLOSE 事件（默认）<br>1:不生成事件，只对 Alt+F4 进行正常的按键处理</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-WINDOW-FRAME-USABLE-WHILE-CURSOR-HIDDEN"><a href="#SDL-HINT-WINDOW-FRAME-USABLE-WHILE-CURSOR-HIDDEN" class="headerlink" title="SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN"></a>SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定当光标隐藏时窗口框架和标题栏是否交互。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，当光标隐藏时，SDL 将允许与窗口框架进行交互。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0:当光标隐藏时，窗口框架不具有交互性（无法移动、调整大小等）<br>1:当光标隐藏时，窗口框架是交互式的</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_WINRT_HANDLE_BACK_BUTTON</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_WINRT_HANDLE_BACK_BUTTON/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_WINRT_HANDLE_BACK_BUTTON/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-WINRT-HANDLE-BACK-BUTTON"><a href="#SDL-HINT-WINRT-HANDLE-BACK-BUTTON" class="headerlink" title="SDL_HINT_WINRT_HANDLE_BACK_BUTTON"></a>SDL_HINT_WINRT_HANDLE_BACK_BUTTON</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_WINRT_HANDLE_BACK_BUTTON">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>变量以允许 Windows Phone 上的后退按钮按下事件标记为已处理的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，未设置此提示，应用程序将被终止。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>1:将按钮标记为已处理</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_WINRT_PRIVACY_POLICY_LABEL</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_WINRT_PRIVACY_POLICY_LABEL/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_WINRT_PRIVACY_POLICY_LABEL/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-WINRT-PRIVACY-POLICY-LABEL"><a href="#SDL-HINT-WINRT-PRIVACY-POLICY-LABEL" class="headerlink" title="SDL_HINT_WINRT_PRIVACY_POLICY_LABEL"></a>SDL_HINT_WINRT_PRIVACY_POLICY_LABEL</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_WINRT_PRIVACY_POLICY_LABEL">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>为 <a href="https://zh.wikipedia.org/wiki/Windows_Runtime">WinRT</a> 应用的隐私策略链接指定标签文本的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，此提示的值为“隐私政策”。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>X:WinRT 应用程序隐私策略链接的标签文本</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_WINRT_PRIVACY_POLICY_URL</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_WINRT_PRIVACY_POLICY_URL/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_WINRT_PRIVACY_POLICY_URL/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-WINRT-PRIVACY-POLICY-URL"><a href="#SDL-HINT-WINRT-PRIVACY-POLICY-URL" class="headerlink" title="SDL_HINT_WINRT_PRIVACY_POLICY_URL"></a>SDL_HINT_WINRT_PRIVACY_POLICY_URL</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_WINRT_PRIVACY_POLICY_URL">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定 <a href="https://zh.wikipedia.org/wiki/Windows_Runtime">WinRT</a> 应用隐私策略 URL 的提示。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下不设置此提示。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>X:WinRT 应用隐私策略的 URL</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HINT_XINPUT_ENABLED</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HINT_XINPUT_ENABLED/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HINT_XINPUT_ENABLED/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HINT-XINPUT-ENABLED"><a href="#SDL-HINT-XINPUT-ENABLED" class="headerlink" title="SDL_HINT_XINPUT_ENABLED"></a>SDL_HINT_XINPUT_ENABLED</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HINT_XINPUT_ENABLED">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>指定是否检测到 Xinput 游戏手柄设备的提示。 Xinput 仅限 4 个游戏手柄，如果您想要超过 4 个，则需要将其设置为“0”。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认情况下，会检测到 Xinput 游戏手柄设备。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>0:禁用 XInput 检测（仅使用直接输入）<br>1:启用 XInput 检测（默认）</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HintPriority</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_HintPriority/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_HintPriority/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HintPriority"><a href="#SDL-HintPriority" class="headerlink" title="SDL_HintPriority"></a>SDL_HintPriority</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HintPriority">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>优先级的枚举。</p><h3 id="枚举值"><a href="#枚举值" class="headerlink" title="枚举值"></a>枚举值</h3><p>SDL_HINT_DEFAULT：低优先级，用于默认值<br>SDL_HINT_NORMAL：中等优先级<br>SDL_HINT_OVERRIDE：高优先级</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_ResetHint</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_ResetHint/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_ResetHint/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-ResetHint"><a href="#SDL-ResetHint" class="headerlink" title="SDL_ResetHint"></a>SDL_ResetHint</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_ResetHint">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>将提示重置为默认值。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_bool <span class="hljs-title">SDL_ResetHint</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>name：要设置的提示</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果设置了提示，则返回 SDL_TRUE，否则返回 SDL_FALSE。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_ResetHints</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_ResetHints/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_ResetHints/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-ResetHints"><a href="#SDL-ResetHints" class="headerlink" title="SDL_ResetHints"></a>SDL_ResetHints</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_ResetHints">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>将所有提示重置为默认值。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SDL_ResetHints</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_SetHint</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_SetHint/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_SetHint/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-SetHint"><a href="#SDL-SetHint" class="headerlink" title="SDL_SetHint"></a>SDL_SetHint</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_SetHint">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>设置具有正常优先级的提示。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_bool <span class="hljs-title">SDL_SetHint</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name,</span></span><br><span class="hljs-params"><span class="hljs-function">                     <span class="hljs-type">const</span> <span class="hljs-type">char</span> *value)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>name：要设置的提示<br>value：提示变量的值</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果设置了提示，则返回 SDL_TRUE，否则返回 SDL_FALSE。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_SetHintWithPriority</title>
    <link href="/1999/01/14/SDL/Dictionary/SDL_SetHintWithPriority/"/>
    <url>/1999/01/14/SDL/Dictionary/SDL_SetHintWithPriority/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-SetHintWithPriority"><a href="#SDL-SetHintWithPriority" class="headerlink" title="SDL_SetHintWithPriority"></a>SDL_SetHintWithPriority</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_SetHintWithPriority">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>设置具有特定优先级的提示。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_bool <span class="hljs-title">SDL_SetHintWithPriority</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name,</span></span><br><span class="hljs-params"><span class="hljs-function">                                 <span class="hljs-type">const</span> <span class="hljs-type">char</span> *value,</span></span><br><span class="hljs-params"><span class="hljs-function">                                 SDL_HintPriority priority)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>name：要设置的提示<br>value：提示变量的值<br>priority:提示的 <a href="/1999/01/14/SDL/Dictionary/SDL_HintPriority/" title="SDL_HintPriority">SDL_HintPriority</a> 级别</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果设置了提示，则返回 SDL_TRUE，否则返回 SDL_FALSE。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_FreeAnimation</title>
    <link href="/1999/01/14/SDL/Dictionary/IMG_FreeAnimation/"/>
    <url>/1999/01/14/SDL/Dictionary/IMG_FreeAnimation/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-FreeAnimation"><a href="#IMG-FreeAnimation" class="headerlink" title="IMG_FreeAnimation"></a>IMG_FreeAnimation</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_FreeAnimation">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>处理 IMG_Animation 并释放其资源。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">IMG_FreeAnimation</span><span class="hljs-params">(IMG_Animation *anim)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>anim: 要处理的 IMG_Animation</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_Init</title>
    <link href="/1999/01/14/SDL/Dictionary/IMG_Init/"/>
    <url>/1999/01/14/SDL/Dictionary/IMG_Init/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-Init"><a href="#IMG-Init" class="headerlink" title="IMG_Init"></a>IMG_Init</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_Init">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>初始化SDL_image。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IMG_Init</span><span class="hljs-params">(<span class="hljs-type">int</span> flags)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>flags: 初始化的标志</p><p>标志包括：<br>IMG_INIT_JPG<br>IMG_INIT_PNG<br>IMG_INIT_TIF<br>IMG_INIT_WEBP<br>IMG_INIT_JXL<br>IMG_INIT_AVIF</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_isBMP</title>
    <link href="/1999/01/14/SDL/Dictionary/IMG_isBMP/"/>
    <url>/1999/01/14/SDL/Dictionary/IMG_isBMP/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-isBMP"><a href="#IMG-isBMP" class="headerlink" title="IMG_isBMP"></a>IMG_isBMP</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_isBMP">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>检测可读&#x2F;可查找的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a> 上的 BMP 图像数据。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IMG_isBMP</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src: 可查找&#x2F;可读的 SDL_RWops 来提供图像数据。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果这是 BMP 数据，则返回非零，否则返回零。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_isAVIF</title>
    <link href="/1999/01/14/SDL/Dictionary/IMG_isAVIF/"/>
    <url>/1999/01/14/SDL/Dictionary/IMG_isAVIF/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-isAVIF"><a href="#IMG-isAVIF" class="headerlink" title="IMG_isAVIF"></a>IMG_isAVIF</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_isAVIF">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>检测可读&#x2F;可查找的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a> 上的 AVIF 图像数据。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IMG_Init</span><span class="hljs-params">(<span class="hljs-type">int</span> flags)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>flags: 初始化的标志</p><p>标志包括：<br>IMG_INIT_JPG<br>IMG_INIT_PNG<br>IMG_INIT_TIF<br>IMG_INIT_WEBP<br>IMG_INIT_JXL<br>IMG_INIT_AVIF</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_isCUR</title>
    <link href="/1999/01/14/SDL/Dictionary/IMG_isCUR/"/>
    <url>/1999/01/14/SDL/Dictionary/IMG_isCUR/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-isCUR"><a href="#IMG-isCUR" class="headerlink" title="IMG_isCUR"></a>IMG_isCUR</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_isCUR">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>检测可读&#x2F;可查找的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a> 上的 CUR 图像数据。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IMG_isCUR</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src: 可查找&#x2F;可读的 SDL_RWops 来提供图像数据。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果这是 CUR 数据，则返回非零，否则返回零。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_isGIF</title>
    <link href="/1999/01/14/SDL/Dictionary/IMG_isGIF/"/>
    <url>/1999/01/14/SDL/Dictionary/IMG_isGIF/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-isGIF"><a href="#IMG-isGIF" class="headerlink" title="IMG_isGIF"></a>IMG_isGIF</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_isGIF">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>检测可读&#x2F;可查找的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a> 上的 GIF 图像数据。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IMG_isGIF</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src: 可查找&#x2F;可读的 SDL_RWops 来提供图像数据。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果这是 GIF 数据，则返回非零，否则返回零。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_isICO</title>
    <link href="/1999/01/14/SDL/Dictionary/IMG_isICO/"/>
    <url>/1999/01/14/SDL/Dictionary/IMG_isICO/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-isICO"><a href="#IMG-isICO" class="headerlink" title="IMG_isICO"></a>IMG_isICO</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_isICO">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>检测可读&#x2F;可查找的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a> 上的  ICO 图像数据。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IMG_isICO</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src: 可查找&#x2F;可读的 SDL_RWops 来提供图像数据。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果这是 ICO 数据，则返回非零，否则返回零。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_isJXL</title>
    <link href="/1999/01/14/SDL/Dictionary/IMG_isJXL/"/>
    <url>/1999/01/14/SDL/Dictionary/IMG_isJXL/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-isJXL"><a href="#IMG-isJXL" class="headerlink" title="IMG_isJXL"></a>IMG_isJXL</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_isJXL">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>检测可读&#x2F;可查找的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a> 上的  JXL  图像数据。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IMG_isJXL</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src: 可查找&#x2F;可读的 SDL_RWops 来提供图像数据。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果这是 JXL  数据，则返回非零，否则返回零。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_isJPG</title>
    <link href="/1999/01/14/SDL/Dictionary/IMG_isJPG/"/>
    <url>/1999/01/14/SDL/Dictionary/IMG_isJPG/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-isJPG"><a href="#IMG-isJPG" class="headerlink" title="IMG_isJPG"></a>IMG_isJPG</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_isJPG">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>检测可读&#x2F;可查找的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a> 上的  JPG 图像数据。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IMG_isJPG</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src: 可查找&#x2F;可读的 SDL_RWops 来提供图像数据。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果这是 JPG 数据，则返回非零，否则返回零。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_isLBM</title>
    <link href="/1999/01/14/SDL/Dictionary/IMG_isLBM/"/>
    <url>/1999/01/14/SDL/Dictionary/IMG_isLBM/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-isLBM"><a href="#IMG-isLBM" class="headerlink" title="IMG_isLBM"></a>IMG_isLBM</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_isLBM">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>检测可读&#x2F;可查找的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a> 上的  LBM   图像数据。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IMG_isLBM</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src: 可查找&#x2F;可读的 SDL_RWops 来提供图像数据。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果这是 LBM   数据，则返回非零，否则返回零。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_isPNG</title>
    <link href="/1999/01/14/SDL/Dictionary/IMG_isPNG/"/>
    <url>/1999/01/14/SDL/Dictionary/IMG_isPNG/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-isPNG"><a href="#IMG-isPNG" class="headerlink" title="IMG_isPNG"></a>IMG_isPNG</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_isPNG">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>检测可读&#x2F;可查找的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a> 上的  PNG  图像数据。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IMG_isPNG</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src: 可查找&#x2F;可读的 SDL_RWops 来提供图像数据。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果这是 PNG 数据，则返回非零，否则返回零。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_isPCX</title>
    <link href="/1999/01/14/SDL/Dictionary/IMG_isPCX/"/>
    <url>/1999/01/14/SDL/Dictionary/IMG_isPCX/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-isPCX"><a href="#IMG-isPCX" class="headerlink" title="IMG_isPCX"></a>IMG_isPCX</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_isPCX">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>检测可读&#x2F;可查找的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a> 上的  PCX  图像数据。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IMG_isPCX</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src: 可查找&#x2F;可读的 SDL_RWops 来提供图像数据。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果这是 PCX 数据，则返回非零，否则返回零。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_isPNM</title>
    <link href="/1999/01/14/SDL/Dictionary/IMG_isPNM/"/>
    <url>/1999/01/14/SDL/Dictionary/IMG_isPNM/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-isPNM"><a href="#IMG-isPNM" class="headerlink" title="IMG_isPNM"></a>IMG_isPNM</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_isPNM">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>检测可读&#x2F;可查找的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a> 上的  PNM  图像数据。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IMG_isPNM</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src: 可查找&#x2F;可读的 SDL_RWops 来提供图像数据。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果这是 PNM 数据，则返回非零，否则返回零。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_isSVG</title>
    <link href="/1999/01/14/SDL/Dictionary/IMG_isSVG/"/>
    <url>/1999/01/14/SDL/Dictionary/IMG_isSVG/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-isSVG"><a href="#IMG-isSVG" class="headerlink" title="IMG_isSVG"></a>IMG_isSVG</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_isSVG">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>检测可读&#x2F;可查找的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a> 上的  SVG  图像数据。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IMG_isSVG</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src: 可查找&#x2F;可读的 SDL_RWops 来提供图像数据。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果这是 SVG 数据，则返回非零，否则返回零。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IMG_isQOI</title>
    <link href="/1999/01/14/SDL/Dictionary/IMG_isQOI/"/>
    <url>/1999/01/14/SDL/Dictionary/IMG_isQOI/</url>
    
    <content type="html"><![CDATA[<h1 id="IMG-isQOI"><a href="#IMG-isQOI" class="headerlink" title="IMG_isQOI"></a>IMG_isQOI</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2_image/IMG_isQOI">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>检测可读&#x2F;可查找的 <a href="/1999/01/05/SDL/Dictionary/SDL_RWops/" title="SDL_RWops">SDL_RWops</a> 上的  QOI  图像数据。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IMG_isQOI</span><span class="hljs-params">(SDL_RWops *src)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src: 可查找&#x2F;可读的 SDL_RWops 来提供图像数据。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果这是 QOI 数据，则返回非零，否则返回零。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_BlendMode</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_BlendMode/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_BlendMode/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-BlendMode"><a href="#SDL-BlendMode" class="headerlink" title="SDL_BlendMode"></a>SDL_BlendMode</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_BlendMode#values">Click to jump</a></p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>SDL_BLENDMODE_NONE：不混合<br>dstRGBA &#x3D; srcRGBA</p><p>SDL_BLENDMODE_BLEND：阿尔法混合<br>dstRGB &#x3D; (srcRGB * srcA) + (dstRGB * (1-srcA))<br>dstA &#x3D; srcA + (dstA * (1-srcA))</p><p>SDL_BLENDMODE_ADD：加法混合<br>dstRGB &#x3D; (srcRGB * srcA) + dstRGB<br>dstA &#x3D; dstA</p><p>SDL_BLENDMODE_MOD：色彩调制<br>dstRGB &#x3D; srcRGB * dstRGB<br>dstA &#x3D; dstA</p><p>SDL_BLENDMODE_MUL：颜色乘法<br>dstRGB &#x3D; (srcRGB * dstRGB) + (dstRGB * (1-srcA))<br>dstA &#x3D; (srcA * dstA) + (dstA * (1-srcA))</p><h3 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h3><p>srcRGBA :源的混合系数<br>dstRGBA: 目的的混合系数<br>srcRGB   :源RGB的混合系数<br>srcAlpha ：源alpha的混合系数<br>dstRGB: 目的的RGB的混合系数<br>dstAlpha:目的的alpha混合系数</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_CreateSoftwareRenderer</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_CreateSoftwareRenderer/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_CreateSoftwareRenderer/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-CreateSoftwareRenderer"><a href="#SDL-CreateSoftwareRenderer" class="headerlink" title="SDL_CreateSoftwareRenderer"></a>SDL_CreateSoftwareRenderer</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_CreateSoftwareRenderer">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>为surface创建 2D 软件渲染上下文。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Renderer * <span class="hljs-title">SDL_CreateSoftwareRenderer</span><span class="hljs-params">(SDL_Surface * surface)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>surface: 表示完成渲染的表面的 <a href="/1999/01/05/SDL/Dictionary/SDL_Surface/" title="SDL_Surface">SDL_Surface</a>结构</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回有效的渲染上下文，如果出现错误，则返回 NULL；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_CreateRenderer</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_CreateRenderer/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_CreateRenderer/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-CreateRenderer"><a href="#SDL-CreateRenderer" class="headerlink" title="SDL_CreateRenderer"></a>SDL_CreateRenderer</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_CreateRenderer">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>为窗口创建 2D 渲染上下文。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Renderer * <span class="hljs-title">SDL_CreateRenderer</span><span class="hljs-params">(SDL_Window * window, <span class="hljs-type">int</span> index, Uint32 flags)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>window：显示渲染的窗口<br>index：初始化渲染驱动的索引，或者-1来初始化支持请求标志的第一个<br>flags：0，或一个或多个<a href="/1999/01/10/SDL/Dictionary/SDL_RendererFlags/" title="SDL_RendererFlags">SDL_RendererFlags</a>一起</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回有效的渲染上下文，如果出现错误，则返回 NULL；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_CreateTexture</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_CreateTexture/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_CreateTexture/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-CreateTexture"><a href="#SDL-CreateTexture" class="headerlink" title="SDL_CreateTexture"></a>SDL_CreateTexture</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_CreateTexture">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>为渲染上下文创建纹理。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Texture * <span class="hljs-title">SDL_CreateTexture</span><span class="hljs-params">(SDL_Renderer * renderer,Uint32 format,<span class="hljs-type">int</span> access, <span class="hljs-type">int</span> w,<span class="hljs-type">int</span> h)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文<br>format: <a href="/1999/01/10/SDL/Dictionary/SDL_PixelFormatEnum/" title="SDL_PixelFormatEnum">SDL_PixelFormatEnum</a> 中的枚举值之一<br>access：one of the enumerated values in <a href="/1999/01/10/SDL/Dictionary/SDL_TextureAccess/" title="SDL_TextureAccess">SDL_TextureAccess</a><br>w: 纹理的宽度（以像素为单位<br>h: 纹理的高度（以像素为单位）</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回有效的渲染上下文，如果出现错误，则返回 NULL；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_CreateTextureFromSurface</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_CreateTextureFromSurface/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_CreateTextureFromSurface/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-CreateTextureFromSurface"><a href="#SDL-CreateTextureFromSurface" class="headerlink" title="SDL_CreateTextureFromSurface"></a>SDL_CreateTextureFromSurface</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_CreateTextureFromSurface">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>从现有surface创建纹理。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Texture * <span class="hljs-title">SDL_CreateTextureFromSurface</span><span class="hljs-params">(SDL_Renderer * renderer, SDL_Surface * surface)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文<br>surface: <a href="/1999/01/05/SDL/Dictionary/SDL_Surface/" title="SDL_Surface">SDL_Surface</a> 中的枚举值之一</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回创建的纹理或失败时返回 NULL；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_CreateWindowAndRenderer</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_CreateWindowAndRenderer/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_CreateWindowAndRenderer/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-CreateWindowAndRenderer"><a href="#SDL-CreateWindowAndRenderer" class="headerlink" title="SDL_CreateWindowAndRenderer"></a>SDL_CreateWindowAndRenderer</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_CreateWindowAndRenderer">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>创建一个窗口和默认渲染器。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_CreateWindowAndRenderer</span><span class="hljs-params">(<span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height, Uint32 window_flags,SDL_Window **window, SDL_Renderer **renderer)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 染器的指针，或错误时为 NULL<br>window: 窗口的指针，或错误时为 NULL<br>width: 窗户的宽度<br>height: 窗户的高度<br>window_flags: 用于创建窗口的flag<a href="/1999/01/03/SDL/Dictionary/SDL_CreateWindow/" title="SDL_CreateWindow">SDL_CreateWindow</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，错误时返回 -1；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_FRect</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_FRect/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_FRect/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-FRect"><a href="#SDL-FRect" class="headerlink" title="SDL_FRect"></a>SDL_FRect</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_FRect">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>包含矩形定义的结构，原点位于左上角。</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><ol><li>float x: 矩形左上角的 x 位置</li><li>float y: 矩形左上角的 y 位置</li><li>float w: 矩形的宽度</li><li>float h: 矩形的高度</li></ol>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_FPoint</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_FPoint/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_FPoint/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-FPoint"><a href="#SDL-FPoint" class="headerlink" title="SDL_FPoint"></a>SDL_FPoint</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_FPoint">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>定义二维点的结构。</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><ol><li>float x: 点的 x 坐标</li><li>float y: 点的 y 坐标</li></ol><h3 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h3><p>待补充</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_DestroyRenderer</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_DestroyRenderer/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_DestroyRenderer/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-DestroyRenderer"><a href="#SDL-DestroyRenderer" class="headerlink" title="SDL_DestroyRenderer"></a>SDL_DestroyRenderer</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_DestroyRenderer">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>销毁窗口的渲染上下文并释放关联的纹理。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SDL_DestroyRenderer</span><span class="hljs-params">(SDL_Renderer * renderer)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果渲染器为NULL，则该函数将在将SDL错误消息设置为“无效渲染器”后立即返回。请参阅 SDL_GetError()。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_GetRenderDrawBlendMode</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_GetRenderDrawBlendMode/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_GetRenderDrawBlendMode/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-GetRenderDrawBlendMode"><a href="#SDL-GetRenderDrawBlendMode" class="headerlink" title="SDL_GetRenderDrawBlendMode"></a>SDL_GetRenderDrawBlendMode</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_Renderer">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>获取用于绘图操作的混合模式。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_GetRenderDrawBlendMode</span><span class="hljs-params">(SDL_Renderer * renderer, SDL_BlendMode *blendMode)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文<br>blendMode: <a href="/1999/01/10/SDL/Dictionary/SDL_BlendMode/" title="SDL_BlendMode">SDL_BlendMode</a>的指针</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果渲染器为NULL，则该函数将在将SDL错误消息设置为“无效渲染器”后立即返回。请参阅 SDL_GetError()。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_GetRenderDrawColor</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_GetRenderDrawColor/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_GetRenderDrawColor/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-GetRenderDrawColor"><a href="#SDL-GetRenderDrawColor" class="headerlink" title="SDL_GetRenderDrawColor"></a>SDL_GetRenderDrawColor</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_GetRenderDrawColor">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>获取用于绘图操作（矩形、线条和清除）的颜色。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_GetRenderDrawColor</span><span class="hljs-params">(SDL_Renderer * renderer,Uint8 * r, Uint8 * g, Uint8 * b,Uint8 * a)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文<br>r：用于在渲染目标上绘制的红色值的指针<br>g: 用于在渲染目标上绘制的绿色值的指针<br>b: 用于在渲染目标上绘制的蓝色值的指针<br>a: 用于在渲染目标上绘制的阿尔法值的指针</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_GetRenderTarget</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_GetRenderTarget/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_GetRenderTarget/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-GetRenderTarget"><a href="#SDL-GetRenderTarget" class="headerlink" title="SDL_GetRenderTarget"></a>SDL_GetRenderTarget</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_GetRenderTarget">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>获取当前渲染目标。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Texture * <span class="hljs-title">SDL_GetRenderTarget</span><span class="hljs-params">(SDL_Renderer *renderer)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回当前渲染目标或默认渲染目标 NULL。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_GetRendererInfo</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_GetRendererInfo/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_GetRendererInfo/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-GetRendererInfo"><a href="#SDL-GetRendererInfo" class="headerlink" title="SDL_GetRendererInfo"></a>SDL_GetRendererInfo</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_GetRendererInfo">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>获取有关渲染上下文的信息。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_GetRendererInfo</span><span class="hljs-params">(SDL_Renderer * renderer,SDL_RendererInfo * info)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文<br>info：一个 <a href="/1999/01/10/SDL/Dictionary/SDL_RendererInfo/" title="SDL_RendererInfo">SDL_RendererInfo</a> 结构，有关当前渲染器的信息</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_GetRendererOutputSize</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_GetRendererOutputSize/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_GetRendererOutputSize/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-GetRendererOutputSize"><a href="#SDL-GetRendererOutputSize" class="headerlink" title="SDL_GetRendererOutputSize"></a>SDL_GetRendererOutputSize</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_GetRendererOutputSize">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>获取渲染上下文的输出大小（以像素为单位）。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_GetRendererOutputSize</span><span class="hljs-params">(SDL_Renderer * renderer, <span class="hljs-type">int</span> *w, <span class="hljs-type">int</span> *h)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文<br>w: 宽度<br>h: 高度</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_Point</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_Point/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_Point/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-Point"><a href="#SDL-Point" class="headerlink" title="SDL_Point"></a>SDL_Point</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_Point">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>定义二维点的结构。</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><ol><li>int x: 点的 x 坐标</li><li>int y: 点的 y 坐标</li></ol><h3 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h3><p>待补充</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_PixelFormatEnum</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_PixelFormatEnum/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_PixelFormatEnum/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-PixelFormatEnum"><a href="#SDL-PixelFormatEnum" class="headerlink" title="SDL_PixelFormatEnum"></a>SDL_PixelFormatEnum</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_PixelFormatEnum">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>像素格式的枚举。</p><h3 id="枚举值"><a href="#枚举值" class="headerlink" title="枚举值"></a>枚举值</h3><p>SDL_PIXELTYPE(format)：像素格式的类型<br>SDL_PIXELORDER(format)：像素格式中通道或位的顺序<br>SDL_PIXELLAYOUT(format)：像素格式的通道位模式<br>SDL_BITSPERPIXEL(format)：像素格式中颜色信息的位数<br>SDL_BYTESPERPIXEL(format)：用于表示像素的字节数<br>SDL_ISPIXELFORMAT_INDEXED(format)：对于具有调色板的像素格式为 true<br>SDL_ISPIXELFORMAT_ALPHA(format)：对于具有 Alpha 通道的像素格式为 true<br>SDL_ISPIXELFORMAT_FOURCC(format)：对于表示独特格式的像素格式为 true，例如 YUV 格式</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderClear</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderClear/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderClear/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderClear"><a href="#SDL-RenderClear" class="headerlink" title="SDL_RenderClear"></a>SDL_RenderClear</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderClear">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>用绘图颜色清除当前渲染目标。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_RenderClear</span><span class="hljs-params">(SDL_Renderer * renderer)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderCopy</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderCopy/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderCopy/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderCopy"><a href="#SDL-RenderCopy" class="headerlink" title="SDL_RenderCopy"></a>SDL_RenderCopy</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderCopy">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>将纹理的一部分复制到当前渲染目标。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_RenderCopy</span><span class="hljs-params">(SDL_Renderer * renderer,</span></span><br><span class="hljs-params"><span class="hljs-function">                   SDL_Texture * texture,</span></span><br><span class="hljs-params"><span class="hljs-function">                   <span class="hljs-type">const</span> SDL_Rect * srcrect,</span></span><br><span class="hljs-params"><span class="hljs-function">                   <span class="hljs-type">const</span> SDL_Rect * dstrect)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文<br>texture: 源纹理<br>srcrect: 源<a href="/1999/01/05/SDL/Dictionary/SDL_Rect/" title="SDL_Rect">SDL_Rect</a> 结构或整个渲染目标 NULL<br>dstrect: 目标 <a href="/1999/01/05/SDL/Dictionary/SDL_Rect/" title="SDL_Rect">SDL_Rect</a> 结构或整个渲染目标的 NULL；纹理将被拉伸以填充给定的矩形</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderCopyEx</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderCopyEx/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderCopyEx/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderCopyEx"><a href="#SDL-RenderCopyEx" class="headerlink" title="SDL_RenderCopyEx"></a>SDL_RenderCopyEx</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderCopyEx">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>将纹理的一部分复制到当前渲染，并可选择旋转和翻转。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_RenderCopyEx</span><span class="hljs-params">(SDL_Renderer * renderer,</span></span><br><span class="hljs-params"><span class="hljs-function">                   SDL_Texture * texture,</span></span><br><span class="hljs-params"><span class="hljs-function">                   <span class="hljs-type">const</span> SDL_Rect * srcrect,</span></span><br><span class="hljs-params"><span class="hljs-function">                   <span class="hljs-type">const</span> SDL_Rect * dstrect,</span></span><br><span class="hljs-params"><span class="hljs-function">                   <span class="hljs-type">const</span> <span class="hljs-type">double</span> angle,</span></span><br><span class="hljs-params"><span class="hljs-function">                   <span class="hljs-type">const</span> SDL_Point *center,</span></span><br><span class="hljs-params"><span class="hljs-function">                   <span class="hljs-type">const</span> SDL_RendererFlip flip)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文<br>texture: 源纹理<br>srcrect: 整个纹理的<a href="/1999/01/05/SDL/Dictionary/SDL_Rect/" title="SDL_Rect">SDL_Rect</a> 结构或 NULL<br>dstrect: 目标 <a href="/1999/01/05/SDL/Dictionary/SDL_Rect/" title="SDL_Rect">SDL_Rect</a> 结构或整个渲染目标的 NULL；纹理将被拉伸以填充给定的矩形<br>angle: 一个以度为单位的角度，指示将应用于 dstect 的旋转，以顺时针方向旋转它<br>center: 指向一个点的指针，指示 dstrect 将围绕其旋转的点<br>flip: 一个 <a href="/1999/01/10/SDL/Dictionary/SDL_RendererFlip/" title="SDL_RendererFlip">SDL_RendererFlip</a> 值，说明应在纹理上执行哪些翻转操作</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderCopyExF</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderCopyExF/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderCopyExF/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderCopyExF"><a href="#SDL-RenderCopyExF" class="headerlink" title="SDL_RenderCopyExF"></a>SDL_RenderCopyExF</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderCopyExF">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>以子像素精度将源纹理的一部分复制到当前渲染目标，并进行旋转和翻转。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_RenderCopyExF</span><span class="hljs-params">(SDL_Renderer * renderer,</span></span><br><span class="hljs-params"><span class="hljs-function">                    SDL_Texture * texture,</span></span><br><span class="hljs-params"><span class="hljs-function">                    <span class="hljs-type">const</span> SDL_Rect * srcrect,</span></span><br><span class="hljs-params"><span class="hljs-function">                    <span class="hljs-type">const</span> SDL_FRect * dstrect,</span></span><br><span class="hljs-params"><span class="hljs-function">                    <span class="hljs-type">const</span> <span class="hljs-type">double</span> angle,</span></span><br><span class="hljs-params"><span class="hljs-function">                    <span class="hljs-type">const</span> SDL_FPoint *center,</span></span><br><span class="hljs-params"><span class="hljs-function">                    <span class="hljs-type">const</span> SDL_RendererFlip flip)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 应该复制纹理部分的渲染器。<br>texture: 源纹理<br>srcrect: 整个纹理的<a href="/1999/01/05/SDL/Dictionary/SDL_Rect/" title="SDL_Rect">SDL_Rect</a> 结构或 NULL<br>dstrect: 目标 <a href="/1999/01/05/SDL/Dictionary/SDL_Rect/" title="SDL_Rect">SDL_Rect</a> 结构或整个渲染目标的 NULL；纹理将被拉伸以填充给定的矩形<br>angle: 一个以度为单位的角度，指示将应用于 dstect 的旋转，以顺时针方向旋转它<br>center: 指向一个点的指针，指示 dstrect 将围绕其旋转的点<br>flip: 一个 <a href="/1999/01/10/SDL/Dictionary/SDL_RendererFlip/" title="SDL_RendererFlip">SDL_RendererFlip</a> 值，说明应在纹理上执行哪些翻转操作</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，错误时返回 -1</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderCopyF</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderCopyF/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderCopyF/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderCopyF"><a href="#SDL-RenderCopyF" class="headerlink" title="SDL_RenderCopyF"></a>SDL_RenderCopyF</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderCopyF">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>以子像素精度将纹理的一部分复制到当前渲染目标。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_RenderCopyF</span><span class="hljs-params">(SDL_Renderer * renderer,</span></span><br><span class="hljs-params"><span class="hljs-function">                    SDL_Texture * texture,</span></span><br><span class="hljs-params"><span class="hljs-function">                    <span class="hljs-type">const</span> SDL_Rect * srcrect,</span></span><br><span class="hljs-params"><span class="hljs-function">                    <span class="hljs-type">const</span> SDL_FRect * dstrect)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 应该复制纹理部分的渲染器。<br>texture: 源纹理<br>srcrect: 指向源矩形的指针，或整个纹理的 NULL。<br>dstrect: 指向目标矩形的指针，或者对于整个渲染目标为 NULL。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，错误时返回 -1</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderDrawLineF</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderDrawLineF/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderDrawLineF/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderDrawLineF"><a href="#SDL-RenderDrawLineF" class="headerlink" title="SDL_RenderDrawLineF"></a>SDL_RenderDrawLineF</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderDrawLineF">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>在当前渲染目标上画一条线。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_RenderDrawLineF</span><span class="hljs-params">(SDL_Renderer * renderer,</span></span><br><span class="hljs-params"><span class="hljs-function">                        <span class="hljs-type">float</span> x1, <span class="hljs-type">float</span> y1, <span class="hljs-type">float</span> x2, <span class="hljs-type">float</span> y2)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文<br>x1: 起点的 x 坐标<br>y1: 起点的 y 坐标<br>x2: 终点的 x 坐标<br>y2: 终点的 y 坐标</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderDrawLine</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderDrawLine/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderDrawLine/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderDrawLine"><a href="#SDL-RenderDrawLine" class="headerlink" title="SDL_RenderDrawLine"></a>SDL_RenderDrawLine</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderDrawLine">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>在当前渲染目标上画一条线。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_RenderDrawLine</span><span class="hljs-params">(SDL_Renderer * renderer,</span></span><br><span class="hljs-params"><span class="hljs-function">                       <span class="hljs-type">int</span> x1, <span class="hljs-type">int</span> y1, <span class="hljs-type">int</span> x2, <span class="hljs-type">int</span> y2)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文<br>x1: 起点的 x 坐标<br>y1: 起点的 y 坐标<br>x2: 终点的 x 坐标<br>y2: 终点的 y 坐标</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderDrawLines</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderDrawLines/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderDrawLines/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderDrawLines"><a href="#SDL-RenderDrawLines" class="headerlink" title="SDL_RenderDrawLines"></a>SDL_RenderDrawLines</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderDrawLines">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>在当前渲染目标上绘制一系列连接线。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_RenderDrawLines</span><span class="hljs-params">(SDL_Renderer * renderer,</span></span><br><span class="hljs-params"><span class="hljs-function">                        <span class="hljs-type">const</span> SDL_Point * points,</span></span><br><span class="hljs-params"><span class="hljs-function">                        <span class="hljs-type">int</span> count)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文<br>points: 表示沿线的点的 <a href="/1999/01/10/SDL/Dictionary/SDL_Point/" title="SDL_Point">SDL_Point</a> 结构数组<br>count: 点数，绘制 count-1 条线</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderDrawPoint</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderDrawPoint/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderDrawPoint/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderDrawPoint"><a href="#SDL-RenderDrawPoint" class="headerlink" title="SDL_RenderDrawPoint"></a>SDL_RenderDrawPoint</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderDrawPoint">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>在当前渲染目标上绘制一个点。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_RenderDrawPoint</span><span class="hljs-params">(SDL_Renderer * renderer,</span></span><br><span class="hljs-params"><span class="hljs-function">                        <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文<br>x: 点的 x 坐标<br>y: 点的 y 坐标</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderDrawLinesF</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderDrawLinesF/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderDrawLinesF/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderDrawLinesF"><a href="#SDL-RenderDrawLinesF" class="headerlink" title="SDL_RenderDrawLinesF"></a>SDL_RenderDrawLinesF</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderDrawLinesF">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>在当前渲染目标上绘制一系列连接线。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_RenderDrawLinesF</span><span class="hljs-params">(SDL_Renderer * renderer,</span></span><br><span class="hljs-params"><span class="hljs-function">                         <span class="hljs-type">const</span> SDL_FPoint * points,</span></span><br><span class="hljs-params"><span class="hljs-function">                         <span class="hljs-type">int</span> count)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文<br>points: 表示沿线的点的 <a href="/1999/01/10/SDL/Dictionary/SDL_FPoint/" title="SDL_FPoint">SDL_FPoint</a> 结构数组<br>count: 点数，绘制 count-1 条线</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderDrawPointF</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderDrawPointF/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderDrawPointF/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderDrawPointF"><a href="#SDL-RenderDrawPointF" class="headerlink" title="SDL_RenderDrawPointF"></a>SDL_RenderDrawPointF</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderDrawPointF">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>以亚像素精度在当前渲染目标上绘制一个点</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_RenderDrawPointF</span><span class="hljs-params">(SDL_Renderer * renderer,</span></span><br><span class="hljs-params"><span class="hljs-function">                         <span class="hljs-type">float</span> x, <span class="hljs-type">float</span> y)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文<br>x: 点的 x 坐标<br>y: 点的 y 坐标</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderDrawPoints</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderDrawPoints/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderDrawPoints/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderDrawPoints"><a href="#SDL-RenderDrawPoints" class="headerlink" title="SDL_RenderDrawPoints"></a>SDL_RenderDrawPoints</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderDrawPoints">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>在当前渲染目标上绘制多个点。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_RenderDrawPoints</span><span class="hljs-params">(SDL_Renderer * renderer,</span></span><br><span class="hljs-params"><span class="hljs-function">                         <span class="hljs-type">const</span> SDL_Point * points,</span></span><br><span class="hljs-params"><span class="hljs-function">                         <span class="hljs-type">int</span> count)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文<br>points: 表示要绘制的点的<a href="/1999/01/10/SDL/Dictionary/SDL_Point/" title="SDL_Point">SDL_Point</a>结构数组<br>count: 绘制点数</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderDrawRect</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderDrawRect/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderDrawRect/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderDrawRect"><a href="#SDL-RenderDrawRect" class="headerlink" title="SDL_RenderDrawRect"></a>SDL_RenderDrawRect</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderDrawRect">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>在当前渲染目标上绘制一个矩形。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_RenderDrawRect</span><span class="hljs-params">(SDL_Renderer * renderer,</span></span><br><span class="hljs-params"><span class="hljs-function">                       <span class="hljs-type">const</span> SDL_Rect * rect)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文<br>rect: 一个<a href="/1999/01/05/SDL/Dictionary/SDL_Rect/" title="SDL_Rect">SDL_Rect</a>结构，表示要绘制的矩形，或 NULL 来勾画整个渲染目标</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderDrawPointsF</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderDrawPointsF/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderDrawPointsF/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderDrawPointsF"><a href="#SDL-RenderDrawPointsF" class="headerlink" title="SDL_RenderDrawPointsF"></a>SDL_RenderDrawPointsF</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderDrawPointsF">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>以亚像素精度在当前渲染目标上绘制多个点。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_RenderDrawPointsF</span><span class="hljs-params">(SDL_Renderer * renderer,</span></span><br><span class="hljs-params"><span class="hljs-function">                          <span class="hljs-type">const</span> SDL_FPoint * points,</span></span><br><span class="hljs-params"><span class="hljs-function">                          <span class="hljs-type">int</span> count)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文<br>points: 表示要绘制的点的<a href="/1999/01/10/SDL/Dictionary/SDL_Point/" title="SDL_Point">SDL_Point</a>结构数组<br>count: 绘制点数</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderDrawRectF</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderDrawRectF/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderDrawRectF/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderDrawRectF"><a href="#SDL-RenderDrawRectF" class="headerlink" title="SDL_RenderDrawRectF"></a>SDL_RenderDrawRectF</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderDrawRectF">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>以亚像素精度在当前渲染目标上绘制一个矩形。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_RenderDrawRectF</span><span class="hljs-params">(SDL_Renderer * renderer,</span></span><br><span class="hljs-params"><span class="hljs-function">                        <span class="hljs-type">const</span> SDL_FRect * rect)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染器应该绘制一个矩形。<br>rect: 指向目标矩形<a href="/1999/01/10/SDL/Dictionary/SDL_FRect/" title="SDL_FRect">SDL_FRect</a>的指针，或 NULL 来勾画整个渲染目标。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderDrawRects</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderDrawRects/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderDrawRects/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderDrawRects"><a href="#SDL-RenderDrawRects" class="headerlink" title="SDL_RenderDrawRects"></a>SDL_RenderDrawRects</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderDrawRects">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>在当前渲染目标上绘制一些矩形。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_RenderDrawRects</span><span class="hljs-params">(SDL_Renderer * renderer,</span></span><br><span class="hljs-params"><span class="hljs-function">                        <span class="hljs-type">const</span> SDL_Rect * rects,</span></span><br><span class="hljs-params"><span class="hljs-function">                        <span class="hljs-type">int</span> count)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文<br>rect: 表示要绘制的矩形的<a href="/1999/01/05/SDL/Dictionary/SDL_Rect/" title="SDL_Rect">SDL_Rect</a>结构数组<br>count: 矩形的数量</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderDrawRectsF</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderDrawRectsF/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderDrawRectsF/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderDrawRectsF"><a href="#SDL-RenderDrawRectsF" class="headerlink" title="SDL_RenderDrawRectsF"></a>SDL_RenderDrawRectsF</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderDrawRectsF">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>以亚像素精度在当前渲染目标上绘制一定数量的矩形。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_RenderDrawRectsF</span><span class="hljs-params">(SDL_Renderer * renderer,</span></span><br><span class="hljs-params"><span class="hljs-function">                         <span class="hljs-type">const</span> SDL_FRect * rects,</span></span><br><span class="hljs-params"><span class="hljs-function">                         <span class="hljs-type">int</span> count)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文<br>rect: 表示要绘制的矩形的<a href="/1999/01/10/SDL/Dictionary/SDL_FRect/" title="SDL_FRect">SDL_FRect</a>结构数组<br>count: 矩形的数量</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderFillRectF</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderFillRectF/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderFillRectF/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderFillRectF"><a href="#SDL-RenderFillRectF" class="headerlink" title="SDL_RenderFillRectF"></a>SDL_RenderFillRectF</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderFillRectF">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>使用绘图颜色填充当前渲染目标上的矩形。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_RenderFillRect</span><span class="hljs-params">(SDL_Renderer * renderer,</span></span><br><span class="hljs-params"><span class="hljs-function">                       <span class="hljs-type">const</span> SDL_FRect * rect)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文<br>rect: 表示要绘制的矩形的<a href="/1999/01/10/SDL/Dictionary/SDL_FRect/" title="SDL_FRect">SDL_FRect</a>结构数组</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderFillRect</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderFillRect/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderFillRect/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderFillRect"><a href="#SDL-RenderFillRect" class="headerlink" title="SDL_RenderFillRect"></a>SDL_RenderFillRect</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderFillRect">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>使用绘图颜色填充当前渲染目标上的矩形。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_RenderFillRect</span><span class="hljs-params">(SDL_Renderer * renderer,</span></span><br><span class="hljs-params"><span class="hljs-function">                       <span class="hljs-type">const</span> SDL_Rect * rect)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文<br>rect: 表示要绘制的矩形的<a href="/1999/01/05/SDL/Dictionary/SDL_Rect/" title="SDL_Rect">SDL_Rect</a>结构数组</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderFillRectsF</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderFillRectsF/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderFillRectsF/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderFillRectsF"><a href="#SDL-RenderFillRectsF" class="headerlink" title="SDL_RenderFillRectsF"></a>SDL_RenderFillRectsF</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderFillRectsF">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>使用亚像素精度的绘图颜色填充当前渲染目标上的一定数量的矩形。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_RenderFillRectsF</span><span class="hljs-params">(SDL_Renderer * renderer,</span></span><br><span class="hljs-params"><span class="hljs-function">                         <span class="hljs-type">const</span> SDL_FRect * rects,</span></span><br><span class="hljs-params"><span class="hljs-function">                         <span class="hljs-type">int</span> count)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文<br>rects: 表示要绘制的矩形的<a href="/1999/01/10/SDL/Dictionary/SDL_FRect/" title="SDL_FRect">SDL_FRect</a>结构数组<br>count: 矩形的数量</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderFillRects</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderFillRects/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderFillRects/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderFillRects"><a href="#SDL-RenderFillRects" class="headerlink" title="SDL_RenderFillRects"></a>SDL_RenderFillRects</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderFillRects">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>使用绘图颜色填充当前渲染目标上的一定数量的矩形。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_RenderFillRects</span><span class="hljs-params">(SDL_Renderer * renderer,</span></span><br><span class="hljs-params"><span class="hljs-function">                        <span class="hljs-type">const</span> SDL_Rect * rects,</span></span><br><span class="hljs-params"><span class="hljs-function">                        <span class="hljs-type">int</span> count)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文<br>rects: 表示要绘制的矩形的<a href="/1999/01/05/SDL/Dictionary/SDL_Rect/" title="SDL_Rect">SDL_Rect</a>结构数组<br>count: 矩形的数量</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderFlush</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderFlush/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderFlush/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderFlush"><a href="#SDL-RenderFlush" class="headerlink" title="SDL_RenderFlush"></a>SDL_RenderFlush</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderFlush">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>强制渲染上下文将任何挂起的命令刷新到底层渲染 API。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_RenderFlush</span><span class="hljs-params">(SDL_Renderer * renderer)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderGeometry</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderGeometry/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderGeometry/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderGeometry"><a href="#SDL-RenderGeometry" class="headerlink" title="SDL_RenderGeometry"></a>SDL_RenderGeometry</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderGeometry">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>可以渲染具有任意数量顶点的多边形。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_RenderGeometry</span><span class="hljs-params">(SDL_Renderer *renderer,</span></span><br><span class="hljs-params"><span class="hljs-function">                       SDL_Texture *texture,</span></span><br><span class="hljs-params"><span class="hljs-function">                       <span class="hljs-type">const</span> SDL_Vertex *vertices, <span class="hljs-type">int</span> num_vertices,</span></span><br><span class="hljs-params"><span class="hljs-function">                       <span class="hljs-type">const</span> <span class="hljs-type">int</span> *indices, <span class="hljs-type">int</span> num_indices)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文<br>texture： 要使用的 SDL 纹理<br>vertices： 顶点<a href="/1999/01/10/SDL/Dictionary/SDL_Vertex/" title="SDL_Vertex">SDL_Vertex</a><br>num_vertices：顶点数<br>indices： （可选）“顶点”数组中的整数索引数组，如果为 NULL，则所有顶点将按顺序渲染。<br>num_indices： 索引数量</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功则返回 0，如果不支持该操作则返回 -1</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderGeometryRaw</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderGeometryRaw/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderGeometryRaw/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderGeometryRaw"><a href="#SDL-RenderGeometryRaw" class="headerlink" title="SDL_RenderGeometryRaw"></a>SDL_RenderGeometryRaw</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderGeometryRaw">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>可以渲染具有任意数量顶点的多边形。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_RenderGeometryRaw</span><span class="hljs-params">(SDL_Renderer *renderer,</span></span><br><span class="hljs-params"><span class="hljs-function">                       SDL_Texture *texture,</span></span><br><span class="hljs-params"><span class="hljs-function">                       <span class="hljs-type">const</span> <span class="hljs-type">float</span> *xy, <span class="hljs-type">int</span> xy_stride,</span></span><br><span class="hljs-params"><span class="hljs-function">                       <span class="hljs-type">const</span> SDL_Color *color, <span class="hljs-type">int</span> color_stride,</span></span><br><span class="hljs-params"><span class="hljs-function">                       <span class="hljs-type">const</span> <span class="hljs-type">float</span> *uv, <span class="hljs-type">int</span> uv_stride,</span></span><br><span class="hljs-params"><span class="hljs-function">                       <span class="hljs-type">int</span> num_vertices,</span></span><br><span class="hljs-params"><span class="hljs-function">                       <span class="hljs-type">const</span> <span class="hljs-type">void</span> *indices, <span class="hljs-type">int</span> num_indices, <span class="hljs-type">int</span> size_indices)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文<br>texture： 要使用的 SDL 纹理<br>xy：顶点位置<br>xy_stride：从一个元素移动到下一个元素的字节大小<br>color：顶点颜色（如 <a href="/1999/01/05/SDL/Dictionary/SDL_Color/" title="SDL_Color">SDL_Color</a>）<br>color_stride：从一个元素移动到下一个元素的字节大小<br>uv：顶点归一化纹理坐标<br>uv_stride：从一个元素移动到下一个元素的字节大小<br>num_vertices：顶点数<br>indices：（可选）“顶点”数组的索引数组，如果为 NULL，则所有顶点将按顺序渲染。<br>num_indices：索引数量<br>size_indices：索引大小：1 (byte), 2 (short), 4 (int)</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功则返回 0，如果不支持该操作则返回 -1</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderGetClipRect</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderGetClipRect/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderGetClipRect/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderGetClipRect"><a href="#SDL-RenderGetClipRect" class="headerlink" title="SDL_RenderGetClipRect"></a>SDL_RenderGetClipRect</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderGetClipRect">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>获取当前目标的剪辑矩形。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SDL_RenderGetClipRect</span><span class="hljs-params">(SDL_Renderer * renderer,</span></span><br><span class="hljs-params"><span class="hljs-function">                           SDL_Rect * rect)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 应从中查询剪辑矩形的渲染上下文<br>rect：一个 <a href="/1999/01/05/SDL/Dictionary/SDL_Rect/" title="SDL_Rect">SDL_Rect</a> 结构，填充当前剪切区域或一个空矩形（如果禁用剪切）</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderGetD3D12Device</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderGetD3D12Device/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderGetD3D12Device/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderGetD3D12Device"><a href="#SDL-RenderGetD3D12Device" class="headerlink" title="SDL_RenderGetD3D12Device"></a>SDL_RenderGetD3D12Device</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderGetD3D12Device">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>获取与渲染器关联的 D3D12 设备。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">ID3D12Device* <span class="hljs-title">SDL_RenderGetD3D12Device</span><span class="hljs-params">(SDL_Renderer* renderer)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 从中获取关联 D3D12 设备的渲染器</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回与给定渲染器关联的 D3D12 设备，如果不是 D3D12 渲染器，则返回 NULL。调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderGetD3D11Device</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderGetD3D11Device/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderGetD3D11Device/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderGetD3D11Device"><a href="#SDL-RenderGetD3D11Device" class="headerlink" title="SDL_RenderGetD3D11Device"></a>SDL_RenderGetD3D11Device</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderGetD3D11Device">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>获取与渲染器关联的 D3D11 设备。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">ID3D11Device* <span class="hljs-title">SDL_RenderGetD3D11Device</span><span class="hljs-params">(SDL_Renderer * renderer)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 从中获取关联 D3D11 设备的渲染器</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回与给定渲染器关联的 D3D11 设备，如果不是 D3D11 渲染器，则返回 NULL</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderGetD3D9Device</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderGetD3D9Device/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderGetD3D9Device/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderGetD3D9Device"><a href="#SDL-RenderGetD3D9Device" class="headerlink" title="SDL_RenderGetD3D9Device"></a>SDL_RenderGetD3D9Device</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderGetD3D9Device">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>获取与渲染器关联的 D3D9  设备。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">IDirect3DDevice9* <span class="hljs-title">SDL_RenderGetD3D9Device</span><span class="hljs-params">(SDL_Renderer * renderer)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 从中获取关联 D3D9  设备的渲染器</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回与给定渲染器关联的 D3D9  设备，如果不是 D3D9  渲染器，则返回 NULL。调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderGetLogicalSize</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderGetLogicalSize/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderGetLogicalSize/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderGetLogicalSize"><a href="#SDL-RenderGetLogicalSize" class="headerlink" title="SDL_RenderGetLogicalSize"></a>SDL_RenderGetLogicalSize</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderGetLogicalSize">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>获取与设备无关的渲染分辨率。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SDL_RenderGetLogicalSize</span><span class="hljs-params">(SDL_Renderer * renderer, <span class="hljs-type">int</span> *w, <span class="hljs-type">int</span> *h)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文<br>w: 宽度<br>h: 高度</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderGetIntegerScale</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderGetIntegerScale/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderGetIntegerScale/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderGetIntegerScale"><a href="#SDL-RenderGetIntegerScale" class="headerlink" title="SDL_RenderGetIntegerScale"></a>SDL_RenderGetIntegerScale</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderGetIntegerScale">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>获取是否强制使用整数比例进行与分辨率无关的渲染。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_bool <span class="hljs-title">SDL_RenderGetIntegerScale</span><span class="hljs-params">(SDL_Renderer * renderer)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 查询整数缩放的渲染器</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>果强制使用整数缩放，则返回 SDL_TRUE；如果未强制使用整数缩放且失败，则返回 SDL_FALSE；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderGetMetalCommandEncoder</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderGetMetalCommandEncoder/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderGetMetalCommandEncoder/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderGetMetalCommandEncoder"><a href="#SDL-RenderGetMetalCommandEncoder" class="headerlink" title="SDL_RenderGetMetalCommandEncoder"></a>SDL_RenderGetMetalCommandEncoder</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderGetMetalCommandEncoder">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>获取当前帧的 Metal 命令编码器</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-title">SDL_RenderGetMetalCommandEncoder</span><span class="hljs-params">(SDL_Renderer * renderer)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 查询的渲染器</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 id<MTLRenderCommandEncoder> ，如果渲染器不是 Metal 渲染器或出现错误，则返回 NULL。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderGetMetalLayer</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderGetMetalLayer/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderGetMetalLayer/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderGetMetalLayer"><a href="#SDL-RenderGetMetalLayer" class="headerlink" title="SDL_RenderGetMetalLayer"></a>SDL_RenderGetMetalLayer</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderGetMetalLayer">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>获取与给定 Metal 渲染器关联的 CAMetalLayer。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-title">SDL_RenderGetMetalLayer</span><span class="hljs-params">(SDL_Renderer * renderer)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 查询的渲染器</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 CAMetalLayer * ，如果渲染器不是 Metal 渲染器则返回 NULL</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderGetScale</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderGetScale/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderGetScale/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderGetScale"><a href="#SDL-RenderGetScale" class="headerlink" title="SDL_RenderGetScale"></a>SDL_RenderGetScale</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderGetScale">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>获取当前目标的绘图比例。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SDL_RenderGetScale</span><span class="hljs-params">(SDL_Renderer * renderer,</span></span><br><span class="hljs-params"><span class="hljs-function">                       <span class="hljs-type">float</span> *scaleX, <span class="hljs-type">float</span> *scaleY)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 查询绘图比例的渲染器<br>scaleX：指向水平缩放因子的指针<br>scaleY：指向垂直缩放因子填充的指针</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderGetViewport</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderGetViewport/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderGetViewport/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderGetViewport"><a href="#SDL-RenderGetViewport" class="headerlink" title="SDL_RenderGetViewport"></a>SDL_RenderGetViewport</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderGetViewport">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>获取当前目标的绘图区域。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SDL_RenderGetViewport</span><span class="hljs-params">(SDL_Renderer * renderer,</span></span><br><span class="hljs-params"><span class="hljs-function">                           SDL_Rect * rect)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文<br>rect：当前绘图区域的<a href="/1999/01/05/SDL/Dictionary/SDL_Rect/" title="SDL_Rect">SDL_Rect</a>结构</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderGetWindow</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderGetWindow/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderGetWindow/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderGetWindow"><a href="#SDL-RenderGetWindow" class="headerlink" title="SDL_RenderGetWindow"></a>SDL_RenderGetWindow</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderGetWindow">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>获取与渲染器关联的窗口。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Window * <span class="hljs-title">SDL_RenderGetWindow</span><span class="hljs-params">(SDL_Renderer *renderer)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 查询的渲染器</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回窗口，失败时返回 NULL；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderIsClipEnabled</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderIsClipEnabled/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderIsClipEnabled/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderIsClipEnabled"><a href="#SDL-RenderIsClipEnabled" class="headerlink" title="SDL_RenderIsClipEnabled"></a>SDL_RenderIsClipEnabled</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderIsClipEnabled">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>获取给定渲染器上是否启用了裁剪。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_bool <span class="hljs-title">SDL_RenderIsClipEnabled</span><span class="hljs-params">(SDL_Renderer * renderer)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 查询剪辑状态的渲染器</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果启用了裁剪，则返回 SDL_TRUE；如果未启用，则返回 SDL_FALSE；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderLogicalToWindow</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderLogicalToWindow/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderLogicalToWindow/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderLogicalToWindow"><a href="#SDL-RenderLogicalToWindow" class="headerlink" title="SDL_RenderLogicalToWindow"></a>SDL_RenderLogicalToWindow</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderLogicalToWindow">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>当给定渲染器中点的逻辑坐标时，获取窗口中点的真实坐标。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SDL_RenderLogicalToWindow</span><span class="hljs-params">(SDL_Renderer * renderer, </span></span><br><span class="hljs-params"><span class="hljs-function">                                    <span class="hljs-type">float</span> logicalX, <span class="hljs-type">float</span> logicalY,</span></span><br><span class="hljs-params"><span class="hljs-function">                                    <span class="hljs-type">int</span> *windowX, <span class="hljs-type">int</span> *windowY)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 窗口坐标的渲染器<br>logicalX：逻辑 x 坐标<br>logicalY：逻辑 y 坐标<br>windowX：窗口中真实的X坐标的指针<br>windowY：窗口中真实的Y坐标的指针</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderPresent</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderPresent/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderPresent/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderPresent"><a href="#SDL-RenderPresent" class="headerlink" title="SDL_RenderPresent"></a>SDL_RenderPresent</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderPresent">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>使用自上次调用以来执行的任何渲染更新屏幕。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SDL_RenderPresent</span><span class="hljs-params">(SDL_Renderer * renderer)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderReadPixels</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderReadPixels/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderReadPixels/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderReadPixels"><a href="#SDL-RenderReadPixels" class="headerlink" title="SDL_RenderReadPixels"></a>SDL_RenderReadPixels</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderReadPixels">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>将像素从当前渲染目标读取到像素数组。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_RenderReadPixels</span><span class="hljs-params">(SDL_Renderer * renderer,</span></span><br><span class="hljs-params"><span class="hljs-function">                         <span class="hljs-type">const</span> SDL_Rect * rect,</span></span><br><span class="hljs-params"><span class="hljs-function">                         Uint32 format,</span></span><br><span class="hljs-params"><span class="hljs-function">                         <span class="hljs-type">void</span> *pixels, <span class="hljs-type">int</span> pitch)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文<br>rect：表示要读取的区域的<a href="/1999/01/05/SDL/Dictionary/SDL_Rect/" title="SDL_Rect">SDL_Rect</a>结构，或者对于整个渲染目标为 NULL<br>format：所需像素数据格式的<a href="/1999/01/10/SDL/Dictionary/SDL_PixelFormatEnum/" title="SDL_PixelFormatEnum">SDL_PixelFormatEnum</a>值，或 0 以使用渲染目标的格式<br>pixels：指向要复制到的像素数据的指针<br>pitch：像素间距参数</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderSetClipRect</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderSetClipRect/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderSetClipRect/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderSetClipRect"><a href="#SDL-RenderSetClipRect" class="headerlink" title="SDL_RenderSetClipRect"></a>SDL_RenderSetClipRect</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderSetClipRect">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>设置用于在指定目标上渲染的剪辑矩形。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_RenderSetClipRect</span><span class="hljs-params">(SDL_Renderer * renderer,</span></span><br><span class="hljs-params"><span class="hljs-function">                          <span class="hljs-type">const</span> SDL_Rect * rect)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 应设置剪辑矩形的渲染上下文<br>rect：相对于视口的剪辑区域的 SDL_Rect 结构，或 NULL 以禁用剪辑</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderSetIntegerScale</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderSetIntegerScale/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderSetIntegerScale/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderSetIntegerScale"><a href="#SDL-RenderSetIntegerScale" class="headerlink" title="SDL_RenderSetIntegerScale"></a>SDL_RenderSetIntegerScale</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderSetIntegerScale">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>设置是否强制使用整数比例进行与分辨率无关的渲染。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_RenderSetIntegerScale</span><span class="hljs-params">(SDL_Renderer * renderer,</span></span><br><span class="hljs-params"><span class="hljs-function">                              SDL_bool enable)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 应设置整数缩放的渲染器<br>enable： 启用或禁用渲染的整数缩放</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderSetLogicalSize</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderSetLogicalSize/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderSetLogicalSize/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderSetLogicalSize"><a href="#SDL-RenderSetLogicalSize" class="headerlink" title="SDL_RenderSetLogicalSize"></a>SDL_RenderSetLogicalSize</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderSetLogicalSize">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>设置与设备无关的渲染分辨率。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_RenderSetLogicalSize</span><span class="hljs-params">(SDL_Renderer * renderer, <span class="hljs-type">int</span> w, <span class="hljs-type">int</span> h)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 应设置分辨率的渲染器<br>w: 逻辑分辨率的宽度<br>h: 逻辑分辨率的高度</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderSetScale</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderSetScale/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderSetScale/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderSetScale"><a href="#SDL-RenderSetScale" class="headerlink" title="SDL_RenderSetScale"></a>SDL_RenderSetScale</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderSetScale">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>设置当前目标上渲染的绘图比例。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_RenderSetScale</span><span class="hljs-params">(SDL_Renderer * renderer,</span></span><br><span class="hljs-params"><span class="hljs-function">                       <span class="hljs-type">float</span> scaleX, <span class="hljs-type">float</span> scaleY)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文<br>scaleX: 水平缩放因子<br>scaleY: 垂直缩放因子</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderSetVSync</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderSetVSync/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderSetVSync/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderSetVSync"><a href="#SDL-RenderSetVSync" class="headerlink" title="SDL_RenderSetVSync"></a>SDL_RenderSetVSync</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderSetVSync">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>切换给定渲染器的垂直同步。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_RenderSetVSync</span><span class="hljs-params">(SDL_Renderer* renderer, <span class="hljs-type">int</span> vsync)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 要切换的渲染器<br>vsync: 1 为开，0 为关。所有其他值均保留</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0 int，失败时返回非零</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderTargetSupported</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderTargetSupported/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderTargetSupported/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderTargetSupported"><a href="#SDL-RenderTargetSupported" class="headerlink" title="SDL_RenderTargetSupported"></a>SDL_RenderTargetSupported</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderTargetSupported">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>确定渲染器是否支持使用渲染目标。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_bool <span class="hljs-title">SDL_RenderTargetSupported</span><span class="hljs-params">(SDL_Renderer *renderer)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 将要检查的渲染器</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果支持则返回 SDL_TRUE，如果不支持则返回 SDL_FALSE。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderSetViewport</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderSetViewport/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderSetViewport/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderSetViewport"><a href="#SDL-RenderSetViewport" class="headerlink" title="SDL_RenderSetViewport"></a>SDL_RenderSetViewport</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderSetViewport">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>设置在当前目标上渲染的绘图区域。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_RenderSetViewport</span><span class="hljs-params">(SDL_Renderer * renderer,</span></span><br><span class="hljs-params"><span class="hljs-function">                          <span class="hljs-type">const</span> SDL_Rect * rect)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文<br>rect: 表示绘图区域的<a href="/1999/01/05/SDL/Dictionary/SDL_Rect/" title="SDL_Rect">SDL_Rect</a>结构，或 NULL 将视口设置为整个目标</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RenderWindowToLogical</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RenderWindowToLogical/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RenderWindowToLogical/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RenderWindowToLogical"><a href="#SDL-RenderWindowToLogical" class="headerlink" title="SDL_RenderWindowToLogical"></a>SDL_RenderWindowToLogical</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RenderWindowToLogical">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>当给定窗口中点的实际坐标时，获取渲染器中点的逻辑坐标。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SDL_RenderWindowToLogical</span><span class="hljs-params">(SDL_Renderer * renderer, </span></span><br><span class="hljs-params"><span class="hljs-function">                                    <span class="hljs-type">int</span> windowX, <span class="hljs-type">int</span> windowY, </span></span><br><span class="hljs-params"><span class="hljs-function">                                    <span class="hljs-type">float</span> *logicalX, <span class="hljs-type">float</span> *logicalY)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 计算逻辑坐标的渲染器<br>windowX:窗口中真实的X坐标<br>windowY:窗口中真实的Y坐标<br>logicalX:逻辑 x 坐标的指针<br>logicalY:逻辑 y 坐标的指针</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果支持则返回 SDL_TRUE，如果不支持则返回 SDL_FALSE。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_Renderer</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_Renderer/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_Renderer/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-Renderer"><a href="#SDL-Renderer" class="headerlink" title="SDL_Renderer"></a>SDL_Renderer</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_Renderer">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>包含渲染状态的结构。</p><h3 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h3><a href="/1999/01/10/SDL/Dictionary/SDL_CreateRenderer/" title="SDL_CreateRenderer">SDL_CreateRenderer</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_CreateSoftwareRenderer/" title="SDL_CreateSoftwareRenderer">SDL_CreateSoftwareRenderer</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_CreateTexture/" title="SDL_CreateTexture">SDL_CreateTexture</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_CreateTextureFromSurface/" title="SDL_CreateTextureFromSurface">SDL_CreateTextureFromSurface</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_CreateWindowAndRenderer/" title="SDL_CreateWindowAndRenderer">SDL_CreateWindowAndRenderer</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_DestroyRenderer/" title="SDL_DestroyRenderer">SDL_DestroyRenderer</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_GetRenderDrawBlendMode/" title="SDL_GetRenderDrawBlendMode">SDL_GetRenderDrawBlendMode</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_GetRenderDrawColor/" title="SDL_GetRenderDrawColor">SDL_GetRenderDrawColor</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_GetRendererInfo/" title="SDL_GetRendererInfo">SDL_GetRendererInfo</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_GetRendererOutputSize/" title="SDL_GetRendererOutputSize">SDL_GetRendererOutputSize</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_GetRenderTarget/" title="SDL_GetRenderTarget">SDL_GetRenderTarget</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderClear/" title="SDL_RenderClear">SDL_RenderClear</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderCopy/" title="SDL_RenderCopy">SDL_RenderCopy</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderCopyEx/" title="SDL_RenderCopyEx">SDL_RenderCopyEx</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderCopyExF/" title="SDL_RenderCopyExF">SDL_RenderCopyExF</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderCopyF/" title="SDL_RenderCopyF">SDL_RenderCopyF</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderDrawLine/" title="SDL_RenderDrawLine">SDL_RenderDrawLine</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderDrawLineF/" title="SDL_RenderDrawLineF">SDL_RenderDrawLineF</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderDrawLines/" title="SDL_RenderDrawLines">SDL_RenderDrawLines</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderDrawLinesF/" title="SDL_RenderDrawLinesF">SDL_RenderDrawLinesF</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderDrawPoint/" title="SDL_RenderDrawPoint">SDL_RenderDrawPoint</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderDrawPointF/" title="SDL_RenderDrawPointF">SDL_RenderDrawPointF</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderDrawPoints/" title="SDL_RenderDrawPoints">SDL_RenderDrawPoints</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderDrawPointsF/" title="SDL_RenderDrawPointsF">SDL_RenderDrawPointsF</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderDrawRect/" title="SDL_RenderDrawRect">SDL_RenderDrawRect</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderDrawRectF/" title="SDL_RenderDrawRectF">SDL_RenderDrawRectF</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderDrawRects/" title="SDL_RenderDrawRects">SDL_RenderDrawRects</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderDrawRectsF/" title="SDL_RenderDrawRectsF">SDL_RenderDrawRectsF</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderFillRect/" title="SDL_RenderFillRect">SDL_RenderFillRect</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderFillRectF/" title="SDL_RenderFillRectF">SDL_RenderFillRectF</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderFillRects/" title="SDL_RenderFillRects">SDL_RenderFillRects</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderFillRectsF/" title="SDL_RenderFillRectsF">SDL_RenderFillRectsF</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderFlush/" title="SDL_RenderFlush">SDL_RenderFlush</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderGeometry/" title="SDL_RenderGeometry">SDL_RenderGeometry</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderGeometryRaw/" title="SDL_RenderGeometryRaw">SDL_RenderGeometryRaw</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderGetClipRect/" title="SDL_RenderGetClipRect">SDL_RenderGetClipRect</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderGetD3D11Device/" title="SDL_RenderGetD3D11Device">SDL_RenderGetD3D11Device</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderGetD3D12Device/" title="SDL_RenderGetD3D12Device">SDL_RenderGetD3D12Device</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderGetD3D9Device/" title="SDL_RenderGetD3D9Device">SDL_RenderGetD3D9Device</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderGetIntegerScale/" title="SDL_RenderGetIntegerScale">SDL_RenderGetIntegerScale</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderGetLogicalSize/" title="SDL_RenderGetLogicalSize">SDL_RenderGetLogicalSize</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderGetMetalCommandEncoder/" title="SDL_RenderGetMetalCommandEncoder">SDL_RenderGetMetalCommandEncoder</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderGetMetalLayer/" title="SDL_RenderGetMetalLayer">SDL_RenderGetMetalLayer</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderGetScale/" title="SDL_RenderGetScale">SDL_RenderGetScale</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderGetViewport/" title="SDL_RenderGetViewport">SDL_RenderGetViewport</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderGetWindow/" title="SDL_RenderGetWindow">SDL_RenderGetWindow</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderIsClipEnabled/" title="SDL_RenderIsClipEnabled">SDL_RenderIsClipEnabled</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderLogicalToWindow/" title="SDL_RenderLogicalToWindow">SDL_RenderLogicalToWindow</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderPresent/" title="SDL_RenderPresent">SDL_RenderPresent</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderReadPixels/" title="SDL_RenderReadPixels">SDL_RenderReadPixels</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderSetClipRect/" title="SDL_RenderSetClipRect">SDL_RenderSetClipRect</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderSetIntegerScale/" title="SDL_RenderSetIntegerScale">SDL_RenderSetIntegerScale</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderSetLogicalSize/" title="SDL_RenderSetLogicalSize">SDL_RenderSetLogicalSize</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderSetScale/" title="SDL_RenderSetScale">SDL_RenderSetScale</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderSetViewport/" title="SDL_RenderSetViewport">SDL_RenderSetViewport</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderSetVSync/" title="SDL_RenderSetVSync">SDL_RenderSetVSync</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderTargetSupported/" title="SDL_RenderTargetSupported">SDL_RenderTargetSupported</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderWindowToLogical/" title="SDL_RenderWindowToLogical">SDL_RenderWindowToLogical</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_SetRenderDrawBlendMode/" title="SDL_SetRenderDrawBlendMode">SDL_SetRenderDrawBlendMode</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_SetRenderDrawColor/" title="SDL_SetRenderDrawColor">SDL_SetRenderDrawColor</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_SetRenderTarget/" title="SDL_SetRenderTarget">SDL_SetRenderTarget</a><br />]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RendererFlags</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RendererFlags/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RendererFlags/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RendererFlags"><a href="#SDL-RendererFlags" class="headerlink" title="SDL_RendererFlags"></a>SDL_RendererFlags</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RendererFlags">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>创建渲染上下文时使用的标志枚举。</p><h3 id="枚举值"><a href="#枚举值" class="headerlink" title="枚举值"></a>枚举值</h3><p>SDL_RENDERER_SOFTWARE： 软件渲染<br>SDL_RENDERER_ACCELERATED： 硬件加速渲染<br>SDL_RENDERER_PRESENTVSYNC：与显示器同步<br>SDL_RENDERER_TARGETTEXTURE：渲染到材质</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RendererFlip</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RendererFlip/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RendererFlip/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RendererFlip"><a href="#SDL-RendererFlip" class="headerlink" title="SDL_RendererFlip"></a>SDL_RendererFlip</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RendererFlip">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>可在 SDL_RenderCopyEx 的翻转参数中使用的标志枚举。</p><h3 id="值"><a href="#值" class="headerlink" title="值"></a>值</h3><p>SDL_FLIP_NONE： 不要翻转<br>SDL_FLIP_HORIZONTAL： 水平翻转<br>SDL_FLIP_VERTICAL： 垂直翻转</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RendererInfo</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_RendererInfo/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_RendererInfo/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RendererInfo"><a href="#SDL-RendererInfo" class="headerlink" title="SDL_RendererInfo"></a>SDL_RendererInfo</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RendererInfo">Click to jump</a></p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><p>const char* name: 渲染器的名称<br>Uint32 flags: 支持的渲染器标志的掩码<br>Uint32 num_texture_formats: 可用纹理格式的数量<br>Uint32[16] texture_formats: 可用的纹理格式<br>int max_texture_width: 最大纹理宽度<br>int max_texture_height: 最大纹理高度</p><h3 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h3><p>带填充</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_SetRenderDrawBlendMode</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_SetRenderDrawBlendMode/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_SetRenderDrawBlendMode/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-SetRenderDrawBlendMode"><a href="#SDL-SetRenderDrawBlendMode" class="headerlink" title="SDL_SetRenderDrawBlendMode"></a>SDL_SetRenderDrawBlendMode</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_SetRenderDrawBlendMode">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>设置用于绘图操作的混合模式（填充和线条）。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_SetRenderDrawBlendMode</span><span class="hljs-params">(SDL_Renderer * renderer,</span></span><br><span class="hljs-params"><span class="hljs-function">                               SDL_BlendMode blendMode)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文<br>blendMode: 用于混合的<a href="/1999/01/10/SDL/Dictionary/SDL_BlendMode/" title="SDL_BlendMode">SDL_BlendMode</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_SetRenderDrawColor</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_SetRenderDrawColor/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_SetRenderDrawColor/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-SetRenderDrawColor"><a href="#SDL-SetRenderDrawColor" class="headerlink" title="SDL_SetRenderDrawColor"></a>SDL_SetRenderDrawColor</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_SetRenderDrawColor">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>设置用于绘图操作的颜色（矩形、线条和清除）。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_SetRenderDrawColor</span><span class="hljs-params">(SDL_Renderer * renderer,</span></span><br><span class="hljs-params"><span class="hljs-function">                   Uint8 r, Uint8 g, Uint8 b,</span></span><br><span class="hljs-params"><span class="hljs-function">                   Uint8 a)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文<br>r:用于在渲染目标上绘制的红色值<br>g:用于在渲染目标上绘制的绿色值<br>b:用于在渲染目标上绘制的蓝色值<br>a:用于在渲染目标上绘制的 alpha 值</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_SetRenderTarget</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_SetRenderTarget/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_SetRenderTarget/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-SetRenderTarget"><a href="#SDL-SetRenderTarget" class="headerlink" title="SDL_SetRenderTarget"></a>SDL_SetRenderTarget</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_SetRenderTarget">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>将纹理设置为当前渲染目标。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_SetRenderTarget</span><span class="hljs-params">(SDL_Renderer *renderer,</span></span><br><span class="hljs-params"><span class="hljs-function">                        SDL_Texture *texture)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>renderer: 渲染上下文<br>texture： 目标纹理，必须使用 SDL_TEXTUREACCESS_TARGET 标志创建，或者使用 NULL 来渲染到窗口而不是纹理。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_Renderer</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_Texture/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_Texture/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-Renderer"><a href="#SDL-Renderer" class="headerlink" title="SDL_Renderer"></a>SDL_Renderer</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_Renderer">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>包含有效的、特定于驱动程序的像素数据表示的结构。</p><p>SDL_Texture on the other hand, is used in a hardware rendering, textures are stored in VRAM and you don’t have access to it directly as with SDL_Surface. The rendering operations are accelerated by GPU, using, internally, either OpenGL or DirectX (available only on Windows) API, which in turn are using your video hardware, hence hardware rendering name.</p><h3 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h3><a href="/1999/01/10/SDL/Dictionary/SDL_CreateTexture/" title="SDL_CreateTexture">SDL_CreateTexture</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_CreateTextureFromSurface/" title="SDL_CreateTextureFromSurface">SDL_CreateTextureFromSurface</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_DestroyTexture/" title="SDL_DestroyTexture">SDL_DestroyTexture</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_GetTextureAlphaMode/" title="SDL_GetTextureAlphaMod">SDL_GetTextureAlphaMode</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_GetTextureBlendMode/" title="SDL_GetTextureBlendMode">SDL_GetTextureBlendMode</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_GetTextureColorMod/" title="SDL_GetTextureColorMod">SDL_GetTextureColorMod</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_LockTexture/" title="SDL_LockTexture">SDL_LockTexture</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_QueryTexture/" title="SDL_QueryTexture">SDL_QueryTexture</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_RenderCopy/" title="SDL_RenderCopy">SDL_RenderCopy</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_SetTextureAlphaMod/" title="SDL_SetTextureAlphaMod">SDL_SetTextureAlphaMod</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_SetTextureBlendMode/" title="SDL_SetTextureBlendMode">SDL_SetTextureBlendMode</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_SetTextureColorMod/" title="SDL_SetTextureColorMod">SDL_SetTextureColorMod</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_UnlockTexture/" title="SDL_UnlockTexture">SDL_UnlockTexture</a><br /><a href="/1999/01/10/SDL/Dictionary/SDL_UpdateTexture/" title="SDL_UpdateTexture">SDL_UpdateTexture</a><br />]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_TextureAccess</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_TextureAccess/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_TextureAccess/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-TextureAccess"><a href="#SDL-TextureAccess" class="headerlink" title="SDL_TextureAccess"></a>SDL_TextureAccess</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_TextureAccess">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>纹理访问模式的枚举。</p><h3 id="枚举值"><a href="#枚举值" class="headerlink" title="枚举值"></a>枚举值</h3><p>SDL_TEXTUREACCESS_STATIC：很少改变，不可锁定<br>SDL_TEXTUREACCESS_STREAMING：经常更改，可锁定<br>SDL_TEXTUREACCESS_TARGET：可以用作渲染目标</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_Vertex</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_Vertex/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_Vertex/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-Vertex"><a href="#SDL-Vertex" class="headerlink" title="SDL_Vertex"></a>SDL_Vertex</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_Vertex">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>顶点结构</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><a href="/1999/01/10/SDL/Dictionary/SDL_FPoint/" title="SDL_FPoint">SDL_FPoint</a> position： 顶点位置，以<a href="/1999/01/10/SDL/Dictionary/SDL_Renderer/" title="SDL_Renderer">SDL_Renderer</a>坐标表示<a href="/1999/01/05/SDL/Dictionary/SDL_Color/" title="SDL_Color">SDL_Color</a> color：顶点颜色<a href="/1999/01/10/SDL/Dictionary/SDL_FPoint/" title="SDL_FPoint">SDL_FPoint</a> tex_coord： 标准化纹理坐标（如果需要）（范围从 0 到 1，即对于 64x64px 纹理，从 32x32px 开始将输入为 0.5,0,5）]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_DestroyTexture</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_DestroyTexture/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_DestroyTexture/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-DestroyTexture"><a href="#SDL-DestroyTexture" class="headerlink" title="SDL_DestroyTexture"></a>SDL_DestroyTexture</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_DestroyTexture">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>销毁指定的纹理。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SDL_DestroyTexture</span><span class="hljs-params">(SDL_Texture * texture)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>texture: 要破坏的纹理</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回创建的纹理或失败时返回 NULL；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_GetTextureAlphaMode</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_GetTextureAlphaMod/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_GetTextureAlphaMod/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-GetTextureAlphaMode"><a href="#SDL-GetTextureAlphaMode" class="headerlink" title="SDL_GetTextureAlphaMode"></a>SDL_GetTextureAlphaMode</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_GetTextureAlphaMod">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>将额外的 alpha 值乘以渲染复制操作。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_GetTextureAlphaMod</span><span class="hljs-params">(SDL_Texture * texture,</span></span><br><span class="hljs-params"><span class="hljs-function">                           Uint8 * alpha)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>texture: 查询的纹理<br>alpha: 一个用当前 alpha 值的指针</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_GetTextureColorMod</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_GetTextureColorMod/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_GetTextureColorMod/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-GetTextureColorMod"><a href="#SDL-GetTextureColorMod" class="headerlink" title="SDL_GetTextureColorMod"></a>SDL_GetTextureColorMod</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_GetTextureColorMod">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>将附加颜色值乘以渲染复制操作。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_GetTextureColorMod</span><span class="hljs-params">(SDL_Texture * texture,</span></span><br><span class="hljs-params"><span class="hljs-function">                           Uint8 * r, Uint8 * g,</span></span><br><span class="hljs-params"><span class="hljs-function">                           Uint8 * b)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>texture: 查询的纹理<br>r:用当前红色值的指针<br>g:用当前绿色值的指针<br>b:用当前蓝色值的指针</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_GetTextureBlendMode</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_GetTextureBlendMode/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_GetTextureBlendMode/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-GetTextureBlendMode"><a href="#SDL-GetTextureBlendMode" class="headerlink" title="SDL_GetTextureBlendMode"></a>SDL_GetTextureBlendMode</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_GetTextureBlendMode">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>获取用于纹理复制操作的混合模式。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_GetTextureBlendMode</span><span class="hljs-params">(SDL_Texture * texture,</span></span><br><span class="hljs-params"><span class="hljs-function">                            SDL_BlendMode *blendMode)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>texture: 查询的纹理<br>blendMode: 当前 <a href="/1999/01/10/SDL/Dictionary/SDL_BlendMode/" title="SDL_BlendMode">SDL_BlendMode</a> 的指针</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_QueryTexture</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_QueryTexture/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_QueryTexture/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-QueryTexture"><a href="#SDL-QueryTexture" class="headerlink" title="SDL_QueryTexture"></a>SDL_QueryTexture</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_QueryTexture">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>查询纹理的属性。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_QueryTexture</span><span class="hljs-params">(SDL_Texture * texture,</span></span><br><span class="hljs-params"><span class="hljs-function">                     Uint32 * format, <span class="hljs-type">int</span> *access,</span></span><br><span class="hljs-params"><span class="hljs-function">                     <span class="hljs-type">int</span> *w, <span class="hljs-type">int</span> *h)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>texture: 要锁定访问的纹理<br>format：填充纹理原始格式的指针；实际格式可能有所不同，但像素传输将使用此格式（<a href="/1999/01/10/SDL/Dictionary/SDL_PixelFormatEnum/" title="SDL_PixelFormatEnum">SDL_PixelFormatEnum</a> 值之一）。如果您不需要此信息，则此参数可以为 NULL。<br>access：一个指针，填充了对纹理的实际访问（<a href="/1999/01/10/SDL/Dictionary/SDL_TextureAccess/" title="SDL_TextureAccess">SDL_TextureAccess</a> 值之一）。如果您不需要此信息，则此参数可以为 NULL。<br>w:纹理宽度（以像素为单位）的指针。如果您不需要此信息，则此参数可以为 NULL。<br>h:纹理高度（以像素为单位）的指针。如果您不需要此信息，则此参数可以为 NULL。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_SetTextureAlphaMod</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_SetTextureAlphaMod/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_SetTextureAlphaMod/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-SetTextureAlphaMod"><a href="#SDL-SetTextureAlphaMod" class="headerlink" title="SDL_SetTextureAlphaMod"></a>SDL_SetTextureAlphaMod</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_SetTextureAlphaMod">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>设置一个额外的 alpha 值乘以渲染复制操作。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_SetTextureAlphaMod</span><span class="hljs-params">(SDL_Texture * texture,</span></span><br><span class="hljs-params"><span class="hljs-function">                           Uint8 alpha)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>texture: 要更新的纹理<br>alpha: 源 alpha 值乘以复制操作</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_SetTextureBlendMode</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_SetTextureBlendMode/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_SetTextureBlendMode/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-SetTextureBlendMode"><a href="#SDL-SetTextureBlendMode" class="headerlink" title="SDL_SetTextureBlendMode"></a>SDL_SetTextureBlendMode</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_SetTextureBlendMode">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>设置 <a href="/1999/01/10/SDL/Dictionary/SDL_RenderCopy/" title="SDL_RenderCopy">SDL_RenderCopy()</a>使用的纹理混合模式。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_SetTextureBlendMode</span><span class="hljs-params">(SDL_Texture * texture,</span></span><br><span class="hljs-params"><span class="hljs-function">                            SDL_BlendMode blendMode)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>texture: 要更新的纹理<br>alpha: 用于纹理混合的 <a href="/1999/01/10/SDL/Dictionary/SDL_BlendMode/" title="SDL_BlendMode">SDL_BlendMode</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_LockTexture</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_LockTexture/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_LockTexture/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-LockTexture"><a href="#SDL-LockTexture" class="headerlink" title="SDL_LockTexture"></a>SDL_LockTexture</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_LockTexture">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>锁定纹理的一部分以进行只写像素访问。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_LockTexture</span><span class="hljs-params">(SDL_Texture * texture,</span></span><br><span class="hljs-params"><span class="hljs-function">                    <span class="hljs-type">const</span> SDL_Rect * rect,</span></span><br><span class="hljs-params"><span class="hljs-function">                    <span class="hljs-type">void</span> **pixels, <span class="hljs-type">int</span> *pitch)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>texture: 要锁定访问的纹理，纹理需使用 SDL_TEXTUREACCESS_STREAMING 创建<br>rect：一个<a href="/1999/01/05/SDL/Dictionary/SDL_Rect/" title="SDL_Rect">SDL_Rect</a>结构，表示要锁定访问的区域； NULL 锁定整个纹理<br>pixels：这由指向锁定像素的指针，并由锁定区域适当偏移<br>pitch： 这用锁定像素的间距；间距是一行的长度（以字节为单位）</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，如果纹理无效或不是使用 SDL_TEXTUREACCESS_STREAMING 创建的，则返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_SetTextureColorMod</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_SetTextureColorMod/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_SetTextureColorMod/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-SetTextureColorMod"><a href="#SDL-SetTextureColorMod" class="headerlink" title="SDL_SetTextureColorMod"></a>SDL_SetTextureColorMod</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_SetTextureColorMode">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>设置与渲染复制操作相乘的附加颜色值。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_SetTextureColorMod</span><span class="hljs-params">(SDL_Texture * texture,</span></span><br><span class="hljs-params"><span class="hljs-function">                           Uint8 r, Uint8 g, Uint8 b)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>texture: 要更新的纹理<br>r:红色值乘以复制操作<br>g:绿色值乘以复制操作<br>b:蓝色值乘以复制操作</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_UpdateTexture</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_UpdateTexture/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_UpdateTexture/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-UpdateTexture"><a href="#SDL-UpdateTexture" class="headerlink" title="SDL_UpdateTexture"></a>SDL_UpdateTexture</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_UpdateTexture">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>使用新的像素数据更新给定的纹理矩形。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_UpdateTexture</span><span class="hljs-params">(SDL_Texture * texture,</span></span><br><span class="hljs-params"><span class="hljs-function">                      <span class="hljs-type">const</span> SDL_Rect * rect,</span></span><br><span class="hljs-params"><span class="hljs-function">                      <span class="hljs-type">const</span> <span class="hljs-type">void</span> *pixels, <span class="hljs-type">int</span> pitch)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>texture: 要更新的纹理<br>rect: 一个<a href="/1999/01/05/SDL/Dictionary/SDL_Rect/" title="SDL_Rect">SDL_Rect</a>结构，表示要更新的区域，或 NULL 来更新整个纹理<br>pixels: 纹理格式的原始像素数据<br>pitch: 一行像素数据中的字节数，包括行之间的填充</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_UnlockTexture</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_UnlockTexture/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_UnlockTexture/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-UnlockTexture"><a href="#SDL-UnlockTexture" class="headerlink" title="SDL_UnlockTexture"></a>SDL_UnlockTexture</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_UnlockTexture">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>解锁纹理，将更改上传到视频内存（如果需要）。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SDL_UnlockTexture</span><span class="hljs-params">(SDL_Texture * texture)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>texture: 由 <a href="/1999/01/10/SDL/Dictionary/SDL_LockTexture/" title="SDL_LockTexture">SDL_LockTexture()</a> 锁定的纹理</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_GetTextureAlphaMod</title>
    <link href="/1999/01/10/SDL/Dictionary/SDL_GetTextureAlphaMode/"/>
    <url>/1999/01/10/SDL/Dictionary/SDL_GetTextureAlphaMode/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-GetTextureAlphaMod"><a href="#SDL-GetTextureAlphaMod" class="headerlink" title="SDL_GetTextureAlphaMod"></a>SDL_GetTextureAlphaMod</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_GetTextureAlphaMod">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>将额外的 alpha 值乘以渲染复制操作。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_GetTextureAlphaMod</span><span class="hljs-params">(SDL_Texture * texture,</span></span><br><span class="hljs-params"><span class="hljs-function">                           Uint8 * alpha)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>texture: 查询的纹理<br>alpha: 一个用当前 alpha 值的指针</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_BlitScaled</title>
    <link href="/1999/01/08/SDL/Dictionary/SDL_BlitScaled/"/>
    <url>/1999/01/08/SDL/Dictionary/SDL_BlitScaled/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-BlitScaled"><a href="#SDL-BlitScaled" class="headerlink" title="SDL_BlitScaled"></a>SDL_BlitScaled</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_BlitScaled">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>使用此功能可以将缩放surface复制到目标surface。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_BlitScaled</span><span class="hljs-params">(SDL_Surface* src,<span class="hljs-type">const</span> SDL_Rect* srcrect,SDL_Surface* dst,SDL_Rect* dstrect)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src: 要从中复制的 SDL_Surface 结构<br>srcrect: 表示要复制的矩形的 SDL_Rect 结构，或 NULL 来复制整个屏幕<br>dst: 作为 blit 目标的 SDL_Surface 结构<br>dstrect: 表示复制到的矩形的 SDL_Rect 结构</p><p>关于SDL_Rect的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_Rect/" title="SDL_Rect">SDL_Rect</a><br>关于SDL_Surface的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_Surface/" title="SDL_Surface">SDL_Surface</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_AudioDeviceEvent</title>
    <link href="/1999/01/07/SDL/Dictionary/SDL_AudioDeviceEvent/"/>
    <url>/1999/01/07/SDL/Dictionary/SDL_AudioDeviceEvent/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-AudioDeviceEvent"><a href="#SDL-AudioDeviceEvent" class="headerlink" title="SDL_AudioDeviceEvent"></a>SDL_AudioDeviceEvent</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_AudioDeviceEvent">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>包含音频设备事件信息的结构。</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><p>Uint32 type: <a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_AUDIODEVICEADDED</a>, or <a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_AUDIODEVICEREMOVED</a><br>Uint32 timestamp: 事件的时间戳<br>Uint32 which: SDL_AUDIODEVICEADDED 事件的音频设备索引（在下一次 <a href="/1999/01/07/SDL/Dictionary/SDL_GetNumAudioDevices/" title="SDL_GetNumAudioDevices">SDL_GetNumAudioDevices()</a> 调用之前有效）、SDL_AUDIODEVICEREMOVED 事件的 SDL_AudioDeviceID<br>Uint8 iscapture: 如果是音频输出设备则为零，如果是音频捕获设备则非零</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_ControllerButtonEvent</title>
    <link href="/1999/01/07/SDL/Dictionary/SDL_ControllerButtonEvent/"/>
    <url>/1999/01/07/SDL/Dictionary/SDL_ControllerButtonEvent/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-ControllerButtonEvent"><a href="#SDL-ControllerButtonEvent" class="headerlink" title="SDL_ControllerButtonEvent"></a>SDL_ControllerButtonEvent</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_ControllerButtonEvent">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>包含游戏控制器按钮事件信息的结构。</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><p>Uint32 type: <a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_CONTROLLERBUTTONDOWN</a>or<a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_CONTROLLERBUTTONUP</a><br>Uint32 timestamp: 事件的时间戳<br>SDL_JoystickID which: 操纵杆实例 ID<br>Uint8 button: 控制器按钮 (<a href="/1999/01/07/SDL/Dictionary/SDL_GameControllerButton/" title="SDL_GameControllerButton">SDL_GameControllerButton</a>)<br>Uint8 state: SDL_PRESSED 或 SDL_RELEASED</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_ControllerAxisEvent</title>
    <link href="/1999/01/07/SDL/Dictionary/SDL_ControllerAxisEvent/"/>
    <url>/1999/01/07/SDL/Dictionary/SDL_ControllerAxisEvent/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-ControllerAxisEvent"><a href="#SDL-ControllerAxisEvent" class="headerlink" title="SDL_ControllerAxisEvent"></a>SDL_ControllerAxisEvent</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_ControllerAxisEvent">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>包含游戏控制器轴运动事件信息的结构。</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><p>Uint32 type: <a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_CONTROLLERAXISMOTION</a><br>Uint32 timestamp: 事件的时间戳<br>SDL_JoystickID which: 操纵杆实例 ID<br>Uint8 axis: 控制器轴 (<a href="/1999/01/07/SDL/Dictionary/SDL_GameControllerAxis/" title="SDL_GameControllerAxis">SDL_GameControllerAxis</a>)<br>Sint16 value： 轴值（范围：-32768 到 32767）</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_DollarGestureEvent</title>
    <link href="/1999/01/07/SDL/Dictionary/SDL_DollarGestureEvent/"/>
    <url>/1999/01/07/SDL/Dictionary/SDL_DollarGestureEvent/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-DollarGestureEvent"><a href="#SDL-DollarGestureEvent" class="headerlink" title="SDL_DollarGestureEvent"></a>SDL_DollarGestureEvent</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_DollarGestureEvent">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>包含复杂手势事件信息的结构。</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><p>Uint32 type: <a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_DOLLARGESTUR</a>or<a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_DOLLARRECORD</a><br>Uint32 timestamp: 事件的时间戳<br>SDL_TouchID touchId: 触摸设备 ID<br>SDL_GestureID gestureId: 与所执行的笔划最接近的手势的唯一 ID<br>Uint32 numFingers: 用于绘制笔划的手指数量<br>float error: 手势模板和实际执行的手势之间的差异（误差越小匹配越好）<br>float x: 标准化手势中心<br>float y: 标准化手势中心</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_ControllerDeviceEvent</title>
    <link href="/1999/01/07/SDL/Dictionary/SDL_ControllerDeviceEvent/"/>
    <url>/1999/01/07/SDL/Dictionary/SDL_ControllerDeviceEvent/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-ControllerDeviceEvent"><a href="#SDL-ControllerDeviceEvent" class="headerlink" title="SDL_ControllerDeviceEvent"></a>SDL_ControllerDeviceEvent</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_ControllerDeviceEvent">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>包含控制器设备事件信息的结构。</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><p>Uint32 type: <a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_CONTROLLERDEVICEADDED</a>, <a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_CONTROLLERDEVICEREMOVED</a>or<a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_CONTROLLERDEVICEREMAPPED</a><br>Uint32 timestamp: 事件的时间戳<br>Sint32 which: SDL_CONTROLLERDEVICEADDED 事件的操纵杆设备索引或 SDL_CONTROLLERDEVICEREMOVED 或 SDL_CONTROLLERDEVICEREMAPPED 事件的实例 ID</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_DropEvent</title>
    <link href="/1999/01/07/SDL/Dictionary/SDL_DropEvent/"/>
    <url>/1999/01/07/SDL/Dictionary/SDL_DropEvent/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-DropEvent"><a href="#SDL-DropEvent" class="headerlink" title="SDL_DropEvent"></a>SDL_DropEvent</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_DropEvent">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>包含用于请求系统打开文件的事件的结构。</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><p>Uint32 type: <a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_DROPFILE</a>,<a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_DROPTEXT</a>,<a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_DROPBEGIN</a>or<a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_DROPCOMPLETE</a><br>Uint32 timestamp: 事件的时间戳<br>char* file: 文件名在 BEGIN&#x2F;COMPLETE 上为 NULL, 应使用 SDL_free() 释放<br>Uint32 windowID: 掉落的窗户（如果有</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_GameControllerAxis</title>
    <link href="/1999/01/07/SDL/Dictionary/SDL_GameControllerAxis/"/>
    <url>/1999/01/07/SDL/Dictionary/SDL_GameControllerAxis/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-GameControllerAxis"><a href="#SDL-GameControllerAxis" class="headerlink" title="SDL_GameControllerAxis"></a>SDL_GameControllerAxis</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_GameControllerAxis">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>控制器中可用的枚举。</p><h3 id="枚举值"><a href="#枚举值" class="headerlink" title="枚举值"></a>枚举值</h3><p>SDL_CONTROLLER_AXIS_INVALID： -1<br>SDL_CONTROLLER_AXIS_LEFTX： 0<br>SDL_CONTROLLER_AXIS_LEFTY： 1<br>SDL_CONTROLLER_AXIS_RIGHTX： 2<br>SDL_CONTROLLER_AXIS_RIGHTY： 3<br>SDL_CONTROLLER_AXIS_TRIGGERLEFT： 4<br>SDL_CONTROLLER_AXIS_TRIGGERRIGHT： 5<br>SDL_CONTROLLER_AXIS_MAX： 6</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_GetNumAudioDevices</title>
    <link href="/1999/01/07/SDL/Dictionary/SDL_GetNumAudioDevices/"/>
    <url>/1999/01/07/SDL/Dictionary/SDL_GetNumAudioDevices/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-GetNumAudioDevices"><a href="#SDL-GetNumAudioDevices" class="headerlink" title="SDL_GetNumAudioDevices"></a>SDL_GetNumAudioDevices</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_GetNumAudioDevices">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>获取内置音频设备的数量。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_GetNumAudioDevices</span><span class="hljs-params">(<span class="hljs-type">int</span> iscapture)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>iscapture: 零表示请求播放设备，非零表示请求录音设备</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回当前驱动程序公开的可用设备的数量；如果无法确定显式设备列表，则返回 -1。返回值 -1 并不一定意味着出现错误情况。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_GameControllerButton</title>
    <link href="/1999/01/07/SDL/Dictionary/SDL_GameControllerButton/"/>
    <url>/1999/01/07/SDL/Dictionary/SDL_GameControllerButton/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-GameControllerButton"><a href="#SDL-GameControllerButton" class="headerlink" title="SDL_GameControllerButton"></a>SDL_GameControllerButton</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_GameControllerButton">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>控制器中可用的枚举。</p><h3 id="枚举值"><a href="#枚举值" class="headerlink" title="枚举值"></a>枚举值</h3><p>SDL_CONTROLLER_BUTTON_INVALID: -1<br>SDL_CONTROLLER_BUTTON_A: 0<br>SDL_CONTROLLER_BUTTON_B: 1<br>SDL_CONTROLLER_BUTTON_X: 2<br>SDL_CONTROLLER_BUTTON_Y: 3<br>SDL_CONTROLLER_BUTTON_BACK: 4<br>SDL_CONTROLLER_BUTTON_GUIDE: 5<br>SDL_CONTROLLER_BUTTON_START: 6<br>SDL_CONTROLLER_BUTTON_LEFTSTICK:7<br>SDL_CONTROLLER_BUTTON_RIGHTSTICK: 8<br>SDL_CONTROLLER_BUTTON_LEFTSHOULDER: 9<br>SDL_CONTROLLER_BUTTON_RIGHTSHOULDER: 10<br>SDL_CONTROLLER_BUTTON_DPAD_UP: 11<br>SDL_CONTROLLER_BUTTON_DPAD_DOWN: 12<br>SDL_CONTROLLER_BUTTON_DPAD_LEFT: 13<br>SDL_CONTROLLER_BUTTON_DPAD_RIGHT: 14<br>SDL_CONTROLLER_BUTTON_MISC1: 15<br>SDL_CONTROLLER_BUTTON_PADDLE1: 16<br>SDL_CONTROLLER_BUTTON_PADDLE2: 17<br>SDL_CONTROLLER_BUTTON_PADDLE3: 18<br>SDL_CONTROLLER_BUTTON_PADDLE4: 19<br>SDL_CONTROLLER_BUTTON_TOUCHPAD: 20<br>SDL_CONTROLLER_BUTTON_MAX: 21</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_JoyAxisEvent</title>
    <link href="/1999/01/07/SDL/Dictionary/SDL_JoyAxisEvent/"/>
    <url>/1999/01/07/SDL/Dictionary/SDL_JoyAxisEvent/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-JoyAxisEvent"><a href="#SDL-JoyAxisEvent" class="headerlink" title="SDL_JoyAxisEvent"></a>SDL_JoyAxisEvent</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_JoyAxisEvent">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>包含操纵杆轴运动事件信息的结构</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><p>Uint32 type: <a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_JOYAXISMOTION</a><br>Uint32 timestamp: 事件的时间戳<br>SDL_JoystickID which：报告事件的操纵杆实例ID<br>Uint8 axis：发生变化的轴的索引<br>Sint16 value：轴的当前位置（范围：-32768 到 32767）</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_JoyButtonEvent</title>
    <link href="/1999/01/07/SDL/Dictionary/SDL_JoyButtonEvent/"/>
    <url>/1999/01/07/SDL/Dictionary/SDL_JoyButtonEvent/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-JoyButtonEvent"><a href="#SDL-JoyButtonEvent" class="headerlink" title="SDL_JoyButtonEvent"></a>SDL_JoyButtonEvent</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_JoyButtonEvent">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>包含操纵杆按钮事件信息的结构。</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><p>Uint32 type: 事件类型<a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_JOYBUTTONDOWN</a>or<a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_JOYBUTTONUP</a><br>Uint32 timestamp: 事件的时间戳<br>SDL_JoystickID which：报告事件的操纵杆的实例ID<br>Uint8 button:发生变化的按钮的索引<br>Uint8 state: 按钮的状态； SDL_PRESSED 或 SDL_RELEASED</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_JoyBallEvent</title>
    <link href="/1999/01/07/SDL/Dictionary/SDL_JoyBallEvent/"/>
    <url>/1999/01/07/SDL/Dictionary/SDL_JoyBallEvent/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-JoyBallEvent"><a href="#SDL-JoyBallEvent" class="headerlink" title="SDL_JoyBallEvent"></a>SDL_JoyBallEvent</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_JoyBallEvent">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>包含操纵杆轨迹球运动事件信息的结构。</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><p>Uint32 type: <a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_JOYBALLMOTION</a><br>Uint32 timestamp: 事件的时间戳<br>SDL_JoystickID which：报告事件的操纵杆实例ID<br>Uint8 ball：发生变化的轨迹球的索引<br>Sint16 xrel:X方向的相对运动<br>Sint16 yrel:Y方向的相对运动</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_JoyDeviceEvent</title>
    <link href="/1999/01/07/SDL/Dictionary/SDL_JoyDeviceEvent/"/>
    <url>/1999/01/07/SDL/Dictionary/SDL_JoyDeviceEvent/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-JoyDeviceEvent"><a href="#SDL-JoyDeviceEvent" class="headerlink" title="SDL_JoyDeviceEvent"></a>SDL_JoyDeviceEvent</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_JoyDeviceEvent">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>包含操纵杆设备事件信息的结构。</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><p>Uint32 type: 事件类型<a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_JOYDEVICEADDED</a>or<a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_JOYDEVICEREMOVED</a><br>Uint32 timestamp: 事件的时间戳<br>Sint32 which:SDL_JOYDEVICEADDED 事件的操纵杆设备索引或 SDL_JOYDEVICEREMOVED 事件的实例 ID</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_KeyboardEvent</title>
    <link href="/1999/01/07/SDL/Dictionary/SDL_KeyboardEvent/"/>
    <url>/1999/01/07/SDL/Dictionary/SDL_KeyboardEvent/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-KeyboardEvent"><a href="#SDL-KeyboardEvent" class="headerlink" title="SDL_KeyboardEvent"></a>SDL_KeyboardEvent</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_KeyboardEvent">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>包含键盘按钮事件信息的结构。</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><p>Uint32 type：事件类型；<a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_KEYDOWN</a>or<a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_KEYUP</a><br>Uint32 timestamp：事件的时间戳<br>Uint32 windowID：具有键盘焦点的窗口（如果有）<br>Uint8 state：the state of the key; SDL_PRESSED or SDL_RELEASED<br>Uint8 repeat：如果这是按键重复则非零<br>SDL_Keysym keysym：表示按下或释放的键的<a href="/1999/01/07/SDL/Dictionary/SDL_Keysym/" title="SDL_Keysym">SDL_Keysym</a> </p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_JoyHatEvent</title>
    <link href="/1999/01/07/SDL/Dictionary/SDL_JoyHatEvent/"/>
    <url>/1999/01/07/SDL/Dictionary/SDL_JoyHatEvent/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-JoyHatEvent"><a href="#SDL-JoyHatEvent" class="headerlink" title="SDL_JoyHatEvent"></a>SDL_JoyHatEvent</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_JoyHatEvent">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>包含操纵杆帽位置变化事件信息的结构。</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><p>Uint32 type: <a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_JOYHATMOTION</a><br>Uint32 timestamp: 事件的时间戳<br>SDL_JoystickID which：报告事件的操纵杆的实例ID<br>Uint8 hat：改变的帽子索引<br>Uint8 value: 帽子的新位置</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_Keycode</title>
    <link href="/1999/01/07/SDL/Dictionary/SDL_Keycode/"/>
    <url>/1999/01/07/SDL/Dictionary/SDL_Keycode/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-Keycode"><a href="#SDL-Keycode" class="headerlink" title="SDL_Keycode"></a>SDL_Keycode</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_Keycode">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>SDL 虚拟键表示。</p><h3 id="key-value"><a href="#key-value" class="headerlink" title="key&amp;&amp;value"></a>key&amp;&amp;value</h3><p><img src="/img/SDL/SDL_Scancode&SDL_Keycode.png"><br><img src="/img/SDL/SDL_Scancode&SDL_Keycode1.png"><br><img src="/img/SDL/SDL_Scancode&SDL_Keycode2.png"><br><img src="/img/SDL/SDL_Scancode&SDL_Keycode3.png"><br><img src="/img/SDL/SDL_Scancode&SDL_Keycode4.png"><br><img src="/img/SDL/SDL_Scancode&SDL_Keycode5.png"><br><img src="/img/SDL/SDL_Scancode&SDL_Keycode6.png"><br><img src="/img/SDL/SDL_Scancode&SDL_Keycode7.png"></p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_Keymod</title>
    <link href="/1999/01/07/SDL/Dictionary/SDL_Keymod/"/>
    <url>/1999/01/07/SDL/Dictionary/SDL_Keymod/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-Keymod"><a href="#SDL-Keymod" class="headerlink" title="SDL_Keymod"></a>SDL_Keymod</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_Keymod">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>键修饰符掩码的枚举。</p><h3 id="枚举值"><a href="#枚举值" class="headerlink" title="枚举值"></a>枚举值</h3><p>KMOD_NONE: 0（无修饰符适用）<br>KMOD_LSHIFT:左 Shift 键已按下<br>KMOD_RSHIFT:右 Shift 键已按下<br>KMOD_LCTRL:左 Ctrl (Control) 键已按下<br>KMOD_RCTRL:按下右侧 Ctrl (Control) 键<br>KMOD_LALT:左 Alt 键按下<br>KMOD_RALT:右 Alt 键按下<br>KMOD_LGUI:左侧 GUI 键（通常是 Windows 键）按下<br>KMOD_RGUI:右 GUI 键（通常是 Windows 键）按下了<br>KMOD_NUM:Num Lock 键（可能位于扩展键盘上）按下<br>KMOD_CAPS:Caps Lock 键已按下<br>KMOD_MODE:!AltGr 键已按下<br>KMOD_SCROLL:Scroll Lock 键按下（自 SDL 2.0.18 起可用）<br>KMOD_CTRL:(KMOD_LCTRL|KMOD_RCTRL)<br>KMOD_SHIFT:(KMOD_LSHIFT|KMOD_RSHIFT)<br>KMOD_ALT:(KMOD_LALT|KMOD_RALT)<br>KMOD_GUI:(KMOD_LGUI|KMOD_RGUI)</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_MouseButtonEvent</title>
    <link href="/1999/01/07/SDL/Dictionary/SDL_MouseButtonEvent/"/>
    <url>/1999/01/07/SDL/Dictionary/SDL_MouseButtonEvent/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-MouseButtonEvent"><a href="#SDL-MouseButtonEvent" class="headerlink" title="SDL_MouseButtonEvent"></a>SDL_MouseButtonEvent</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_MouseButtonEvent">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>包含鼠标按钮事件信息的结构。</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><p>Uint32 type: 事件类型<a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_MOUSEBUTTONDOWN</a>or<a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_MOUSEBUTTONUP</a><br>Uint32 timestamp: 事件的时间戳<br>Uint32 windowID:具有鼠标焦点的窗口（如果有）<br>Uint32 which:鼠标实例 ID，或 SDL_TOUCH_MOUSEID；<br>Uint8 button:改变的按钮；<br>Uint8 state:按钮的状态； SDL_PRESSED 或 SDL_RELEASED<br>Uint8 clicks:1 表示单击，2 表示双击，等等（&gt;&#x3D; SDL 2.0.2）<br>Sint32 x:X坐标，相对于窗口<br>Sint32 y:Y 坐标，相对于窗口</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_Keysym</title>
    <link href="/1999/01/07/SDL/Dictionary/SDL_Keysym/"/>
    <url>/1999/01/07/SDL/Dictionary/SDL_Keysym/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-Keysym"><a href="#SDL-Keysym" class="headerlink" title="SDL_Keysym"></a>SDL_Keysym</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_Keysym">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>包含关键事件中使用的关键信息的结构。</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><p>SDL_Scancode scancode:SDL 物理键码。关于SDL_Scancode的描述可参考<a href="/1999/01/07/SDL/Dictionary/SDL_Scancode/" title="SDL_Scancode">SDL_Scancode</a><br>SDL_Keycode sym:SDL 虚拟键码。关于SDL_Keycode的描述可参考<a href="/1999/01/07/SDL/Dictionary/SDL_Keycode/" title="SDL_Keycode">SDL_Keycode</a><br>Uint16 mod:当前键修饰符。关于SDL_Keymod的描述可参考<a href="/1999/01/07/SDL/Dictionary/SDL_Keymod/" title="SDL_Keymod">SDL_Keymod</a><br>Uint32 unused</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_MouseWheelEvent</title>
    <link href="/1999/01/07/SDL/Dictionary/SDL_MouseWheelEvent/"/>
    <url>/1999/01/07/SDL/Dictionary/SDL_MouseWheelEvent/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-MouseWheelEvent"><a href="#SDL-MouseWheelEvent" class="headerlink" title="SDL_MouseWheelEvent"></a>SDL_MouseWheelEvent</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_MouseWheelEvent">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>包含鼠标滚轮事件信息的结构体。</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><p>Uint32 type: <a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_MOUSEWHEEL</a><br>Uint32 timestamp: 事件的时间戳<br>Uint32 windowID:具有鼠标焦点的窗口（如果有）<br>Uint32 which:鼠标实例 ID，或 SDL_TOUCH_MOUSEID；<br>Sint32 x:水平滚动的量，向右为正，向左为负<br>Sint32 y:垂直滚动的量，远离用户为正，朝向用户为负<br>Uint32 direction:SDL_MOUSEWHEEL_NORMAL or SDL_MOUSEWHEEL_FLIPPED;<br>float preciseX:水平滚动量，向右为正，向左为负，浮动精度<br>float preciseY:垂直滚动的量，远离用户为正，朝向用户为负，具有浮动精度</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_MultiGestureEvent</title>
    <link href="/1999/01/07/SDL/Dictionary/SDL_MultiGestureEvent/"/>
    <url>/1999/01/07/SDL/Dictionary/SDL_MultiGestureEvent/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-MultiGestureEvent"><a href="#SDL-MultiGestureEvent" class="headerlink" title="SDL_MultiGestureEvent"></a>SDL_MultiGestureEvent</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_MultiGestureEvent">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>包含多个手指手势事件信息的结构体。</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><p>Uint32 type: <a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_MULTIGESTURE</a><br>Uint32 timestamp: 事件的时间戳<br>SDL_TouchID touchId:触摸设备 ID<br>float dTheta:手指在此运动期间旋转的量（以弧度为单位）<br>float dDist:在此动作期间手指捏的量<br>float x:标准化手势中心<br>float y:标准化手势中心<br>Uint16 numFingers:手势中使用的手指数量</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_QuitEvent</title>
    <link href="/1999/01/07/SDL/Dictionary/SDL_QuitEvent/"/>
    <url>/1999/01/07/SDL/Dictionary/SDL_QuitEvent/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-QuitEvent"><a href="#SDL-QuitEvent" class="headerlink" title="SDL_QuitEvent"></a>SDL_QuitEvent</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_QuitEvent">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>包含“退出请求”事件的结构。</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><p>Uint32 type: <a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_QUIT</a><br>Uint32 timestamp: 事件的时间戳</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_MouseMotionEvent</title>
    <link href="/1999/01/07/SDL/Dictionary/SDL_MouseMotionEvent/"/>
    <url>/1999/01/07/SDL/Dictionary/SDL_MouseMotionEvent/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-MouseMotionEvent"><a href="#SDL-MouseMotionEvent" class="headerlink" title="SDL_MouseMotionEvent"></a>SDL_MouseMotionEvent</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_MouseMotionEvent">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>包含鼠标移动事件信息的结构体。</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><p>Uint32 type: 事件类型<a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_MOUSEMOTION</a><br>Uint32 timestamp: 事件的时间戳<br>Uint32 windowID:具有鼠标焦点的窗口（如果有）<br>Uint32 which:鼠标实例 ID，或 SDL_TOUCH_MOUSEID；<br>Uint32 state:按钮的状态；<br>Sint32 x:X坐标，相对于窗口<br>Sint32 y:Y 坐标，相对于窗口<br>Sint32 xrel:X方向的相对运动<br>Sint32 yrel:Y方向相对运动</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RegisterEvents</title>
    <link href="/1999/01/07/SDL/Dictionary/SDL_RegisterEvents/"/>
    <url>/1999/01/07/SDL/Dictionary/SDL_RegisterEvents/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RegisterEvents"><a href="#SDL-RegisterEvents" class="headerlink" title="SDL_RegisterEvents"></a>SDL_RegisterEvents</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RegisterEvents">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>分配一组用户定义的事件，并返回该组事件的开始事件编号。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">Uint32 <span class="hljs-title">SDL_RegisterEvents</span><span class="hljs-params">(<span class="hljs-type">int</span> numevents)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>numevents：要分配的事件数</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回开始事件编号，如果没有足够的用户定义事件，则返回 (Uint32)-1。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_TextEditingEvent</title>
    <link href="/1999/01/07/SDL/Dictionary/SDL_TextEditingEvent/"/>
    <url>/1999/01/07/SDL/Dictionary/SDL_TextEditingEvent/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-TextEditingEvent"><a href="#SDL-TextEditingEvent" class="headerlink" title="SDL_TextEditingEvent"></a>SDL_TextEditingEvent</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_TextEditingEvent">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>包含键盘文本编辑事件信息的结构。</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><p>Uint32 type: <a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_TEXTEDITING</a><br>Uint32 timestamp: 事件的时间戳<br>Uint32 windowID: 具有键盘焦点的窗口（如果有）<br>char[32] text: UTF-8 编码中以 null 结尾的编辑文本<br>Sint32 start: 开始编辑的位置<br>Sint32 length:从起点开始编辑的字符数</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_TextInputEvent</title>
    <link href="/1999/01/07/SDL/Dictionary/SDL_TextInputEvent/"/>
    <url>/1999/01/07/SDL/Dictionary/SDL_TextInputEvent/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-TextInputEvent"><a href="#SDL-TextInputEvent" class="headerlink" title="SDL_TextInputEvent"></a>SDL_TextInputEvent</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_TextInputEvent">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>包含键盘文本输入事件信息的结构。</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><p>Uint32 type: <a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_TEXTINPUT</a><br>Uint32 timestamp: 事件的时间戳<br>Uint32 windowID: 具有键盘焦点的窗口（如果有）<br>char[32] text: UTF-8 编码中以 null 结尾的编辑文本</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_Scancode</title>
    <link href="/1999/01/07/SDL/Dictionary/SDL_Scancode/"/>
    <url>/1999/01/07/SDL/Dictionary/SDL_Scancode/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-Scancode"><a href="#SDL-Scancode" class="headerlink" title="SDL_Scancode"></a>SDL_Scancode</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_Scancode">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>SDL 键盘扫描码表示的枚举。</p><h3 id="key-value"><a href="#key-value" class="headerlink" title="key&amp;&amp;value"></a>key&amp;&amp;value</h3><p><img src="/img/SDL/SDL_Scancode&SDL_Keycode.png"><br><img src="/img/SDL/SDL_Scancode&SDL_Keycode1.png"><br><img src="/img/SDL/SDL_Scancode&SDL_Keycode2.png"><br><img src="/img/SDL/SDL_Scancode&SDL_Keycode3.png"><br><img src="/img/SDL/SDL_Scancode&SDL_Keycode4.png"><br><img src="/img/SDL/SDL_Scancode&SDL_Keycode5.png"><br><img src="/img/SDL/SDL_Scancode&SDL_Keycode6.png"><br><img src="/img/SDL/SDL_Scancode&SDL_Keycode7.png"></p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_SysWMEvent</title>
    <link href="/1999/01/07/SDL/Dictionary/SDL_SysWMEvent/"/>
    <url>/1999/01/07/SDL/Dictionary/SDL_SysWMEvent/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-SysWMEvent"><a href="#SDL-SysWMEvent" class="headerlink" title="SDL_SysWMEvent"></a>SDL_SysWMEvent</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_SysWMEvent">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>包含视频驱动程序相关系统事件的结构。</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><p>Uint32 type: <a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_SYSWMEVENT</a><br>Uint32 timestamp: 事件的时间戳<br>SDL_SysWMmsg* msg: 驱动程序相关数据，在 SDL_syswm.h 中定义</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_TouchFingerEvent</title>
    <link href="/1999/01/07/SDL/Dictionary/SDL_TouchFingerEvent/"/>
    <url>/1999/01/07/SDL/Dictionary/SDL_TouchFingerEvent/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-TouchFingerEvent"><a href="#SDL-TouchFingerEvent" class="headerlink" title="SDL_TouchFingerEvent"></a>SDL_TouchFingerEvent</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_TouchFingerEvent">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>包含手指触摸事件信息的结构。</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><p>Uint32 type: <a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_FINGERMOTION</a>,<a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_FINGERDOWN</a>or<a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_FINGERUP</a><br>Uint32 timestamp: 事件的时间戳<br>SDL_TouchID touchId: 触摸设备 ID<br>SDL_FingerID fingerId: 手指 ID<br>float x:触摸事件的 x 轴位置，标准化 (0…1)<br>float y:触摸事件的 y 轴位置，标准化 (0…1)<br>float dx:在 x 轴上移动的距离，标准化 (-1…1)<br>float dy:y 轴移动的距离，标准化 (-1…1)<br>float pressure:施加的压力量，标准化 (0…1)<br>Uint32 windowID:手指下方的窗口（如果有）</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_UserEvent</title>
    <link href="/1999/01/07/SDL/Dictionary/SDL_UserEvent/"/>
    <url>/1999/01/07/SDL/Dictionary/SDL_UserEvent/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-UserEvent"><a href="#SDL-UserEvent" class="headerlink" title="SDL_UserEvent"></a>SDL_UserEvent</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_UserEvent">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>包含应用程序定义的事件类型的结构。</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><p>Uint32 type: value obtained from<a href="/1999/01/07/SDL/Dictionary/SDL_RegisterEvents/" title="SDL_RegisterEvents">SDL_RegisterEvents</a><br>Uint32 timestamp: 事件的时间戳<br>Uint32 windowID: 关联的窗口（如果有）<br>Sint32 code:用户定义的事件代码<br>void* data1:用户定义的数据指针<br>void* data2:用户定义的数据指针</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_WindowEventID</title>
    <link href="/1999/01/07/SDL/Dictionary/SDL_WindowEventID/"/>
    <url>/1999/01/07/SDL/Dictionary/SDL_WindowEventID/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-WindowEventID"><a href="#SDL-WindowEventID" class="headerlink" title="SDL_WindowEventID"></a>SDL_WindowEventID</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_WindowEventID">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>窗口事件的枚举。</p><h3 id="枚举值"><a href="#枚举值" class="headerlink" title="枚举值"></a>枚举值</h3><p>SDL_WINDOWEVENT_NONE：（没用过）<br>SDL_WINDOWEVENT_SHOWN：窗口已显示<br>SDL_WINDOWEVENT_HIDDEN：窗口已被隐藏<br>SDL_WINDOWEVENT_EXPOSED：窗口已暴露，应重新绘制<br>SDL_WINDOWEVENT_MOVED：窗口已移动到data1、data2<br>SDL_WINDOWEVENT_RESIZED：窗口大小已调整为 data1xdata2；此事件始终先于 SDL_WINDOWEVENT_SIZE_CHANGED<br>SDL_WINDOWEVENT_SIZE_CHANGED：窗口大小已更改，无论是由于 API 调用还是通过系统或用户更改了窗口大小；如果大小被外部事件（即用户或窗口管理器）更改，则此事件后跟随 SDL_WINDOWEVENT_RESIZED<br>SDL_WINDOWEVENT_MINIMIZED：窗口已最小化<br>SDL_WINDOWEVENT_MAXIMIZED：窗口已最大化<br>SDL_WINDOWEVENT_RESTORED：窗口已恢复到正常大小和位置<br>SDL_WINDOWEVENT_ENTER：窗口已获得鼠标焦点<br>SDL_WINDOWEVENT_LEAVE：窗口失去了鼠标焦点<br>SDL_WINDOWEVENT_FOCUS_GAINED：窗口已获得键盘焦点<br>SDL_WINDOWEVENT_FOCUS_LOST：窗口失去键盘焦点<br>SDL_WINDOWEVENT_CLOSE：窗口管理器请求关闭窗口<br>SDL_WINDOWEVENT_TAKE_FOCUS：窗口正在被提供焦点（应该对其自身或子窗口执行 SDL_SetWindowInputFocus()，或者忽略）(&gt;&#x3D; SDL 2.0.5)<br>SDL_WINDOWEVENT_HIT_TEST：（应该对其自身或子窗口执行 SDL_SetWindowInputFocus()，或者忽略）(&gt;&#x3D; SDL 2.0.5)<br>SDL_WINDOWEVENT_ICCPROF_CHANGED：（应该对其自身或子窗口执行 SDL_SetWindowInputFocus()，或者忽略）(&gt;&#x3D; SDL 2.0.5)<br>SDL_WINDOWEVENT_DISPLAY_CHANGED：窗口已移动到显示 data1。 (&gt;&#x3D; SDL 2.0.18)</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_WindowEvent</title>
    <link href="/1999/01/07/SDL/Dictionary/SDL_WindowEvent/"/>
    <url>/1999/01/07/SDL/Dictionary/SDL_WindowEvent/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-WindowEvent"><a href="#SDL-WindowEvent" class="headerlink" title="SDL_WindowEvent"></a>SDL_WindowEvent</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_WindowEvent">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>包含窗口状态更改事件数据的结构。</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><p>Uint32 type: <a href="/1999/01/05/SDL/Dictionary/SDL_Event/" title="SDL_Event">SDL_WINDOWEVENT</a><br>Uint32 timestamp: 事件的时间戳<br>Uint32 windowID: 关联的窗口（如果有）<br>Uint8 event:<a href="/1999/01/07/SDL/Dictionary/SDL_WindowEventID/" title="SDL_WindowEventID">SDL_WindowEventID</a><br>Sint32 data1:事件相关数据<br>Sint32 data2:事件相关数据</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL_DELETE_指令集</title>
    <link href="/1999/01/07/SQL/MySQL/%E6%8C%87%E4%BB%A4%E9%9B%86/MySQL_DELETE_%E6%8C%87%E4%BB%A4%E9%9B%86/"/>
    <url>/1999/01/07/SQL/MySQL/%E6%8C%87%E4%BB%A4%E9%9B%86/MySQL_DELETE_%E6%8C%87%E4%BB%A4%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL-DELETE-指令集"><a href="#MySQL-DELETE-指令集" class="headerlink" title="MySQL_DELETE_指令集"></a>MySQL_DELETE_指令集</h1><span id="more"></span><h2 id="删除表的所有记录"><a href="#删除表的所有记录" class="headerlink" title="删除表的所有记录"></a>删除表的所有记录</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> 表名<br></code></pre></td></tr></table></figure><h2 id="删除表中符合条件的记录"><a href="#删除表中符合条件的记录" class="headerlink" title="删除表中符合条件的记录"></a>删除表中符合条件的记录</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">WHERE</span> 条件<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL_CREAT_指令集</title>
    <link href="/1999/01/07/SQL/MySQL/%E6%8C%87%E4%BB%A4%E9%9B%86/MySQL_CREAT_%E6%8C%87%E4%BB%A4%E9%9B%86/"/>
    <url>/1999/01/07/SQL/MySQL/%E6%8C%87%E4%BB%A4%E9%9B%86/MySQL_CREAT_%E6%8C%87%E4%BB%A4%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL-CREAT-指令集"><a href="#MySQL-CREAT-指令集" class="headerlink" title="MySQL_CREAT_指令集"></a>MySQL_CREAT_指令集</h1><span id="more"></span><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE 数据库名；<br></code></pre></td></tr></table></figure><h2 id="创键表"><a href="#创键表" class="headerlink" title="创键表"></a>创键表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名（列名<span class="hljs-number">1</span> &#123;<span class="hljs-operator">%</span> post_link MySQL基本概念 <span class="hljs-string">&#x27;数据类型1&#x27;</span> <span class="hljs-operator">%</span>&#125;, 列名<span class="hljs-number">2</span> &#123;<span class="hljs-operator">%</span> post_link MySQL基本概念 <span class="hljs-string">&#x27;数据类型2&#x27;</span> <span class="hljs-operator">%</span>&#125;...）；<br></code></pre></td></tr></table></figure><h2 id="设置主键"><a href="#设置主键" class="headerlink" title="设置主键"></a>设置主键</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名(列名 数据类型 <span class="hljs-keyword">PRIMARY</span> KEY，列名<span class="hljs-number">1</span> 数据类型...)；<br></code></pre></td></tr></table></figure><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置<a href="/1999/01/07/SQL/MySQL/%E6%8C%87%E4%BB%A4%E9%9B%86/MySQL%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/" title="MySQL基本概念">唯一键</a></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名(列名 数据类型 <span class="hljs-keyword">UNIQUE</span>，列名<span class="hljs-number">1</span> 数据类型...)；<br></code></pre></td></tr></table></figure><h2 id="自动连续编号的列"><a href="#自动连续编号的列" class="headerlink" title="自动连续编号的列"></a>自动连续编号的列</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名(列名 数据类型 AUTO_INCREMENT <span class="hljs-keyword">PRIMARY</span> KEY，列名<span class="hljs-number">1</span> 数据类型...)；<br></code></pre></td></tr></table></figure><h2 id="设置列的默认值"><a href="#设置列的默认值" class="headerlink" title="设置列的默认值"></a>设置列的默认值</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名(列名 数据类型 <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;默认值&#x27;</span>, ...)；<br></code></pre></td></tr></table></figure><h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> INDEX 索引名 <span class="hljs-keyword">ON</span> 表名(列名)；<br></code></pre></td></tr></table></figure><h2 id="复制表的列和数据类型"><a href="#复制表的列和数据类型" class="headerlink" title="复制表的列和数据类型"></a>复制表的列和数据类型</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 新表名 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 源表名；<br></code></pre></td></tr></table></figure><h2 id="仅复制表的列结构"><a href="#仅复制表的列结构" class="headerlink" title="仅复制表的列结构"></a>仅复制表的列结构</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 新表名 <span class="hljs-keyword">LIKE</span> 源表名；<br></code></pre></td></tr></table></figure><h2 id="复制表的记录"><a href="#复制表的记录" class="headerlink" title="复制表的记录"></a>复制表的记录</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 新表名 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 源表名<br></code></pre></td></tr></table></figure><h2 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> 视图名 <br>    <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> 列名 <br>    <span class="hljs-keyword">FROM</span> 表名; <br></code></pre></td></tr></table></figure><h2 id="替换虚图"><a href="#替换虚图" class="headerlink" title="替换虚图"></a>替换虚图</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-keyword">VIEW</span> 视图名<br>    <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> 列名 <br>    <span class="hljs-keyword">FROM</span> 表名; <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL_ALTER_指令集</title>
    <link href="/1999/01/07/SQL/MySQL/%E6%8C%87%E4%BB%A4%E9%9B%86/MySQL_ALTER_%E6%8C%87%E4%BB%A4%E9%9B%86/"/>
    <url>/1999/01/07/SQL/MySQL/%E6%8C%87%E4%BB%A4%E9%9B%86/MySQL_ALTER_%E6%8C%87%E4%BB%A4%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL-ALTER-指令集"><a href="#MySQL-ALTER-指令集" class="headerlink" title="MySQL_ALTER_指令集"></a>MySQL_ALTER_指令集</h1><span id="more"></span><h2 id="修改列的数据类型"><a href="#修改列的数据类型" class="headerlink" title="修改列的数据类型"></a>修改列的数据类型</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 MODIFY 列名 数据类型;<br></code></pre></td></tr></table></figure><h2 id="添加新建的列到最后"><a href="#添加新建的列到最后" class="headerlink" title="添加新建的列到最后"></a>添加新建的列到最后</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> 列名 数据类型;<br></code></pre></td></tr></table></figure><h2 id="添加新建的列到最前"><a href="#添加新建的列到最前" class="headerlink" title="添加新建的列到最前"></a>添加新建的列到最前</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> 列名 数据类型 <span class="hljs-keyword">FIRST</span>;<br></code></pre></td></tr></table></figure><h2 id="添加新建的列到目标列之后"><a href="#添加新建的列到目标列之后" class="headerlink" title="添加新建的列到目标列之后"></a>添加新建的列到目标列之后</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> 列名 数据类型 AFTER 目标列名;<br></code></pre></td></tr></table></figure><h2 id="修改列名和数据类型"><a href="#修改列名和数据类型" class="headerlink" title="修改列名和数据类型"></a>修改列名和数据类型</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 CHANGE 修改前的列名 修改后的列名 修改后的数据类型;<br></code></pre></td></tr></table></figure><h2 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> 列名;<br></code></pre></td></tr></table></figure><h2 id="设置连续编号的初始值"><a href="#设置连续编号的初始值" class="headerlink" title="设置连续编号的初始值"></a>设置连续编号的初始值</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h2 id="修改列使其获得默认值"><a href="#修改列使其获得默认值" class="headerlink" title="修改列使其获得默认值"></a>修改列使其获得默认值</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 MODIFY 列名 数据类型 <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;默认值&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="修改视图结构"><a href="#修改视图结构" class="headerlink" title="修改视图结构"></a>修改视图结构</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">VIEW</span> 视图名<br>    <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> 列名<br>    <span class="hljs-keyword">FROM</span> 表名;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL_DROP_指令集</title>
    <link href="/1999/01/07/SQL/MySQL/%E6%8C%87%E4%BB%A4%E9%9B%86/MySQL_DROP_%E6%8C%87%E4%BB%A4%E9%9B%86/"/>
    <url>/1999/01/07/SQL/MySQL/%E6%8C%87%E4%BB%A4%E9%9B%86/MySQL_DROP_%E6%8C%87%E4%BB%A4%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL-DROP-指令集"><a href="#MySQL-DROP-指令集" class="headerlink" title="MySQL_DROP_指令集"></a>MySQL_DROP_指令集</h1><span id="more"></span><h2 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> INDEX 索引名 <span class="hljs-keyword">ON</span> 表名;<br></code></pre></td></tr></table></figure><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> 表名;<br></code></pre></td></tr></table></figure><h2 id="删除表如果存在"><a href="#删除表如果存在" class="headerlink" title="删除表如果存在"></a>删除表如果存在</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> 表名;<br></code></pre></td></tr></table></figure><h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> DATABASE 数据库名;<br></code></pre></td></tr></table></figure><h2 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span> 视图名;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL_INSERT_指令集</title>
    <link href="/1999/01/07/SQL/MySQL/%E6%8C%87%E4%BB%A4%E9%9B%86/MySQL_INSERT_%E6%8C%87%E4%BB%A4%E9%9B%86/"/>
    <url>/1999/01/07/SQL/MySQL/%E6%8C%87%E4%BB%A4%E9%9B%86/MySQL_INSERT_%E6%8C%87%E4%BB%A4%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL-INSERT-指令集"><a href="#MySQL-INSERT-指令集" class="headerlink" title="MySQL_INSERT_指令集"></a>MySQL_INSERT_指令集</h1><span id="more"></span><h2 id="向表中插入数据"><a href="#向表中插入数据" class="headerlink" title="向表中插入数据"></a>向表中插入数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名 <span class="hljs-keyword">VALUES</span>(数据<span class="hljs-number">1</span>， 数据<span class="hljs-number">2</span> ...)；<br></code></pre></td></tr></table></figure><h2 id="指定表的列名插入单条记录"><a href="#指定表的列名插入单条记录" class="headerlink" title="指定表的列名插入单条记录"></a>指定表的列名插入单条记录</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名 (列名<span class="hljs-number">1</span>， 列名<span class="hljs-number">2.</span>..) <span class="hljs-keyword">VALUES</span>(数据<span class="hljs-number">1</span>， 数据<span class="hljs-number">2.</span>..)；<br></code></pre></td></tr></table></figure><h2 id="指定表的列名插入多条记录"><a href="#指定表的列名插入多条记录" class="headerlink" title="指定表的列名插入多条记录"></a>指定表的列名插入多条记录</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名 (列名<span class="hljs-number">1</span>， 列名<span class="hljs-number">2.</span>..) <span class="hljs-keyword">VALUES</span>(数据<span class="hljs-number">1</span>， 数据<span class="hljs-number">2.</span>..),(数据<span class="hljs-number">1</span>， 数据<span class="hljs-number">2.</span>..),(数据<span class="hljs-number">1</span>， 数据<span class="hljs-number">2.</span>..)；<br></code></pre></td></tr></table></figure><h2 id="复制表的记录"><a href="#复制表的记录" class="headerlink" title="复制表的记录"></a>复制表的记录</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 新表名 <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 源表名;<br></code></pre></td></tr></table></figure><h2 id="选择表的某一列复制记录"><a href="#选择表的某一列复制记录" class="headerlink" title="选择表的某一列复制记录"></a>选择表的某一列复制记录</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 新表名(列名) <span class="hljs-keyword">SELECT</span> 列名 <span class="hljs-keyword">FROM</span> 源表名;<br></code></pre></td></tr></table></figure><h2 id="向虚表中插入数据"><a href="#向虚表中插入数据" class="headerlink" title="向虚表中插入数据"></a>向虚表中插入数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 虚表名 <span class="hljs-keyword">VALUES</span>(列<span class="hljs-number">1</span>的值， 列<span class="hljs-number">2</span>的值...)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL其它指令集</title>
    <link href="/1999/01/07/SQL/MySQL/%E6%8C%87%E4%BB%A4%E9%9B%86/MySQL_JOIN_%E6%8C%87%E4%BB%A4%E9%9B%86/"/>
    <url>/1999/01/07/SQL/MySQL/%E6%8C%87%E4%BB%A4%E9%9B%86/MySQL_JOIN_%E6%8C%87%E4%BB%A4%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL其它指令集"><a href="#MySQL其它指令集" class="headerlink" title="MySQL其它指令集"></a>MySQL其它指令集</h1><span id="more"></span><h2 id="将一个表的两列内容合并起来-不重复"><a href="#将一个表的两列内容合并起来-不重复" class="headerlink" title="将一个表的两列内容合并起来(不重复)"></a>将一个表的两列内容合并起来(不重复)</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">SELECT 列名1<br>    FROM 表名1<br>JOIN 要连接的表2<br>    ON 表1.列名2=表2.列名3;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL_SELECT_指令集</title>
    <link href="/1999/01/07/SQL/MySQL/%E6%8C%87%E4%BB%A4%E9%9B%86/MySQL_SELECT_%E6%8C%87%E4%BB%A4%E9%9B%86/"/>
    <url>/1999/01/07/SQL/MySQL/%E6%8C%87%E4%BB%A4%E9%9B%86/MySQL_SELECT_%E6%8C%87%E4%BB%A4%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL-SELECT-指令集"><a href="#MySQL-SELECT-指令集" class="headerlink" title="MySQL_SELECT_指令集"></a>MySQL_SELECT_指令集</h1><span id="more"></span><h2 id="使用当前数据库"><a href="#使用当前数据库" class="headerlink" title="使用当前数据库"></a>使用当前数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> DATABASE();<br></code></pre></td></tr></table></figure><h2 id="显示各列数据"><a href="#显示各列数据" class="headerlink" title="显示各列数据"></a>显示各列数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 列名<span class="hljs-number">1</span>, 列名<span class="hljs-number">2.</span>..<span class="hljs-keyword">FROM</span> 表名;<br></code></pre></td></tr></table></figure><h2 id="改变列在表中的显示顺序"><a href="#改变列在表中的显示顺序" class="headerlink" title="改变列在表中的显示顺序"></a>改变列在表中的显示顺序</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 列名<span class="hljs-number">2</span>, 列名<span class="hljs-number">1</span> <span class="hljs-keyword">FROM</span> 表名;<br></code></pre></td></tr></table></figure><h2 id="AS指定列名的别名"><a href="#AS指定列名的别名" class="headerlink" title="AS指定列名的别名"></a>AS指定列名的别名</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 列名<span class="hljs-number">1</span> <span class="hljs-keyword">AS</span> 别名<span class="hljs-number">1</span>， 列名<span class="hljs-number">2</span> <span class="hljs-keyword">AS</span> 别名<span class="hljs-number">2</span> <span class="hljs-keyword">FROM</span> 表名;<br></code></pre></td></tr></table></figure><h2 id="指定列进行基本运算"><a href="#指定列进行基本运算" class="headerlink" title="指定列进行基本运算"></a>指定列进行基本运算</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 列<span class="hljs-number">1</span><span class="hljs-operator">*</span>常数 <span class="hljs-keyword">as</span> 列<span class="hljs-number">2</span> <span class="hljs-keyword">FROM</span> 表名;<br><span class="hljs-keyword">SELECT</span> 列<span class="hljs-number">1</span><span class="hljs-operator">+</span>常数 <span class="hljs-keyword">as</span> 列<span class="hljs-number">2</span> <span class="hljs-keyword">FROM</span> 表名;<br><span class="hljs-keyword">SELECT</span> 列<span class="hljs-number">1</span><span class="hljs-operator">*</span>列<span class="hljs-number">2</span> <span class="hljs-keyword">as</span> 列<span class="hljs-number">3</span> <span class="hljs-keyword">FROM</span> 表名;<br><span class="hljs-keyword">SELECT</span> 列<span class="hljs-number">1</span><span class="hljs-operator">*</span>列<span class="hljs-number">2</span> <span class="hljs-keyword">FROM</span> 表名;<br><span class="hljs-keyword">SELECT</span> 列<span class="hljs-number">1</span><span class="hljs-operator">+</span>列<span class="hljs-number">2</span> <span class="hljs-keyword">as</span> 列<span class="hljs-number">3</span> <span class="hljs-keyword">FROM</span> 表名;<br><span class="hljs-keyword">SELECT</span> 列<span class="hljs-number">1</span><span class="hljs-operator">+</span>列<span class="hljs-number">2</span> <span class="hljs-keyword">FROM</span> 表名;<br></code></pre></td></tr></table></figure><h2 id="AVG，SUM，COUNT指定列使用函数进行计算"><a href="#AVG，SUM，COUNT指定列使用函数进行计算" class="headerlink" title="AVG，SUM，COUNT指定列使用函数进行计算"></a>AVG，SUM，COUNT指定列使用函数进行计算</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(列名<span class="hljs-number">1</span>) <span class="hljs-keyword">FROM</span> 表名;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUM</span>(列名<span class="hljs-number">1</span>) <span class="hljs-keyword">FROM</span> 表名;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(列名<span class="hljs-number">1</span>) <span class="hljs-keyword">FROM</span> 表名;<br></code></pre></td></tr></table></figure><h2 id="VERSION显示MySQL服务器版本"><a href="#VERSION显示MySQL服务器版本" class="headerlink" title="VERSION显示MySQL服务器版本"></a>VERSION显示MySQL服务器版本</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> VERSION();<br></code></pre></td></tr></table></figure><h2 id="显示当前使用的数据库"><a href="#显示当前使用的数据库" class="headerlink" title="显示当前使用的数据库"></a>显示当前使用的数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> DATABASE;<br></code></pre></td></tr></table></figure><h2 id="USER显示当前用户"><a href="#USER显示当前用户" class="headerlink" title="USER显示当前用户"></a>USER显示当前用户</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">USER</span>();<br></code></pre></td></tr></table></figure><h2 id="CHARSET显示由参数指定的字符的字符编码"><a href="#CHARSET显示由参数指定的字符的字符编码" class="headerlink" title="CHARSET显示由参数指定的字符的字符编码"></a>CHARSET显示由参数指定的字符的字符编码</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> CHARSET(<span class="hljs-string">&#x27;字符&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="CONCAT显示连接列和字符"><a href="#CONCAT显示连接列和字符" class="headerlink" title="CONCAT显示连接列和字符"></a>CONCAT显示连接列和字符</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> CONCAT(列名<span class="hljs-number">1</span>，列名<span class="hljs-number">2</span>，<span class="hljs-string">&#x27;字符&#x27;</span>) <span class="hljs-keyword">FROM</span> 表名;<br></code></pre></td></tr></table></figure><h2 id="RIGHT显示列最右边第n个字符"><a href="#RIGHT显示列最右边第n个字符" class="headerlink" title="RIGHT显示列最右边第n个字符"></a>RIGHT显示列最右边第n个字符</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">RIGHT</span>(列名<span class="hljs-number">1</span>, n) <span class="hljs-keyword">FROM</span> 表名；<br></code></pre></td></tr></table></figure><h2 id="LEFT显示列最左边第n个字符"><a href="#LEFT显示列最左边第n个字符" class="headerlink" title="LEFT显示列最左边第n个字符"></a>LEFT显示列最左边第n个字符</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">LEFT</span>(列名<span class="hljs-number">1</span>, n) <span class="hljs-keyword">FROM</span> 表名；<br></code></pre></td></tr></table></figure><h2 id="SUBSTRING显示列从a至b字符-字符串从1开始"><a href="#SUBSTRING显示列从a至b字符-字符串从1开始" class="headerlink" title="SUBSTRING显示列从a至b字符(字符串从1开始)"></a>SUBSTRING显示列从a至b字符(字符串从1开始)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUBSTRING</span>(列名<span class="hljs-number">1</span>, a, b) <span class="hljs-keyword">FROM</span> 表名；<br></code></pre></td></tr></table></figure><h2 id="REPEAT显示重复的字符，重复值位列1的值"><a href="#REPEAT显示重复的字符，重复值位列1的值" class="headerlink" title="REPEAT显示重复的字符，重复值位列1的值"></a>REPEAT显示重复的字符，重复值位列1的值</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> REPEAT(<span class="hljs-string">&#x27;字符&#x27;</span>,列名<span class="hljs-number">1</span>) <span class="hljs-keyword">FROM</span> 表名；<br></code></pre></td></tr></table></figure><h2 id="REVERSE显示把列中的字符串倒着显示"><a href="#REVERSE显示把列中的字符串倒着显示" class="headerlink" title="REVERSE显示把列中的字符串倒着显示"></a>REVERSE显示把列中的字符串倒着显示</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> REVERSE(列名<span class="hljs-number">1</span>) <span class="hljs-keyword">FROM</span> 表名；<br></code></pre></td></tr></table></figure><h2 id="LIMIT筛选数字"><a href="#LIMIT筛选数字" class="headerlink" title="LIMIT筛选数字"></a>LIMIT筛选数字</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">SLECT <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表名 LIMIT 筛选阈值;<br></code></pre></td></tr></table></figure><h2 id="WHERE条件提取"><a href="#WHERE条件提取" class="headerlink" title="WHERE条件提取"></a>WHERE条件提取</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 列名 <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">WHERE</span> 条件;<br></code></pre></td></tr></table></figure><h2 id="LIKE模糊查询"><a href="#LIKE模糊查询" class="headerlink" title="LIKE模糊查询"></a>LIKE模糊查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>  <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">WHERE</span> 列名<span class="hljs-number">1</span> <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%1&#x27;</span>;<br></code></pre></td></tr></table></figure><p>参考<a href="/1999/01/07/SQL/MySQL/%E6%8C%87%E4%BB%A4%E9%9B%86/MySQL%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/" title="MySQL基本概念">MySQL基本概念</a>中的通配符</p><h2 id="NOT-LIKE"><a href="#NOT-LIKE" class="headerlink" title="NOT LIKE"></a>NOT LIKE</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>  <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">WHERE</span> 列名<span class="hljs-number">1</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%1&#x27;</span>;<br></code></pre></td></tr></table></figure><p>参考<a href="/1999/01/07/SQL/MySQL/%E6%8C%87%E4%BB%A4%E9%9B%86/MySQL%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/" title="MySQL基本概念">MySQL基本概念</a>中的通配符，效果与LIKE相反</p><h2 id="IS-NULL"><a href="#IS-NULL" class="headerlink" title="IS NULL"></a>IS NULL</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>  <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">WHERE</span> 列名<span class="hljs-number">1</span> <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></td></tr></table></figure><h2 id="IS-NOT-NULL"><a href="#IS-NOT-NULL" class="headerlink" title="IS NOT NULL"></a>IS NOT NULL</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>  <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">WHERE</span> 列名<span class="hljs-number">1</span> <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></td></tr></table></figure><h2 id="AND"><a href="#AND" class="headerlink" title="AND"></a>AND</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>  <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">WHERE</span> 条件<span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> 条件<span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>当和OR混合使用时AND优先级更高</p><h2 id="OR"><a href="#OR" class="headerlink" title="OR"></a>OR</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>  <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">WHERE</span> 条件<span class="hljs-number">1</span> <span class="hljs-keyword">OR</span> 条件<span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>当和AND混合使用时AND优先级更高</p><h2 id="CASE-WHEN"><a href="#CASE-WHEN" class="headerlink" title="CASE WHEN"></a>CASE WHEN</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CASE</span><br>    <span class="hljs-keyword">WHEN</span> 条件<span class="hljs-number">1</span> <span class="hljs-keyword">THEN</span> 的值<br>    <span class="hljs-keyword">WHEN</span> 条件<span class="hljs-number">2</span> <span class="hljs-keyword">THEN</span> 的值<br>    <span class="hljs-keyword">WHEN</span> 条件<span class="hljs-number">3</span> <span class="hljs-keyword">THEN</span> 的值<br>...<br><span class="hljs-keyword">ELSE</span> 不满足所有条件时的值<br><span class="hljs-keyword">END</span>;<br></code></pre></td></tr></table></figure><p>结合SELECT使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 列<span class="hljs-number">1</span>, 列<span class="hljs-number">2</span>, <br>    <span class="hljs-keyword">CASE</span><br>        <span class="hljs-keyword">WHEN</span> 条件<span class="hljs-number">1</span> <span class="hljs-keyword">THEN</span> 的值<br>        <span class="hljs-keyword">WHEN</span> 条件<span class="hljs-number">2</span> <span class="hljs-keyword">THEN</span> 的值<br>        <span class="hljs-keyword">WHEN</span> 条件<span class="hljs-number">3</span> <span class="hljs-keyword">THEN</span> 的值<br>    ...<br>    <span class="hljs-keyword">ELSE</span> 不满足所有条件时的值<br>    <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> 列<span class="hljs-number">3</span><br><span class="hljs-keyword">FROM</span> 表名;<br></code></pre></td></tr></table></figure><h2 id="ORDER-BY排序"><a href="#ORDER-BY排序" class="headerlink" title="ORDER BY排序"></a>ORDER BY排序</h2><h3 id="升序"><a href="#升序" class="headerlink" title="升序"></a>升序</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>  列名 <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 排序参照的列;<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>  列名 <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 排序参照的列 <span class="hljs-keyword">ASC</span>;<br></code></pre></td></tr></table></figure><h3 id="降序"><a href="#降序" class="headerlink" title="降序"></a>降序</h3><p>按降序排序并且保留显示的个数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>  列名 <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 排序参照的列 <span class="hljs-keyword">DESC</span> LIMIT n;<br></code></pre></td></tr></table></figure><p>按降序排序并且指定保留n个数。保留范围即开始(包括开始)向下数m个。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>  列名 <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 排序参照的列 <span class="hljs-keyword">DESC</span> LIMIT n <span class="hljs-keyword">OFFSET</span> m;<br></code></pre></td></tr></table></figure><h2 id="GROUP-BY分组"><a href="#GROUP-BY分组" class="headerlink" title="GROUP BY分组"></a>GROUP BY分组</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>  列名 <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 用于分组参照的列;<br></code></pre></td></tr></table></figure><h3 id="计算参考列各组的数目"><a href="#计算参考列各组的数目" class="headerlink" title="计算参考列各组的数目"></a>计算参考列各组的数目</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <br>    列名<span class="hljs-number">1</span>, <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> 个数<br><span class="hljs-keyword">FROM</span> 表名 <br>    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 列名<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h3 id="计算参考列各组的总和"><a href="#计算参考列各组的总和" class="headerlink" title="计算参考列各组的总和"></a>计算参考列各组的总和</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <br>    列名<span class="hljs-number">1</span>, <span class="hljs-built_in">SUM</span>(列名<span class="hljs-number">2</span>) <span class="hljs-keyword">AS</span> 合计<br><span class="hljs-keyword">FROM</span> 表名 <br>    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 列名<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h3 id="计算参考列各组的平均值"><a href="#计算参考列各组的平均值" class="headerlink" title="计算参考列各组的平均值"></a>计算参考列各组的平均值</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <br>    列名<span class="hljs-number">1</span>, <span class="hljs-built_in">AVG</span>(列名<span class="hljs-number">2</span>) <span class="hljs-keyword">AS</span> 均值<br><span class="hljs-keyword">FROM</span> 表名 <br>    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 列名<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h3 id="显示分组并筛选符合条件的组"><a href="#显示分组并筛选符合条件的组" class="headerlink" title="显示分组并筛选符合条件的组"></a>显示分组并筛选符合条件的组</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <br>    列名<span class="hljs-number">1</span>, <span class="hljs-built_in">SUM</span>(列名<span class="hljs-number">2</span>) <span class="hljs-keyword">AS</span> 合计<br><span class="hljs-keyword">FROM</span> 表名 <br>    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 列名<span class="hljs-number">1</span><br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">SUM</span>(列名<span class="hljs-number">2</span>)<span class="hljs-operator">&gt;=</span><span class="hljs-number">200</span>;<br></code></pre></td></tr></table></figure><h3 id="筛选符合条件的组并计算各组的均值"><a href="#筛选符合条件的组并计算各组的均值" class="headerlink" title="筛选符合条件的组并计算各组的均值"></a>筛选符合条件的组并计算各组的均值</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <br>    列名<span class="hljs-number">1</span>, <span class="hljs-built_in">AVG</span>(列名<span class="hljs-number">2</span>)<br><span class="hljs-keyword">FROM</span> 表名 <br>    <span class="hljs-keyword">WHERE</span> 列名<span class="hljs-number">2</span> <span class="hljs-operator">&gt;=</span> 条件<span class="hljs-number">1</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 列名<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h3 id="删选，分组，排序"><a href="#删选，分组，排序" class="headerlink" title="删选，分组，排序"></a>删选，分组，排序</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <br>    列名<span class="hljs-number">1</span>, <span class="hljs-built_in">AVG</span>(列名<span class="hljs-number">2</span>)<br><span class="hljs-keyword">FROM</span> 表名 <br>    <span class="hljs-keyword">WHERE</span> 列名<span class="hljs-number">2</span> <span class="hljs-operator">&gt;=</span> 条件<span class="hljs-number">1</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 列名<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-built_in">AVG</span>(列名<span class="hljs-number">2</span>)<br><span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 显示的列名 <span class="hljs-keyword">FROM</span> 表名<br>    <span class="hljs-keyword">WHERE</span> 列名 <span class="hljs-keyword">IN</span> (通过子查询提取的列);<br></code></pre></td></tr></table></figure><h3 id="找表中的最大值"><a href="#找表中的最大值" class="headerlink" title="找表中的最大值"></a>找表中的最大值</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br>    <span class="hljs-keyword">FROM</span> 表名<br><span class="hljs-keyword">WHERE</span> 列名<br>    <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(列名) <span class="hljs-keyword">FROM</span> 表名)<br></code></pre></td></tr></table></figure><h3 id="找大于平均值的记录"><a href="#找大于平均值的记录" class="headerlink" title="找大于平均值的记录"></a>找大于平均值的记录</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br>    <span class="hljs-keyword">FROM</span> 表名<br><span class="hljs-keyword">WHERE</span> 列名<br>    <span class="hljs-operator">&gt;=</span>(<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(列名) <span class="hljs-keyword">FROM</span> 表名)；<br></code></pre></td></tr></table></figure><h3 id="EXISTS"><a href="#EXISTS" class="headerlink" title="EXISTS"></a>EXISTS</h3><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br>    <span class="hljs-keyword">FROM</span> tb1<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">EXISTS</span><br>    (<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> tb <span class="hljs-keyword">WHERE</span> tb.col <span class="hljs-operator">=</span> tb1.col);<br></code></pre></td></tr></table></figure><h3 id="NOT-EXISTS"><a href="#NOT-EXISTS" class="headerlink" title="NOT EXISTS"></a>NOT EXISTS</h3><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br>    <span class="hljs-keyword">FROM</span> tb1<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span><br>    (<span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> tb <span class="hljs-keyword">WHERE</span> tb.col <span class="hljs-operator">=</span> tb1.col);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL_DESC_指令集</title>
    <link href="/1999/01/07/SQL/MySQL/%E6%8C%87%E4%BB%A4%E9%9B%86/MySQL_DESC_%E6%8C%87%E4%BB%A4%E9%9B%86/"/>
    <url>/1999/01/07/SQL/MySQL/%E6%8C%87%E4%BB%A4%E9%9B%86/MySQL_DESC_%E6%8C%87%E4%BB%A4%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL-DESC-指令集"><a href="#MySQL-DESC-指令集" class="headerlink" title="MySQL_DESC_指令集"></a>MySQL_DESC_指令集</h1><span id="more"></span><h2 id="显示表的列结构"><a href="#显示表的列结构" class="headerlink" title="显示表的列结构"></a>显示表的列结构</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DESC</span> 表名；<br></code></pre></td></tr></table></figure><h2 id="显示视图的列结构"><a href="#显示视图的列结构" class="headerlink" title="显示视图的列结构"></a>显示视图的列结构</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DESC</span> 视图名；<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL_SHOW_指令集</title>
    <link href="/1999/01/07/SQL/MySQL/%E6%8C%87%E4%BB%A4%E9%9B%86/MySQL_SHOW_%E6%8C%87%E4%BB%A4%E9%9B%86%20/"/>
    <url>/1999/01/07/SQL/MySQL/%E6%8C%87%E4%BB%A4%E9%9B%86/MySQL_SHOW_%E6%8C%87%E4%BB%A4%E9%9B%86%20/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL-SHOW-指令集"><a href="#MySQL-SHOW-指令集" class="headerlink" title="MySQL_SHOW_指令集"></a>MySQL_SHOW_指令集</h1><span id="more"></span><h2 id="显示数据库"><a href="#显示数据库" class="headerlink" title="显示数据库"></a>显示数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> DATABASES;<br></code></pre></td></tr></table></figure><h2 id="显示所有表"><a href="#显示所有表" class="headerlink" title="显示所有表"></a>显示所有表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> TABLES;<br></code></pre></td></tr></table></figure><h2 id="确认索引"><a href="#确认索引" class="headerlink" title="确认索引"></a>确认索引</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> INDEX <span class="hljs-keyword">FROM</span> 表名;<br></code></pre></td></tr></table></figure><h2 id="确认存在的视图"><a href="#确认存在的视图" class="headerlink" title="确认存在的视图"></a>确认存在的视图</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> TABLES;<br></code></pre></td></tr></table></figure><h2 id="显示视图的详细信息"><a href="#显示视图的详细信息" class="headerlink" title="显示视图的详细信息"></a>显示视图的详细信息</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> 视图名;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL_UPDATE_指令集</title>
    <link href="/1999/01/07/SQL/MySQL/%E6%8C%87%E4%BB%A4%E9%9B%86/MySQL_UPDATE_%E6%8C%87%E4%BB%A4%E9%9B%86/"/>
    <url>/1999/01/07/SQL/MySQL/%E6%8C%87%E4%BB%A4%E9%9B%86/MySQL_UPDATE_%E6%8C%87%E4%BB%A4%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL-UPDATE-指令集"><a href="#MySQL-UPDATE-指令集" class="headerlink" title="MySQL_UPDATE_指令集"></a>MySQL_UPDATE_指令集</h1><span id="more"></span><h2 id="修改列的所有记录"><a href="#修改列的所有记录" class="headerlink" title="修改列的所有记录"></a>修改列的所有记录</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> 表名 <span class="hljs-keyword">SET</span> 列名 <span class="hljs-operator">=</span> 需要设置的值;<br></code></pre></td></tr></table></figure><h3 id="修改列中符合条件的记录"><a href="#修改列中符合条件的记录" class="headerlink" title="修改列中符合条件的记录"></a>修改列中符合条件的记录</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> 表名 <span class="hljs-keyword">SET</span> 列名 <span class="hljs-operator">=</span> 需要设置的值 <span class="hljs-keyword">WHERE</span> 条件;<br></code></pre></td></tr></table></figure><h3 id="修改列中排列前N的记录"><a href="#修改列中排列前N的记录" class="headerlink" title="修改列中排列前N的记录"></a>修改列中排列前N的记录</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> 表名 <br>    <span class="hljs-keyword">SET</span> 列名 <span class="hljs-operator">=</span> 需要设置的值 <br>ORDERED <span class="hljs-keyword">BY</span> 列名<span class="hljs-number">1</span><br>    LIMIT N；<br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> 视图名 <span class="hljs-keyword">SET</span> 列名 <span class="hljs-operator">=</span> 需要设置的值 <span class="hljs-keyword">WHERE</span> 条件;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL功能函数</title>
    <link href="/1999/01/07/SQL/MySQL/%E6%8C%87%E4%BB%A4%E9%9B%86/MySQL%E5%8A%9F%E8%83%BD%E5%87%BD%E6%95%B0/"/>
    <url>/1999/01/07/SQL/MySQL/%E6%8C%87%E4%BB%A4%E9%9B%86/MySQL%E5%8A%9F%E8%83%BD%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL功能函数"><a href="#MySQL功能函数" class="headerlink" title="MySQL功能函数"></a>MySQL功能函数</h1><span id="more"></span><h2 id="NOW-显示当前时间"><a href="#NOW-显示当前时间" class="headerlink" title="NOW()显示当前时间"></a>NOW()显示当前时间</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名 (列名<span class="hljs-number">1</span> 数据类型<span class="hljs-number">1</span> AUTO_INCREMENT <span class="hljs-keyword">PRIMARY</span> KEY, 列名<span class="hljs-number">2</span> DATETIME)；<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名 (列名<span class="hljs-number">2</span>) <span class="hljs-keyword">VALUES</span>(now());<br></code></pre></td></tr></table></figure><h2 id="LIMIT筛选数字"><a href="#LIMIT筛选数字" class="headerlink" title="LIMIT筛选数字"></a>LIMIT筛选数字</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">SLECT <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表名 LIMIT 筛选阈值;<br></code></pre></td></tr></table></figure><h2 id="WHERE条件提取"><a href="#WHERE条件提取" class="headerlink" title="WHERE条件提取"></a>WHERE条件提取</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 列名 <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">WHERE</span> 条件;<br></code></pre></td></tr></table></figure><h2 id="LIKE模糊查询"><a href="#LIKE模糊查询" class="headerlink" title="LIKE模糊查询"></a>LIKE模糊查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>  <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">WHERE</span> 列名<span class="hljs-number">1</span> <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%1&#x27;</span>;<br></code></pre></td></tr></table></figure><p>参考<a href="/1999/01/07/SQL/MySQL/%E6%8C%87%E4%BB%A4%E9%9B%86/MySQL%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/" title="MySQL基本概念">MySQL基本概念</a>中的通配符</p><h2 id="NOT-LIKE"><a href="#NOT-LIKE" class="headerlink" title="NOT LIKE"></a>NOT LIKE</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>  <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">WHERE</span> 列名<span class="hljs-number">1</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%1&#x27;</span>;<br></code></pre></td></tr></table></figure><p>参考<a href="/1999/01/07/SQL/MySQL/%E6%8C%87%E4%BB%A4%E9%9B%86/MySQL%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/" title="MySQL基本概念">MySQL基本概念</a>中的通配符，效果与LIKE相反</p><h2 id="IS-NULL"><a href="#IS-NULL" class="headerlink" title="IS NULL"></a>IS NULL</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>  <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">WHERE</span> 列名<span class="hljs-number">1</span> <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></td></tr></table></figure><h2 id="IS-NOT-NULL"><a href="#IS-NOT-NULL" class="headerlink" title="IS NOT NULL"></a>IS NOT NULL</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>  <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">WHERE</span> 列名<span class="hljs-number">1</span> <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></td></tr></table></figure><h2 id="AND"><a href="#AND" class="headerlink" title="AND"></a>AND</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>  <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">WHERE</span> 条件<span class="hljs-number">1</span> <span class="hljs-keyword">AND</span> 条件<span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>当和OR混合使用时AND优先级更高</p><h2 id="OR"><a href="#OR" class="headerlink" title="OR"></a>OR</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>  <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">WHERE</span> 条件<span class="hljs-number">1</span> <span class="hljs-keyword">OR</span> 条件<span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>当和AND混合使用时AND优先级更高</p><h2 id="CASE-WHEN"><a href="#CASE-WHEN" class="headerlink" title="CASE WHEN"></a>CASE WHEN</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CASE</span><br>    <span class="hljs-keyword">WHEN</span> 条件<span class="hljs-number">1</span> <span class="hljs-keyword">THEN</span> 的值<br>    <span class="hljs-keyword">WHEN</span> 条件<span class="hljs-number">2</span> <span class="hljs-keyword">THEN</span> 的值<br>    <span class="hljs-keyword">WHEN</span> 条件<span class="hljs-number">3</span> <span class="hljs-keyword">THEN</span> 的值<br>...<br><span class="hljs-keyword">ELSE</span> 不满足所有条件时的值<br><span class="hljs-keyword">END</span><br></code></pre></td></tr></table></figure><p>结合SELECT使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 列<span class="hljs-number">1</span>, 列<span class="hljs-number">2</span>, <br>    <span class="hljs-keyword">CASE</span><br>        <span class="hljs-keyword">WHEN</span> 条件<span class="hljs-number">1</span> <span class="hljs-keyword">THEN</span> 的值<br>        <span class="hljs-keyword">WHEN</span> 条件<span class="hljs-number">2</span> <span class="hljs-keyword">THEN</span> 的值<br>        <span class="hljs-keyword">WHEN</span> 条件<span class="hljs-number">3</span> <span class="hljs-keyword">THEN</span> 的值<br>    ...<br>    <span class="hljs-keyword">ELSE</span> 不满足所有条件时的值<br>    <span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> 列<span class="hljs-number">3</span><br><span class="hljs-keyword">FROM</span> 表名;<br></code></pre></td></tr></table></figure><h2 id="AS"><a href="#AS" class="headerlink" title="AS"></a>AS</h2><h3 id="给表添加别名"><a href="#给表添加别名" class="headerlink" title="给表添加别名"></a>给表添加别名</h3><p>表名 AS 别名</p><h2 id="USING"><a href="#USING" class="headerlink" title="USING"></a>USING</h2><h3 id="简化ON的使用-合并两表"><a href="#简化ON的使用-合并两表" class="headerlink" title="简化ON的使用(合并两表)"></a>简化ON的使用(合并两表)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 列名<span class="hljs-number">1</span><br>    <span class="hljs-keyword">FROM</span> 表名<span class="hljs-number">1</span><br><span class="hljs-keyword">JOIN</span> 表名<span class="hljs-number">2</span><br>    <span class="hljs-keyword">USING</span>(列名<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h2 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h2><h3 id="将两个表的内容合并起来"><a href="#将两个表的内容合并起来" class="headerlink" title="将两个表的内容合并起来"></a>将两个表的内容合并起来</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">    <span class="hljs-keyword">SELECT</span> <br>        列名<span class="hljs-number">1</span><br>    <span class="hljs-keyword">FROM</span><br>        表名<span class="hljs-number">1</span><br><span class="hljs-keyword">UNION</span><br>    <span class="hljs-keyword">SELECT</span><br>        列名<span class="hljs-number">2</span><br>    <span class="hljs-keyword">FROM</span> <br>        表名<span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><h3 id="将一个表的两列内容合并起来-不重复"><a href="#将一个表的两列内容合并起来-不重复" class="headerlink" title="将一个表的两列内容合并起来(不重复)"></a>将一个表的两列内容合并起来(不重复)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">    (<span class="hljs-keyword">SELECT</span> 列名 <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">WHERE</span> 条件<span class="hljs-number">1</span>)<br><span class="hljs-keyword">UNION</span><br>    (<span class="hljs-keyword">SELECT</span> 列名 <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">WHERE</span> 条件<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h3 id="将一个表的两列内容合并起来-重复"><a href="#将一个表的两列内容合并起来-重复" class="headerlink" title="将一个表的两列内容合并起来(重复)"></a>将一个表的两列内容合并起来(重复)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">    (<span class="hljs-keyword">SELECT</span> 列名 <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">WHERE</span> 条件<span class="hljs-number">1</span>)<br><span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span><br>    (<span class="hljs-keyword">SELECT</span> 列名 <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">WHERE</span> 条件<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="JOIN"><a href="#JOIN" class="headerlink" title="JOIN"></a>JOIN</h2><h3 id="内连接：即与连接键不匹配就会忽略内容"><a href="#内连接：即与连接键不匹配就会忽略内容" class="headerlink" title="内连接：即与连接键不匹配就会忽略内容"></a>内连接：即与连接键不匹配就会忽略内容</h3><h4 id="将一个表的两列内容合并起来-不重复-1"><a href="#将一个表的两列内容合并起来-不重复-1" class="headerlink" title="将一个表的两列内容合并起来(不重复)"></a>将一个表的两列内容合并起来(不重复)</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 列名<span class="hljs-number">1</span><br>    <span class="hljs-keyword">FROM</span> 表名<span class="hljs-number">1</span><br><span class="hljs-keyword">JOIN</span> 要连接的表<span class="hljs-number">2</span><br>    <span class="hljs-keyword">ON</span> 表<span class="hljs-number">1.</span>列名<span class="hljs-number">2</span><span class="hljs-operator">=</span>表<span class="hljs-number">2.</span>列名<span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><h4 id="对多个表进行连接"><a href="#对多个表进行连接" class="headerlink" title="对多个表进行连接"></a>对多个表进行连接</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    需要连接的列<br><span class="hljs-keyword">FROM</span><br>    表名<span class="hljs-number">1</span><br><span class="hljs-keyword">JOIN</span> <br>    表名<span class="hljs-number">2</span><br><span class="hljs-keyword">USING</span>(表<span class="hljs-number">2</span>连接列名)<br><span class="hljs-keyword">JOIN</span><br>    表名<span class="hljs-number">3</span><br><span class="hljs-keyword">USING</span>(表<span class="hljs-number">3</span>连接列名);<br></code></pre></td></tr></table></figure><h3 id="外连接：即使与连接键不匹配，外连接也会提取另一个表中的所有记录"><a href="#外连接：即使与连接键不匹配，外连接也会提取另一个表中的所有记录" class="headerlink" title="外连接：即使与连接键不匹配，外连接也会提取另一个表中的所有记录"></a>外连接：即使与连接键不匹配，外连接也会提取另一个表中的所有记录</h3><h4 id="左外连接-LEFT-JOIN-不会忽略被连接表中的内容"><a href="#左外连接-LEFT-JOIN-不会忽略被连接表中的内容" class="headerlink" title="左外连接(LEFT JOIN):不会忽略被连接表中的内容"></a>左外连接(LEFT JOIN):不会忽略被连接表中的内容</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 需要连接的列<br>    <span class="hljs-keyword">FROM</span> 被连接的表<span class="hljs-number">1</span><br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> 要连接的表<span class="hljs-number">2</span><br>    <span class="hljs-keyword">ON</span> 表<span class="hljs-number">1.</span>列名<span class="hljs-number">2</span><span class="hljs-operator">=</span>表<span class="hljs-number">2.</span>列名<span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><h4 id="右外连接-RIGHT-JOIN-不会忽略要连接表中的内容"><a href="#右外连接-RIGHT-JOIN-不会忽略要连接表中的内容" class="headerlink" title="右外连接(RIGHT JOIN):不会忽略要连接表中的内容"></a>右外连接(RIGHT JOIN):不会忽略要连接表中的内容</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 需要连接的列<br>    <span class="hljs-keyword">FROM</span> 被连接的表<span class="hljs-number">1</span><br><span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> 要连接的表<span class="hljs-number">2</span><br>    <span class="hljs-keyword">ON</span> 表<span class="hljs-number">1.</span>列名<span class="hljs-number">2</span><span class="hljs-operator">=</span>表<span class="hljs-number">2.</span>列名<span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><h3 id="自连接-按列名显示全部组合"><a href="#自连接-按列名显示全部组合" class="headerlink" title="自连接(按列名显示全部组合)"></a>自连接(按列名显示全部组合)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 列名 <br>    <span class="hljs-keyword">FROM</span> 表名 <br><span class="hljs-keyword">AS</span> 别名<span class="hljs-number">1</span><br>    <span class="hljs-keyword">JOIN</span> 表名<br><span class="hljs-keyword">AS</span> 别名<span class="hljs-number">2</span>;    <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL其它指令集</title>
    <link href="/1999/01/07/SQL/MySQL/%E6%8C%87%E4%BB%A4%E9%9B%86/MySQL%E5%85%B6%E5%AE%83%E6%8C%87%E4%BB%A4%E9%9B%86/"/>
    <url>/1999/01/07/SQL/MySQL/%E6%8C%87%E4%BB%A4%E9%9B%86/MySQL%E5%85%B6%E5%AE%83%E6%8C%87%E4%BB%A4%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL其它指令集"><a href="#MySQL其它指令集" class="headerlink" title="MySQL其它指令集"></a>MySQL其它指令集</h1><span id="more"></span><h2 id="指定使用的数据库"><a href="#指定使用的数据库" class="headerlink" title="指定使用的数据库"></a>指定使用的数据库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">use 数据库名<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL基本概念</title>
    <link href="/1999/01/07/SQL/MySQL/%E6%8C%87%E4%BB%A4%E9%9B%86/MySQL%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <url>/1999/01/07/SQL/MySQL/%E6%8C%87%E4%BB%A4%E9%9B%86/MySQL%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL基本概念"><a href="#MySQL基本概念" class="headerlink" title="MySQL基本概念"></a>MySQL基本概念</h1><span id="more"></span><h2 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h2><p>数据表中每列的列名</p><h2 id="列"><a href="#列" class="headerlink" title="列"></a>列</h2><p>数据表中每列列名下具体的数据</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>表中每列存的数据种类</p><h3 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h3><table>    <tr>        <td>数据类型</td>         <td>含义</td>         <td>对应范围</td>     </tr>    <tr>        <td>INT</td>         <td>有限范围内的整数</td>         <td>-2147483648 ~ 2147483647</td>     </tr>    <tr>        <td>TINYINT</td>         <td>极小的整数</td>         <td>-128 ~ 127</td>     </tr>    <tr>        <td>SMALLINT</td>         <td>小整数</td>         <td>-32768 ~ 32767</td>     </tr>    <tr>        <td>MEDIUMINT</td>         <td>中等整数</td>         <td>-8388608 ~ 8388607</td>     </tr>    <tr>        <td>BIGINT</td>         <td>大整数</td>         <td>-9223372036854775808 ~ 9223372036854775807</td>     </tr>    <tr>        <td>FLOAT</td>         <td>单精度浮点数</td>         <td>-3.402823466E38 ~ -1.175494351E-38，0，1.175494351E-38 ~ 3.402823466E38</td>     </tr>    <tr>        <td>DOUBLE</td>         <td>双精度浮点数</td>         <td>-1.7976931348623157E+308 ~ -2.2250738585072014E-308，0，2.2250738585072014E-308 ~ 1.7976931348623157E+308</td>     </tr>    <tr>        <td>DECIMAL</td>         <td>精确小数</td>         <td>小数点中的最大位数可以指定不大于65的值</td>     </tr></table><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><table>    <tr>        <td>数据类型</td>         <td>含义</td>         <td>对应范围</td>     </tr>    <tr>        <td>CHAR</td>         <td>固定长度字符串</td>         <td>长度不超过255</td>     </tr>    <tr>        <td>VARCHAR</td>         <td>可变长度字符串</td>         <td>1 ~ 65532字节，字符长度取决于使用的字符编码（没有字符编码的情况下为空格）</td>     </tr>    <tr>        <td>TEXT</td>         <td>长文本字符串</td>         <td>长度不超过65535个字符</td>     </tr>    <tr>        <td>LONGTEXT</td>         <td>极长的文本字符串</td>         <td>长度不超过4294967295</td>     </tr></table>注：INSERT INTO tb1B (name) VALUES ('\'内容'\'); 其中对\进行了转义<h3 id="日期与时间类型"><a href="#日期与时间类型" class="headerlink" title="日期与时间类型"></a>日期与时间类型</h3><table>    <tr>        <td>DATETIME</td>         <td>日期和时间</td>         <td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td>     </tr>    <tr>        <td>DATE</td>         <td>日期</td>         <td>1000-01-01 ~ 9999-12-31</td>     </tr>    <tr>        <td>YEAR</td>         <td>年</td>         <td>1901 ~ 2155(4位时)，1970 ~ 2069(70 ~ 69)(2位时) </td>     </tr>    <tr>        <td>TIME</td>         <td>时间</td>         <td>-838:59:59 ~ 838:59:59</td>     </tr></table><h2 id="唯一键"><a href="#唯一键" class="headerlink" title="唯一键"></a>唯一键</h2><p>不允许重复的类属性</p><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><table>    <tr>        <td>比较运算符</td>         <td>含义</td>     </tr>    <tr>        <td>=</td>         <td>等于</td>     </tr>    <tr>        <td>></td>         <td>大于</td>     </tr>    <tr>        <td>大于等于</td>         <td>>=</td>     </tr>    <tr>        <td>小于</td>         <td><</td>     </tr>    <tr>        <td>小于等于</td>         <td><=</td>     </tr>    <tr>        <td>不等于</td>         <td><></td>     </tr>    <tr>        <td>a IN b</td>         <td>a在b列表中</td>     </tr>    <tr>        <td>a NOT IN b</td>         <td>a不在b列表中</td>     </tr>    <tr>        <td>a BETWEEN b AND c</td>         <td>a在b到c之间</td>     </tr>    <tr>        <td>a NOT BETWEEN b AND c</td>         <td>a不在b到c之间</td>     </tr></table><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><table>    <tr>        <td>通配符</td>         <td>含义</td>     </tr>    <tr>        <td>%</td>         <td>任意字符串</td>     </tr>    <tr>        <td>_</td>         <td>任意一个字符</td>     </tr></table><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>将SELECT的结果像表一样保留下来的虚表。</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ol><li>如果基表更新，视图也会更新。</li><li>只有插入符合虚表创建条件的值时虚表才会更新。</li></ol>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL用户权限指令集</title>
    <link href="/1999/01/07/SQL/MySQL/%E6%8C%87%E4%BB%A4%E9%9B%86/MySQL%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E6%8C%87%E4%BB%A4%E9%9B%86/"/>
    <url>/1999/01/07/SQL/MySQL/%E6%8C%87%E4%BB%A4%E9%9B%86/MySQL%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E6%8C%87%E4%BB%A4%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL用户权限指令集"><a href="#MySQL用户权限指令集" class="headerlink" title="MySQL用户权限指令集"></a>MySQL用户权限指令集</h1><span id="more"></span><h2 id="mysql修改密码-mysql监视器端"><a href="#mysql修改密码-mysql监视器端" class="headerlink" title="mysql修改密码(mysql监视器端)"></a>mysql修改密码(mysql监视器端)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;用户名&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;新密码&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="mysql修改用户名-mysql监视器端"><a href="#mysql修改用户名-mysql监视器端" class="headerlink" title="mysql修改用户名(mysql监视器端)"></a>mysql修改用户名(mysql监视器端)</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">use mysql;  选择数据库<br>update user set user=&quot;新用户名&quot; where user=&quot;旧用户名&quot;;<br>flush privileges;    刷新权限<br>exit<br></code></pre></td></tr></table></figure><h2 id="mysql登录监视器"><a href="#mysql登录监视器" class="headerlink" title="mysql登录监视器"></a>mysql登录监视器</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysql -u root -p<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_BlitSurface</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_BlitSurface/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_BlitSurface/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-BlitSurface"><a href="#SDL-BlitSurface" class="headerlink" title="SDL_BlitSurface"></a>SDL_BlitSurface</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_BlitSurface">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>使用此功能可以将surface快速复制到目标surface。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_BlitSurface</span><span class="hljs-params">(SDL_Surface* src, <span class="hljs-type">const</span> SDL_Rect* srcrect, SDL_Surface* dst,SDL_Rect*dstrect)</span></span><br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src: 要从中复制的 SDL_Surface 结构<br>srcrect: 表示要复制的矩形的 SDL_Rect 结构，或 NULL 来复制整个屏幕<br>dst: 作为 blit 目标的 SDL_Surface 结构<br>dstrect: 表示复制到的矩形的 SDL_Rect 结构</p><p>关于SDL_Rect的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_Rect/" title="SDL_Rect">SDL_Rect</a><br>关于SDL_Surface的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_Surface/" title="SDL_Surface">SDL_Surface</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果 blit 成功，则返回 0；如果失败，则返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_Color</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_Color/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_Color/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-Color"><a href="#SDL-Color" class="headerlink" title="SDL_Color"></a>SDL_Color</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_Color">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>代表颜色的结构。</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><ol><li>Uint8 r: 0-255 范围内的红色分量</li><li>Uint8 g: 0-255 范围内的绿色分量</li><li>Uint8 b: 0-255 范围内的蓝色分量</li><li>Uint8 a: 0-255 范围内的阿尔法分量</li></ol>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_ConvertSurface</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_ConvertSurface/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_ConvertSurface/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-ConvertSurface"><a href="#SDL-ConvertSurface" class="headerlink" title="SDL_ConvertSurface"></a>SDL_ConvertSurface</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_ConvertSurface">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>将一个现有的surface复制到一个指定格式的新surface</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Surface* <span class="hljs-title">SDL_ConvertSurface</span><span class="hljs-params">(SDL_Surface * src, <span class="hljs-type">const</span> SDL_PixelFormat * fmt, Uint32 flags)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src: 需要转化的surface<br>fmt：新屏幕使用的SDL_PixelFormat结构<br>flags: 已被废弃，应始终设为0</p><p>关于SDL_PixelFormat的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_PixelFormat/" title="SDL_PixelFormat">SDL_PixelFormat</a><br>关于SDL_Surface的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_Surface/" title="SDL_Surface">SDL_Surface</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回创建的新SDL_Surface结构，如果失败则返回NULL；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_FillRects</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_FillRects/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_FillRects/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-FillRects"><a href="#SDL-FillRects" class="headerlink" title="SDL_FillRects"></a>SDL_FillRects</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_FillRects">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>使用特定颜色对一组矩形执行快速填充。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_FillRects</span><span class="hljs-params">(SDL_Surface * dst, <span class="hljs-type">const</span> SDL_Rect * rects, <span class="hljs-type">int</span> count, Uint32 color)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>dst:作为目标的SDL_Surface结构<br>rects：SDL_Rect 结构体，表示要填充的矩形，或 NULL 来填充整个屏幕<br>count：数组中矩形的数量<br>color：填充的颜色</p><p>关于SDL_Surface的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_Surface/" title="SDL_Surface">SDL_Surface</a><br>关于SDL_Rect的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_Rect/" title="SDL_Rect">SDL_Rect</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_CreateRGBSurfaceFrom</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_CreateRGBSurfaceFrom/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_CreateRGBSurfaceFrom/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-CreateRGBSurfaceFrom"><a href="#SDL-CreateRGBSurfaceFrom" class="headerlink" title="SDL_CreateRGBSurfaceFrom"></a>SDL_CreateRGBSurfaceFrom</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_CreateRGBSurfaceFrom">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>使用现有像素数据分配一个新的 RGB surface。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Surface* <span class="hljs-title">SDL_CreateRGBSurfaceFrom</span><span class="hljs-params">(<span class="hljs-type">void</span> *pixels,<span class="hljs-type">int</span> width,<span class="hljs-type">int</span> height,<span class="hljs-type">int</span> depth,<span class="hljs-type">int</span> pitch,Uint32 Rmask,Uint32 Gmask,Uint32 Bmask,Uint32 Amask)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>pixels:指向现有像素数据的指针<br>width:surface宽度<br>heigth:surface的高度<br>depth:surface的深度<br>pitch:surface的间距<br>Rmask:像素的红色掩码<br>Gmask:像素的绿色掩码<br>Bmask:像素的蓝色掩码<br>Amask:像素的阿尔法掩码</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回创建的新SDL_Surface结构，如果失败则返回NULL；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_CreateRGBSurface</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_CreateRGBSurface/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_CreateRGBSurface/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-CreateRGBSurface"><a href="#SDL-CreateRGBSurface" class="headerlink" title="SDL_CreateRGBSurface"></a>SDL_CreateRGBSurface</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_CreateRGBSurface">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>分配一个新的 RGB surface。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Surface* <span class="hljs-title">SDL_CreateRGBSurface</span><span class="hljs-params">(Uint32 flags, <span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height, <span class="hljs-type">int</span> depth, Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>flags:标志未使用，应设置为 0<br>width:屏幕宽度<br>heigth:屏幕的高度<br>depth:屏幕的深度<br>Rmask:像素的红色掩码<br>Gmask:像素的绿色掩码<br>Bmask:像素的蓝色掩码<br>Amask:像素的阿尔法掩码</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回创建的新SDL_Surface结构，如果失败则返回NULL；调用 SDL_GetError() 获取更多信息</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_FreeSurface</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_FreeSurface/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_FreeSurface/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-FreeSurface"><a href="#SDL-FreeSurface" class="headerlink" title="SDL_FreeSurface"></a>SDL_FreeSurface</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_FreeSurface">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>释放 RGB surface</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SDL_FreeSurface</span><span class="hljs-params">(SDL_Surface * surface)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>surface：需要释放的SDL_Surface</p><p>关于SDL_Surface的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_Surface/" title="SDL_Surface">SDL_Surface</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_FillRect</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_FillRect/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_FillRect/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-FillRect"><a href="#SDL-FillRect" class="headerlink" title="SDL_FillRect"></a>SDL_FillRect</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_FillRect">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>使用特定颜色执行矩形的快速填充。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_FillRect</span><span class="hljs-params">(SDL_Surface * dst, <span class="hljs-type">const</span> SDL_Rect * rect, Uint32 color)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>dst:作为目标的SDL_Surface结构<br>rect：SDL_Rect 结构体，表示要填充的矩形，或 NULL 来填充整个屏幕<br>color：填充的颜色</p><p>关于SDL_Surface的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_Surface/" title="SDL_Surface">SDL_Surface</a><br>关于SDL_Rect的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_Rect/" title="SDL_Rect">SDL_Rect</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_GetClipRect</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_GetClipRect/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_GetClipRect/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-GetClipRect"><a href="#SDL-GetClipRect" class="headerlink" title="SDL_GetClipRect"></a>SDL_GetClipRect</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_GetClipRect">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>获取屏幕的颜色键(transparent pixel)</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_GetColorKey</span><span class="hljs-params">(SDL_Surface * surface, Uint32 * key)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>surface：要查询的 SDL_Surface 结构<br>key: 透明像素的指针</p><p>关于SDL_Surface的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_Surface/" title="SDL_Surface">SDL_Surface</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_GetSurfaceAlphaMod</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_GetSurfaceAlphaMod/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_GetSurfaceAlphaMod/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-GetSurfaceAlphaMod"><a href="#SDL-GetSurfaceAlphaMod" class="headerlink" title="SDL_GetSurfaceAlphaMod"></a>SDL_GetSurfaceAlphaMod</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_GetSurfaceAlphaMod">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>获取 blit 操作中使用的附加 alpha 值。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_GetSurfaceAlphaMod</span><span class="hljs-params">(SDL_Surface * surface,Uint8 * alpha)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>surface：表示要剪切的屏幕的 SDL_Surface 结构<br>alpha: 一个用当前 alpha 值填充的指针</p><p>关于SDL_Surface的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_Surface/" title="SDL_Surface">SDL_Surface</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_GetSurfaceBlendMode</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_GetSurfaceBlendMode/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_GetSurfaceBlendMode/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-GetSurfaceBlendMode"><a href="#SDL-GetSurfaceBlendMode" class="headerlink" title="SDL_GetSurfaceBlendMode"></a>SDL_GetSurfaceBlendMode</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_GetSurfaceBlendMode">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>获取用于 blit 操作的混合模式。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_GetSurfaceBlendMode</span><span class="hljs-params">(SDL_Surface * surface, SDL_BlendMode *blendMode)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>surface：表示要剪切的屏幕的 SDL_Surface 结构<br>blendMode: 填充当前 SDL_BlendMode 的指针</p><p>关于SDL_Surface的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_Surface/" title="SDL_Surface">SDL_Surface</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_GetSurfaceColorMod</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_GetSurfaceColorMod/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_GetSurfaceColorMod/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-GetSurfaceColorMod"><a href="#SDL-GetSurfaceColorMod" class="headerlink" title="SDL_GetSurfaceColorMod"></a>SDL_GetSurfaceColorMod</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_GetSurfaceColorMod">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_GetSurfaceColorMod</span><span class="hljs-params">(SDL_Surface * surface,Uint8 * r, Uint8 * g, Uint8 * b)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>surface：表示要剪切的屏幕的 SDL_Surface 结构<br>r: 用当前红色值填充的指针<br>g: 用当前绿色值填充的指针<br>b: 用当前蓝色值填充的指针</p><p>关于SDL_Surface的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_Surface/" title="SDL_Surface">SDL_Surface</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_LoadBMP_RW</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_LoadBMP_RW/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_LoadBMP_RW/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-LoadBMP-RW"><a href="#SDL-LoadBMP-RW" class="headerlink" title="SDL_LoadBMP_RW"></a>SDL_LoadBMP_RW</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_LoadBMP_RW">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>从可查找的 SDL 数据流加载 BMP 图像。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Surface* <span class="hljs-title">SDL_LoadBMP_RW</span><span class="hljs-params">(SDL_RWops * src,<span class="hljs-type">int</span> freesrc)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src：surface的数据流<br>freesrc：非零， 在读取后关闭流</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回指向新 SDL_Surface 结构的指针，如果出现错误，则返回 NULL；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_LockSurface</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_LockSurface/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_LockSurface/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-LockSurface"><a href="#SDL-LockSurface" class="headerlink" title="SDL_LockSurface"></a>SDL_LockSurface</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_LockSurface">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>设置直接访问像素的surface。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_LockSurface</span><span class="hljs-params">(SDL_Surface * surface)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>surface：要锁定的SDL_Surface结构</p><p>关于SDL_Surface的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_Surface/" title="SDL_Surface">SDL_Surface</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_LowerBlit</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_LowerBlit/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_LowerBlit/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-LowerBlit"><a href="#SDL-LowerBlit" class="headerlink" title="SDL_LowerBlit"></a>SDL_LowerBlit</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_LowerBlit">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>仅执行低级surface位块传送。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_LowerBlit</span><span class="hljs-params">(SDL_Surface * src, SDL_Rect * srcrect, SDL_Surface * dst, SDL_Rect * dstrect)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>src：要从中复制的 SDL_Surface 结构<br>srcrect：表示要复制的矩形的 SDL_Rect 结构，或 NULL 来复制整个surface<br>dst：作为 blit 目标的 SDL_Surface 结构<br>dstrect：表示复制到的矩形的 SDL_Rect 结构</p><p>关于SDL_Surface的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_Surface/" title="SDL_Surface">SDL_Surface</a><br>关于SDL_Rect的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_Rect/" title="SDL_Rect">SDL_Rect</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_GetClipRect</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_GetColorKey/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_GetColorKey/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-GetClipRect"><a href="#SDL-GetClipRect" class="headerlink" title="SDL_GetClipRect"></a>SDL_GetClipRect</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_GetClipRect">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>获取屏幕的剪切矩形</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SDL_GetClipRect</span><span class="hljs-params">(SDL_Surface * surface, SDL_Rect * rect)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>surface：表示要剪切的屏幕的 SDL_Surface 结构<br>rect: 一个 SDL_Rect 结构</p><p>关于SDL_Surface的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_Surface/" title="SDL_Surface">SDL_Surface</a><br>关于SDL_Rect的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_Rect/" title="SDL_Rect">SDL_Rect</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_Palette</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_Palette/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_Palette/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-Palette"><a href="#SDL-Palette" class="headerlink" title="SDL_Palette"></a>SDL_Palette</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_Palette">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>包含调色板信息的结构。</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><ol><li>int ncolors: 调色板中的颜色数量</li><li>SDL_Color* colors: 关于SDL_Color的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_Color/" title="SDL_Color">SDL_Color</a></li><li>Uint32 version: 增量跟踪调色板的更改（内部使用）</li><li>int refcount: 引用计数（内部使用）</li></ol>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_PixelFormat</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_PixelFormat/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_PixelFormat/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-PixelFormat"><a href="#SDL-PixelFormat" class="headerlink" title="SDL_PixelFormat"></a>SDL_PixelFormat</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_PixelFormat">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>包含像素格式信息的结构</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><ol><li>Uint32 format: SDL_PixelFormatEnum 值之一</li><li>SDL_Palette* palette: 关于SDL_Palette的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_Palette/" title="SDL_Palette">SDL_Palette</a></li><li>Uint8 BitsPerPixel: 像素值中有效位数，例如：8、15、16、24、32</li><li>Uint8 BytesPerPixel: 保存像素值所需的字节数，例如：1、2、3、4</li><li>Uint32 Rmask: 表示像素红色分量位置的掩码</li><li>Uint32 Gmask: 表示像素绿色分量位置的掩码</li><li>Uint32 Bmask： 表示像素蓝色分量位置的掩码</li><li>Uint32 Amask： 示像素 alpha 分量位置的掩码，如果像素格式没有任何 alpha 信息，则为 0</li><li>Uint8 Rloss：内部使用</li><li>Uint8 Rloss：内部使用</li><li>Uint8 Gloss：内部使用</li><li>Uint8 Bloss：内部使用</li><li>Uint8 Aloss：内部使用</li><li>Uint8 Rshift：内部使用</li><li>Uint8 Gshift：内部使用</li><li>Uint8 Bshift：内部使用</li><li>Uint8 Ashift：内部使用</li><li>int refcount：内部使用</li><li>SDL_PixelFormat* next: 内部使用</li></ol>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_MUSTLOCK</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_MUSTLOCK/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_MUSTLOCK/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-MUSTLOCK"><a href="#SDL-MUSTLOCK" class="headerlink" title="SDL_MUSTLOCK"></a>SDL_MUSTLOCK</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_MUSTLOCK">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>使用此函数可以确定是否必须锁定surface才能进行访问。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_bool <span class="hljs-title">SDL_MUSTLOCK</span><span class="hljs-params">(SDL_Surface* surface)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>surface: 要查询的 SDL_Surface 结构</p><p>关于SDL_Surface的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_Surface/" title="SDL_Surface">SDL_Surface</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果必须锁定表面才能访问，则返回 SDL_TRUE，否则返回 SDL_FALSE。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_Rect</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_Rect/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_Rect/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-Rect"><a href="#SDL-Rect" class="headerlink" title="SDL_Rect"></a>SDL_Rect</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_Rect">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>包含矩形定义的结构，原点位于左上角。</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><ol><li>int x: 矩形左上角的 x 位置</li><li>int y: 矩形左上角的 y 位置</li><li>int w: 矩形的宽度</li><li>int h: 矩形的高度</li></ol>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_SaveBMP_RW</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_SaveBMP_RW/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_SaveBMP_RW/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-SaveBMP-RW"><a href="#SDL-SaveBMP-RW" class="headerlink" title="SDL_SaveBMP_RW"></a>SDL_SaveBMP_RW</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_SaveBMP_RW">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>将屏幕以 BMP 格式保存到可查找的 SDL 数据流。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_SaveBMP_RW</span><span class="hljs-params">(SDL_Surface * surface, SDL_RWops * dst, <span class="hljs-type">int</span> freedst)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>surface:包含要保存的图像的 SDL_Surface 结构<br>dst:要保存到的数据流<br>freedst:非零,以在写入后关闭流</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_SetColorKey</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_SetColorKey/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_SetColorKey/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-SetColorKey"><a href="#SDL-SetColorKey" class="headerlink" title="SDL_SetColorKey"></a>SDL_SetColorKey</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_SetColorKey">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>设置屏幕中的颜色键变为透明像素。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_SetColorKey</span><span class="hljs-params">(SDL_Surface * surface,<span class="hljs-type">int</span> flag, Uint32 key)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>surface:要更新的 SDL_Surface 结构<br>flag:SDL_TRUE 启用颜色键，SDL_FALSE 禁用颜色键<br>key:透明像素</p><p>关于SDL_Surface的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_Surface/" title="SDL_Surface">SDL_Surface</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_SetSurfaceAlphaMod</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_SetSurfaceAlphaMod/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_SetSurfaceAlphaMod/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-SetSurfaceAlphaMod"><a href="#SDL-SetSurfaceAlphaMod" class="headerlink" title="SDL_SetSurfaceAlphaMod"></a>SDL_SetSurfaceAlphaMod</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_SetSurfaceAlphaMod">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>设置 blit 操作中使用的附加 alpha 值。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_SetSurfaceAlphaMod</span><span class="hljs-params">(SDL_Surface * surface,Uint8 alpha)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>surface:要更新的 SDL_Surface 结构<br>alpha:alpha 值乘以 blit 操作</p><p>关于SDL_Surface的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_Surface/" title="SDL_Surface">SDL_Surface</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_SetClipRect</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_SetClipRect/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_SetClipRect/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-SetClipRect"><a href="#SDL-SetClipRect" class="headerlink" title="SDL_SetClipRect"></a>SDL_SetClipRect</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_SetClipRect">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>设置屏幕的剪切矩形</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_bool <span class="hljs-title">SDL_SetClipRect</span><span class="hljs-params">(SDL_Surface * surface, <span class="hljs-type">const</span> SDL_Rect * rect)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>surface:要裁剪的 SDL_Surface 结构<br>rect:表示剪切矩形的 SDL_Rect 结构，或 NULL 以禁用剪切</p><p>关于SDL_Surface的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_Surface/" title="SDL_Surface">SDL_Surface</a><br>关于SDL_Rect的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_Rect/" title="SDL_Rect">SDL_Rect</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果矩形与表面相交，则返回 SDL_TRUE，否则 SDL_FALSE 和位图将被完全裁剪。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_SetSurfaceBlendMode</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_SetSurfaceBlendMode/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_SetSurfaceBlendMode/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-SetSurfaceBlendMode"><a href="#SDL-SetSurfaceBlendMode" class="headerlink" title="SDL_SetSurfaceBlendMode"></a>SDL_SetSurfaceBlendMode</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_SetSurfaceBlendMode">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>设置用于位块传输操作的混合模式。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_SetSurfaceBlendMode</span><span class="hljs-params">(SDL_Surface * surface,SDL_BlendMode blendMode)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>surface:要更新的 SDL_Surface 结构<br>blendMode:用于位图混合的 SDL_BlendMode</p><p>关于SDL_Surface的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_Surface/" title="SDL_Surface">SDL_Surface</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_SetSurfaceColorMod</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_SetSurfaceColorMod/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_SetSurfaceColorMod/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-SetSurfaceColorMod"><a href="#SDL-SetSurfaceColorMod" class="headerlink" title="SDL_SetSurfaceColorMod"></a>SDL_SetSurfaceColorMod</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_SetSurfaceColorMod">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>设置一个额外的颜色值乘以 blit 操作。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_SetSurfaceColorMod</span><span class="hljs-params">(SDL_Surface * surface,Uint8 r, Uint8 g, Uint8 b)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>surface：表示要剪切的surface的 SDL_Surface 结构<br>r: 用当前红色值填充的指针<br>g: 用当前绿色值填充的指针<br>b: 用当前蓝色值填充的指针</p><p>关于SDL_Surface的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_Surface/" title="SDL_Surface">SDL_Surface</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_SetSurfacePalette</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_SetSurfacePalette/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_SetSurfacePalette/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-SetSurfacePalette"><a href="#SDL-SetSurfacePalette" class="headerlink" title="SDL_SetSurfacePalette"></a>SDL_SetSurfacePalette</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_SetSurfacePalette">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>设置surface使用的调色板。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_SetSurfacePalette</span><span class="hljs-params">(SDL_Surface * surface,SDL_Palette * palette)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>surface：要更新的 SDL_Surface 结构<br>palette: 要使用的 SDL_Palette 结构</p><p>关于SDL_Surface的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_Surface/" title="SDL_Surface">SDL_Surface</a><br>关于SDL_Palette的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_Palette/" title="SDL_Palette">SDL_Palette</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_SetSurfaceRLE</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_SetSurfaceRLE/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_SetSurfaceRLE/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-SetSurfaceRLE"><a href="#SDL-SetSurfaceRLE" class="headerlink" title="SDL_SetSurfaceRLE"></a>SDL_SetSurfaceRLE</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_SetSurfaceRLE">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>设置surface的 RLE 加速提示。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_SetSurfaceRLE</span><span class="hljs-params">(SDL_Surface * surface,<span class="hljs-type">int</span> flag)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>surface：要优化的 SDL_Surface 结构<br>flag: 0 禁用，非零启用 RLE 加速</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_SoftStretch</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_SoftStretch/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_SoftStretch/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-SoftStretch"><a href="#SDL-SoftStretch" class="headerlink" title="SDL_SoftStretch"></a>SDL_SoftStretch</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_SoftStretch">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>在相同格式的两个surface之间执行快速、低质量的拉伸位块传输。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_SoftStretch</span><span class="hljs-params">(SDL_Surface * src,<span class="hljs-type">const</span> SDL_Rect * srcrect,SDL_Surface * dst,<span class="hljs-type">const</span> SDL_Rect * dstrect)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>surface：表示要剪切的surface的 SDL_Surface 结构<br>r: 用当前红色值填充的指针<br>g: 用当前绿色值填充的指针<br>b: 用当前蓝色值填充的指针</p><p>关于SDL_Surface的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_Surface/" title="SDL_Surface">SDL_Surface</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_Surface</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_Surface/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_Surface/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-Surface"><a href="#SDL-Surface" class="headerlink" title="SDL_Surface"></a>SDL_Surface</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_Surface">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>一个结构包含了一系列像素集合，并且会用在软件位块传输中</p><p>SDL_Surface is used in software rendering. With software rendering, thus, in most cases you can access data buffer associated with surface directly, modifying its content, i.e. it is using CPU, hence the software name.</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><ol><li>Uint32 flags: 内部使用</li><li>SDL_PixelFormat* format: 关于SDL_PixelFormat的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_PixelFormat/" title="SDL_PixelFormat">SDL_PixelFormat</a></li><li>int w,h: 以像素为单位的宽度和高度（只读）</li><li>int pitch: 一行像素的长度（以字节为单位）（只读）</li><li>void* pixels: 指向实际像素数据的指针</li><li>void* userdata: 您可以设置任意指针（读写）</li><li>int locked: 用于需要锁定的surface（内部使用）</li><li>void* lock_data: 用于需要锁定的surface（内部使用）</li><li>SDL_Rect clip_rect: 关于SDL_Rect的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_Rect/" title="SDL_Rect">SDL_Rect</a></li><li>SDL_BlitMap* map: 用于快速位块映射到其他surface的信息（内部使用）</li><li>int refcount: 可以由应用程序增加的引用计数</li></ol>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_UnlockSurface</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_UnlockSurface/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_UnlockSurface/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-UnlockSurface"><a href="#SDL-UnlockSurface" class="headerlink" title="SDL_UnlockSurface"></a>SDL_UnlockSurface</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_UnlockSurface">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>直接访问像素后释放surface。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SDL_UnlockSurface</span><span class="hljs-params">(SDL_Surface * surface)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>surface：待解锁的SDL_Surface结构</p><p>关于SDL_Surface的描述可参考<a href="/1999/01/05/SDL/Dictionary/SDL_Surface/" title="SDL_Surface">SDL_Surface</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_Event</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_Event/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_Event/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-Event"><a href="#SDL-Event" class="headerlink" title="SDL_Event"></a>SDL_Event</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_Event">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>包含不同事件类型的结构的联合。</p><p>Relationships between event types and union members:<br><img src="/img/SDL/Relationships_between_event_types_and_union_members.png"></p><h3 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h3><p>SDL_Event user_event;</p><table>    <tr>        <td>Event Type</td>         <td>Event Field</td>         <td>Event Structure</td>     </tr>    <tr>        <td>user_event.SDL_AUDIODEVICEADDED<br>user_event.SDL_AUDIODEVICEREMOVED</td>         <td>user_event.adevice</td>         <td><a href="/1999/01/07/SDL/Dictionary/SDL_AudioDeviceEvent/" title="SDL_AudioDeviceEvent">SDL_AudioDeviceEvent</a></td>     </tr>    <tr>        <td>user_event.SDL_CONTROLLERAXISMOTION</td>         <td>user_event.caxis</td>         <td><a href="/1999/01/07/SDL/Dictionary/SDL_ControllerAxisEvent/" title="SDL_ControllerAxisEvent">SDL_ControllerAxisEvent</a></td>     </tr>    <tr>        <td>user_event.SDL_CONTROLLERBUTTONDOWN<br>user_event.SDL_CONTROLLERBUTTONUP</td>         <td>user_event.cbutton</td>         <td><a href="/1999/01/07/SDL/Dictionary/SDL_ControllerButtonEvent/" title="SDL_ControllerButtonEvent">SDL_ControllerButtonEvent</a></td>     </tr>    <tr>        <td>user_event.SDL_CONTROLLERDEVICEADDED<br>user_event.SDL_CONTROLLERDEVICEREMOVED<br>user_event.SDL_CONTROLLERDEVICEREMAPPED</td>         <td>user_event.cdevice</td>         <td><a href="/1999/01/07/SDL/Dictionary/SDL_ControllerDeviceEvent/" title="SDL_ControllerDeviceEvent">SDL_ControllerDeviceEvent</a></td>     </tr>    <tr>        <td>user_event.SDL_DOLLARGESTURE<br>user_event.SDL_DOLLARGESTURE</td>         <td>user_event.dgesture</td>         <td><a href="/1999/01/07/SDL/Dictionary/SDL_DollarGestureEvent/" title="SDL_DollarGestureEvent">SDL_DollarGestureEvent</a></td>     </tr>    <tr>        <td>user_event.SDL_DROPFILE<br>user_event.SDL_DROPTEXT<br>user_event.SDL_DROPBEGIN<br>user_event.SDL_DROPCOMPLETE</td>         <td>user_event.drop</td>         <td><a href="/1999/01/07/SDL/Dictionary/SDL_DropEvent/" title="SDL_DropEvent">SDL_DropEvent</a></td>     </tr>    <tr>        <td>user_event.SDL_FINGERMOTION<br>user_event.SDL_FINGERDOWN<br>user_event.SDL_FINGERUP</td>         <td>user_event.tfinger</td>         <td><a href="/1999/01/07/SDL/Dictionary/SDL_TouchFingerEvent/" title="SDL_TouchFingerEvent">SDL_TouchFingerEvent</a></td>     </tr>    <tr>        <td>user_event.SDL_KEYDOWN<br>user_event.SDL_KEYUP</td>         <td>user_event.key</td>         <td><a href="/1999/01/07/SDL/Dictionary/SDL_KeyboardEvent/" title="SDL_KeyboardEvent">SDL_KeyboardEvent</a></td>     </tr>    <tr>        <td>user_event.SDL_JOYAXISMOTION</td>         <td>user_event.jaxis</td>         <td><a href="/1999/01/07/SDL/Dictionary/SDL_JoyAxisEvent/" title="SDL_JoyAxisEvent">SDL_JoyAxisEvent</a></td>     </tr>    <tr>        <td>user_event.SDL_JOYBALLMOTION</td>         <td>user_event.jball</td>         <td><a href="/1999/01/07/SDL/Dictionary/SDL_JoyBallEvent/" title="SDL_JoyBallEvent">SDL_JoyBallEvent</a></td>     </tr>    <tr>        <td>user_event.SDL_JOYHATMOTION</td>         <td>user_event.jhat</td>         <td><a href="/1999/01/07/SDL/Dictionary/SDL_JoyHatEvent/" title="SDL_JoyHatEvent">SDL_JoyHatEvent</a></td>     </tr>    <tr>        <td>user_event.SDL_JOYBUTTONDOWN<br>user_event.SDL_JOYBUTTONUP</td>         <td>user_event.jbutton</td>         <td><a href="/1999/01/07/SDL/Dictionary/SDL_JoyButtonEvent/" title="SDL_JoyButtonEvent">SDL_JoyButtonEvent</a></td>     </tr>    <tr>        <td>user_event.SDL_JOYDEVICEADDED<br>user_event.SDL_JOYDEVICEREMOVED</td>         <td>user_event.jdevice</td>         <td><a href="/1999/01/07/SDL/Dictionary/SDL_JoyDeviceEvent/" title="SDL_JoyDeviceEvent">SDL_JoyDeviceEvent</a></td>     </tr>    <tr>        <td>user_event.SDL_MOUSEMOTION</td>         <td>user_event.motion</td>         <td><a href="/1999/01/07/SDL/Dictionary/SDL_MouseMotionEvent/" title="SDL_MouseMotionEvent">SDL_MouseMotionEvent</a></td>     </tr>    <tr>        <td>user_event.SDL_MOUSEBUTTONDOWN<br>user_event.SDL_MOUSEBUTTONUP</td>         <td>user_event.button</td>         <td><a href="/1999/01/07/SDL/Dictionary/SDL_MouseButtonEvent/" title="SDL_MouseButtonEvent">SDL_MouseButtonEvent</a></td>     </tr>    <tr>        <td>user_event.SDL_MOUSEWHEEL</td>         <td>user_event.wheel</td>         <td><a href="/1999/01/07/SDL/Dictionary/SDL_MouseWheelEvent/" title="SDL_MouseWheelEvent">SDL_MouseWheelEvent</a></td>     </tr>    <tr>        <td>user_event.SDL_MULTIGESTURE</td>         <td>user_event.mgesture</td>         <td><a href="/1999/01/07/SDL/Dictionary/SDL_MultiGestureEvent/" title="SDL_MultiGestureEvent">SDL_MultiGestureEvent</a></td>     </tr>    <tr>        <td>user_event.SDL_QUIT</td>         <td>user_event.quit</td>         <td><a href="/1999/01/07/SDL/Dictionary/SDL_QuitEvent/" title="SDL_QuitEvent">SDL_QuitEvent</a></td>     </tr>    <tr>        <td>user_event.SDL_SYSWMEVENT</td>         <td>user_event.syswm</td>         <td><a href="/1999/01/07/SDL/Dictionary/SDL_SysWMEvent/" title="SDL_SysWMEvent">SDL_SysWMEvent</a></td>     </tr>    <tr>        <td>user_event.SDL_TEXTEDITING</td>         <td>user_event.edit</td>         <td><a href="/1999/01/07/SDL/Dictionary/SDL_TextEditingEvent/" title="SDL_TextEditingEvent">SDL_TextEditingEvent</a></td>     </tr>    <tr>        <td>user_event.SDL_TEXTINPUT</td>         <td>user_event.text</td>         <td><a href="/1999/01/07/SDL/Dictionary/SDL_TextInputEvent/" title="SDL_TextInputEvent">SDL_TextInputEvent</a></td>     </tr>    <tr>        <td>user_event.SDL_USEREVENT</td>         <td>user_event.user</td>         <td><a href="/1999/01/07/SDL/Dictionary/SDL_UserEvent/" title="SDL_UserEvent">SDL_UserEvent</a></td>     </tr>    <tr>        <td>user_event.SDL_WINDOWEVENT</td>         <td>user_event.window</td>         <td><a href="/1999/01/07/SDL/Dictionary/SDL_WindowEvent/" title="SDL_WindowEvent">SDL_WindowEvent</a></td>     </tr>    <tr>        <td>Other events</td>         <td>none, use .type</td>         <td>SDL_CommonEvent</td>     </tr></table>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_GetError</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_GetError/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_GetError/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-GetError"><a href="#SDL-GetError" class="headerlink" title="SDL_GetError"></a>SDL_GetError</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_GetError">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>检索有关当前线程上发生的最后一个错误的消息。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">char</span>* <span class="hljs-title">SDL_GetError</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>window：查询窗口</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回一条消息，其中包含有关所发生的特定错误的信息；如果自上次调用 SDL_ClearError() 以来尚未设置错误消息，则返回一个空字符串。 该消息仅在 SDL 函数发出错误信号时适用。 您必须检查 SDL 函数调用的返回值以确定何时适当地调用 SDL_GetError()。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_GetWindowSurface</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_GetWindowSurface/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_GetWindowSurface/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-GetWindowSurface"><a href="#SDL-GetWindowSurface" class="headerlink" title="SDL_GetWindowSurface"></a>SDL_GetWindowSurface</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_GetWindowSurface">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>获取与窗口关联的 SDL 的surface。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Surface * <span class="hljs-title">SDL_GetWindowSurface</span><span class="hljs-params">(SDL_Window * window)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>window：查询窗口</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回与窗口关联的表面，失败时返回 NULL；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_Init</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_Init/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_Init/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-Init"><a href="#SDL-Init" class="headerlink" title="SDL_Init"></a>SDL_Init</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_Init">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>初始化 SDL 库。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_Init</span><span class="hljs-params">(Uint32 flags)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>flags：子系统初始化标志</p><p>flags可以是以下任何一个或组合在一起：<br>SDL_INIT_TIMER: 定时器子系统<br>SDL_INIT_AUDIO: 音频子系统<br>SDL_INIT_EVENTS: 事件子系统<br>SDL_INIT_VIDEO: 视频子系统；自动初始化事件子系统<br>SDL_INIT_JOYSTICK: 操纵杆子系统；自动初始化事件子系统<br>SDL_INIT_GAMECONTROLLER: 控制器子系统；自动初始化操纵杆子系统<br>SDL_INIT_HAPTIC: 触觉（力反馈）子系统<br>SDL_INIT_EVERYTHING: 上述所有子系统<br>SDL_INIT_NOPARACHUTE: 兼容性;该标志被忽略</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_LoadBMP</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_LoadBMP/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_LoadBMP/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-LoadBMP"><a href="#SDL-LoadBMP" class="headerlink" title="SDL_LoadBMP"></a>SDL_LoadBMP</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_LoadBMP">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>从文件路径加载 BMP 图像。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Surface* <span class="hljs-title">SDL_LoadBMP</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* file)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>file：包含 BMP 图像的文件</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回指向新 SDL_Surface 结构的指针，如果出现错误，则返回 NULL；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_PollEvent</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_PollEvent/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_PollEvent/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-PollEvent"><a href="#SDL-PollEvent" class="headerlink" title="SDL_PollEvent"></a>SDL_PollEvent</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_PollEvent">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>轮询当前待处理的事件。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_PollEvent</span><span class="hljs-params">(SDL_Event * event)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>event: 用队列中的下一个事件填充的 SDL_Event 结构，或 NULL</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果有待处理事件，则返回 1；如果没有可用事件，则返回 0。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_Quit</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_Quit/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_Quit/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-Quit"><a href="#SDL-Quit" class="headerlink" title="SDL_Quit"></a>SDL_Quit</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_Quit">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>清理所有初始化的子系统</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SDL_Quit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_UpdateWindowSurface</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_UpdateWindowSurface/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_UpdateWindowSurface/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-UpdateWindowSurface"><a href="#SDL-UpdateWindowSurface" class="headerlink" title="SDL_UpdateWindowSurface"></a>SDL_UpdateWindowSurface</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_UpdateWindowSurface">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>将窗口surface复制到surface上。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_UpdateWindowSurface</span><span class="hljs-params">(SDL_Window * window)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>window：需要更新的窗口</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RWops</title>
    <link href="/1999/01/05/SDL/Dictionary/SDL_RWops/"/>
    <url>/1999/01/05/SDL/Dictionary/SDL_RWops/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RWops"><a href="#SDL-RWops" class="headerlink" title="SDL_RWops"></a>SDL_RWops</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RWops">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>为流 I&#x2F;O 提供抽象接口的结构</p><h3 id="数据字段"><a href="#数据字段" class="headerlink" title="数据字段"></a>数据字段</h3><p>Sint64 (*)(SDL_RWops <em>) size 报告流大小的回调<br>Sint64 (</em>)(SDL_RWops <em>, Sint64, int) seek 在流中寻找的回调<br>size_t (</em>)(SDL_RWops *, void <em>, size_t, size_t) read 从流中读取的回调<br>size_t (</em>)(SDL_RWops *, const void <em>, size_t, size_t) write 写入流的回调<br>int (</em>)(SDL_RWops *) close 关闭流的回调<br>Uint32 type 流类型<br>union hidden 特定类型的数据</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_CreateWindow</title>
    <link href="/1999/01/03/SDL/Dictionary/SDL_CreateWindow/"/>
    <url>/1999/01/03/SDL/Dictionary/SDL_CreateWindow/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-CreateWindow"><a href="#SDL-CreateWindow" class="headerlink" title="SDL_CreateWindow"></a>SDL_CreateWindow</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_CreateWindow">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>创建一个自定义位置，尺寸和flags的窗口</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Window* <span class="hljs-title">SDL_CreateWindow</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *title, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> w, <span class="hljs-type">int</span> h, Uint32 flags)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>Title: 窗口的标题， UTF-8的格式<br>x: 窗口x的位置， SDL_WINDOWPOS_CENTERED, 或者 SDL_WINDOWPOS_UNDEFINED<br>y: 窗口y的位置，SDL_WINDOWPOS_CENTERED, 或者 SDL_WINDOWPOS_UNDEFINED<br>w：窗口的宽度<br>h：窗口的高度<br>flags: 0 或者下列的一个或多个<br>flags的可能组合：<br>1.SDL_WINDOW_FULLSCREEN： 全屏窗口。<br>2.SDL_WINDOW_FULLSCREEN_DESKTOP: 以桌面分辨率的全屏窗口。<br>3.SDL_WINDOW_OPENGL: 可以以为OpenGL为内容的窗口。<br>4.SDL_WINDOW_VULKAN: 可以以Vulkan为实例的窗口。<br>5.SDL_WINDOW_METAL: 可以以Metal为实例的窗口。<br>6.SDL_WINDOW_HIDDEN: 窗口不可见。<br>7.SDL_WINDOW_BORDERLESS: 没有窗口修饰。<br>8.SDL_WINDOW_RESIZABLE: 窗口不能改变大小。<br>9.SDL_WINDOW_MINIMIZED: 最小化窗口。<br>10.SDL_WINDOW_MAXIMIZED: 最大化窗口。<br>11.SDL_WINDOW_INPUT_GRABBED: 窗口已获取输入焦点。<br>12.SDL_WINDOW_ALLOW_HIGHDPI: 如果支持(&gt;&#x3D; SDL 2.0.1)， 应该在高DPI模式下创建窗口。<br>13. SDL_WINDOW_SHOWN 被 SDL_CreateWindow() 忽略</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回已创建的窗口或失败时返回 NULL；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_CreateWindowFrom</title>
    <link href="/1999/01/03/SDL/Dictionary/SDL_CreateWindowFrom/"/>
    <url>/1999/01/03/SDL/Dictionary/SDL_CreateWindowFrom/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-CreateWindowFrom"><a href="#SDL-CreateWindowFrom" class="headerlink" title="SDL_CreateWindowFrom"></a>SDL_CreateWindowFrom</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_CreateWindowFrom">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>从本地窗口创建一个SDL window.</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_Window* <span class="hljs-title">SDL_CreateWindowFrom</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> *data)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>data: 指向驱动依赖窗口创建数据的指针</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回已创建的窗口或失败时返回 NULL；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_GetWindowData</title>
    <link href="/1999/01/03/SDL/Dictionary/SDL_GetWindowData/"/>
    <url>/1999/01/03/SDL/Dictionary/SDL_GetWindowData/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-GetWindowData"><a href="#SDL-GetWindowData" class="headerlink" title="SDL_GetWindowData"></a>SDL_GetWindowData</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_GetWindowData">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>拿取关联SDL_Window的数据指针</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-title">SDL_GetWindowData</span><span class="hljs-params">(SDL_Window * window, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *name)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>window: 需要访问的SDL_Window<br>name: 返回数据指针的名字</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回与名称关联的值。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_DestroyWindow</title>
    <link href="/1999/01/03/SDL/Dictionary/SDL_DestroyWindow/"/>
    <url>/1999/01/03/SDL/Dictionary/SDL_DestroyWindow/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-DestroyWindow"><a href="#SDL-DestroyWindow" class="headerlink" title="SDL_DestroyWindow"></a>SDL_DestroyWindow</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_DestroyWindow">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>销毁一个窗口</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SDL_DestoryWindow</span><span class="hljs-params">(SDL_Window* window)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>window: 被销毁的窗口</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_GetWindowFlags</title>
    <link href="/1999/01/03/SDL/Dictionary/SDL_GetWindowFlags/"/>
    <url>/1999/01/03/SDL/Dictionary/SDL_GetWindowFlags/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-GetWindowFlags"><a href="#SDL-GetWindowFlags" class="headerlink" title="SDL_GetWindowFlags"></a>SDL_GetWindowFlags</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_GetWindowFlags">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>拿取SDL_Window的flag<br>关于flag的描述可参考<a href="/1999/01/03/SDL/Dictionary/SDL_CreateWindow/" title="SDL_CreateWindow">SDL_CreateWindow</a></p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">Uint32 <span class="hljs-title">SDL_GetWindowFlags</span><span class="hljs-params">(SDL_Window * window)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>window: 需要访问的SDL_Window</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回与窗口关联的 SDL_WindowFlags 的掩码。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_GetWindowGrab</title>
    <link href="/1999/01/03/SDL/Dictionary/SDL_GetWindowGrab/"/>
    <url>/1999/01/03/SDL/Dictionary/SDL_GetWindowGrab/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-GetWindowGrab"><a href="#SDL-GetWindowGrab" class="headerlink" title="SDL_GetWindowGrab"></a>SDL_GetWindowGrab</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_GetWindowGrab">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>返回SDL_TRUE如果input被抓取到，否则返回SDL_FALSE</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">SDL_bool <span class="hljs-title">SDL_GetWindowGrab</span><span class="hljs-params">(SDL_Window * window)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>window: 需要访问的SDL_Window</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>如果输入被抓取，则返回 SDL_TRUE，否则返回 SDL_FALSE。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_GetWindowPosition</title>
    <link href="/1999/01/03/SDL/Dictionary/SDL_GetWindowPosition/"/>
    <url>/1999/01/03/SDL/Dictionary/SDL_GetWindowPosition/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-GetWindowPosition"><a href="#SDL-GetWindowPosition" class="headerlink" title="SDL_GetWindowPosition"></a>SDL_GetWindowPosition</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_GetWindowPosition">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>获取窗口的位置</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SDL_GetWindowPosition</span><span class="hljs-params">(SDL_Window * window, <span class="hljs-type">int</span> *x, <span class="hljs-type">int</span> *y)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>window: 需要访问的SDL_Window<br>x: 需要的话，指针中将指向窗口的x position。如果不需要就为Null<br>y: 需要的话，指针中将指向窗口的y position。如果不需要就为Null</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_GetWindowSize</title>
    <link href="/1999/01/03/SDL/Dictionary/SDL_GetWindowSize/"/>
    <url>/1999/01/03/SDL/Dictionary/SDL_GetWindowSize/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-GetWindowSize"><a href="#SDL-GetWindowSize" class="headerlink" title="SDL_GetWindowSize"></a>SDL_GetWindowSize</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_GetWindowSize">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>得到窗口的客户区大小<br>客户区：指图中的青色部分:即蓝色方框内区域。<br>非客户区：就是指蓝色方框之外的窗口区域,包括程序图标,标题栏,菜单,最大最小&#x2F;关闭按纽,左右两个框和底下的状态条。<br><img src="/img/SDL/%E5%AE%A2%E6%88%B7%E5%8C%BA_%E9%9D%9E%E5%AE%A2%E6%88%B7%E5%8C%BA.png"></p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SDL_GetWindowSize</span><span class="hljs-params">(SDL_Window * window, <span class="hljs-type">int</span> *w, <span class="hljs-type">int</span> *h)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>window: 需要访问的SDL_Window<br>w: 需要的话，指针中将指向窗口的宽度。如果不需要就为Null<br>h: 需要的话，指针中将指向窗口的高度。如果不需要就为Null</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_GetWindowTitle</title>
    <link href="/1999/01/03/SDL/Dictionary/SDL_GetWindowTitle/"/>
    <url>/1999/01/03/SDL/Dictionary/SDL_GetWindowTitle/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-GetWindowTitle"><a href="#SDL-GetWindowTitle" class="headerlink" title="SDL_GetWindowTitle"></a>SDL_GetWindowTitle</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_GetWindowTitle">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>得到窗口的标题</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">char</span>* <span class="hljs-title">SDL_GetWindowTitle</span><span class="hljs-params">(SDL_Window * window)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>window: 需要访问的SDL_Window</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回 UTF-8 格式的窗口标题，如果没有标题，则返回“”。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_MinimizeWindow</title>
    <link href="/1999/01/03/SDL/Dictionary/SDL_MinimizeWindo/"/>
    <url>/1999/01/03/SDL/Dictionary/SDL_MinimizeWindo/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-MinimizeWindow"><a href="#SDL-MinimizeWindow" class="headerlink" title="SDL_MinimizeWindow"></a>SDL_MinimizeWindow</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_MinimizeWindow">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>在图像层面一个窗口最小化</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SDL_MinimizeWindow</span><span class="hljs-params">(SDL_Window * window)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>window: 需要最小化的窗口</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_HideWindow</title>
    <link href="/1999/01/03/SDL/Dictionary/SDL_HideWindow/"/>
    <url>/1999/01/03/SDL/Dictionary/SDL_HideWindow/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-HideWindow"><a href="#SDL-HideWindow" class="headerlink" title="SDL_HideWindow"></a>SDL_HideWindow</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_HideWindow">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>隐藏一个窗口</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SDL_HideWindow</span><span class="hljs-params">(SDL_Window * window)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>window: 需要访问的SDL_Window</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_MaximizeWindow</title>
    <link href="/1999/01/03/SDL/Dictionary/SDL_MaximizeWindow/"/>
    <url>/1999/01/03/SDL/Dictionary/SDL_MaximizeWindow/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-MaximizeWindow"><a href="#SDL-MaximizeWindow" class="headerlink" title="SDL_MaximizeWindow"></a>SDL_MaximizeWindow</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_MaximizeWindow">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>使一个窗口尽可能大</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SDL_MaximizeWindow</span><span class="hljs-params">(SDL_Window * window)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>window: 需要最大化的窗口</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RaiseWindow</title>
    <link href="/1999/01/03/SDL/Dictionary/SDL_RaiseWindow/"/>
    <url>/1999/01/03/SDL/Dictionary/SDL_RaiseWindow/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RaiseWindow"><a href="#SDL-RaiseWindow" class="headerlink" title="SDL_RaiseWindow"></a>SDL_RaiseWindow</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RaiseWindow">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>使一个窗口上升至其他窗口之上，并且重新对焦输入</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SDL_RaiseWindow</span><span class="hljs-params">(SDL_Window * window)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>window: 需要上升的窗口</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_RestoreWindow</title>
    <link href="/1999/01/03/SDL/Dictionary/SDL_RestoreWindow/"/>
    <url>/1999/01/03/SDL/Dictionary/SDL_RestoreWindow/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-RestoreWindow"><a href="#SDL-RestoreWindow" class="headerlink" title="SDL_RestoreWindow"></a>SDL_RestoreWindow</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_RestoreWindow">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>恢复一个被最大化或被最小化的窗口的大小和位置</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SDL_RestoreWindow</span><span class="hljs-params">(SDL_Window * window)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>window: 需要恢复的窗口</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_SetWindowBordered</title>
    <link href="/1999/01/03/SDL/Dictionary/SDL_SetWindowBordered/"/>
    <url>/1999/01/03/SDL/Dictionary/SDL_SetWindowBordered/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-SetWindowBordered"><a href="#SDL-SetWindowBordered" class="headerlink" title="SDL_SetWindowBordered"></a>SDL_SetWindowBordered</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_SetWindowBordered">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>设置窗口的边框状态。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SDL_SetWindowBordered</span><span class="hljs-params">(SDL_Window * window, SDL_bool bordered)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>window: 要更改其边框状态的窗口<br>bordered: SDL_FALSE 删除边框，SDL_TRUE 添加边框</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_SetWindowData</title>
    <link href="/1999/01/03/SDL/Dictionary/SDL_SetWindowData/"/>
    <url>/1999/01/03/SDL/Dictionary/SDL_SetWindowData/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-SetWindowData"><a href="#SDL-SetWindowData" class="headerlink" title="SDL_SetWindowData"></a>SDL_SetWindowData</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_SetWindowData">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>将任意命名的指针与窗口关联。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-title">SDL_SetWindowData</span><span class="hljs-params">(SDL_Window * window, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *name, <span class="hljs-type">void</span> *userdata)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>window: 需要关联指针的窗口<br>name: 指针的名字<br>userdata: 关联的指针</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_SetWindowFullscreen</title>
    <link href="/1999/01/03/SDL/Dictionary/SDL_SetWindowFullscreen/"/>
    <url>/1999/01/03/SDL/Dictionary/SDL_SetWindowFullscreen/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-SetWindowFullscreen"><a href="#SDL-SetWindowFullscreen" class="headerlink" title="SDL_SetWindowFullscreen"></a>SDL_SetWindowFullscreen</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_SetWindowFullscreen">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>设置全屏窗口的状态</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SDL_SetWindowFullscreen</span><span class="hljs-params">(SDL_Window * window, Uint32 flags)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>window: 需要改变的窗口<br>关于flag的描述可参考<a href="/1999/01/03/SDL/Dictionary/SDL_CreateWindow/" title="SDL_CreateWindow">SDL_CreateWindow</a></p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>成功时返回 0，失败时返回负错误代码；调用 SDL_GetError() 获取更多信息。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_SetWindowGrab</title>
    <link href="/1999/01/03/SDL/Dictionary/SDL_SetWindowGrab/"/>
    <url>/1999/01/03/SDL/Dictionary/SDL_SetWindowGrab/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-SetWindowGrab"><a href="#SDL-SetWindowGrab" class="headerlink" title="SDL_SetWindowGrab"></a>SDL_SetWindowGrab</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_SetWindowGrab">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>设置一个窗口的输入抓取模式</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SDL_SetWindowGrab</span><span class="hljs-params">(SDL_Window * window, SDL_bool grabbed)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>window: 应设置输入抓取模式的窗口<br>grabbed: SDL_TRUE 获取输入或 SDL_FALSE 释放输入</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_SetWindowIcon</title>
    <link href="/1999/01/03/SDL/Dictionary/SDL_SetWindowIcon/"/>
    <url>/1999/01/03/SDL/Dictionary/SDL_SetWindowIcon/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-SetWindowIcon"><a href="#SDL-SetWindowIcon" class="headerlink" title="SDL_SetWindowIcon"></a>SDL_SetWindowIcon</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_SetWindowIcon">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>设置窗口的图标。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SDL_SetWindowIcon</span><span class="hljs-params">(SDL_Window * window, SDL_Surface * icon)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>window: 需要改变的窗口<br>icon: 包含窗口图标的 SDL_Surface 结构</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_SetWindowPosition</title>
    <link href="/1999/01/03/SDL/Dictionary/SDL_SetWindowPosition/"/>
    <url>/1999/01/03/SDL/Dictionary/SDL_SetWindowPosition/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-SetWindowPosition"><a href="#SDL-SetWindowPosition" class="headerlink" title="SDL_SetWindowPosition"></a>SDL_SetWindowPosition</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_SetWindowPosition">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>设置窗口的位置。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SDL_SetWindowPosition</span><span class="hljs-params">(SDL_Window * window, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>window: 需要改变位置的窗口<br>x: 窗口中的x坐标或者SDL_WINDOWPOS_CENTERED或者SDL_WINDOWPOS_UNDEFINED<br>y：窗口中的y坐标或者SDL_WINDOWPOS_CENTERED或者SDL_WINDOWPOS_UNDEFINED</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_ShowWindow</title>
    <link href="/1999/01/03/SDL/Dictionary/SDL_ShowWindow/"/>
    <url>/1999/01/03/SDL/Dictionary/SDL_ShowWindow/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-ShowWindow"><a href="#SDL-ShowWindow" class="headerlink" title="SDL_ShowWindow"></a>SDL_ShowWindow</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_ShowWindow">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>展示一个窗口</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SDL_ShowWindow</span><span class="hljs-params">(SDL_Window * window)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>window: 想要展示的窗口</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_SetWindowSize</title>
    <link href="/1999/01/03/SDL/Dictionary/SDL_SetWindowSize/"/>
    <url>/1999/01/03/SDL/Dictionary/SDL_SetWindowSize/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-SetWindowSize"><a href="#SDL-SetWindowSize" class="headerlink" title="SDL_SetWindowSize"></a>SDL_SetWindowSize</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_SetWindowSize">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>设置窗口客户区的大小。<br>客户区：指图中的青色部分:即蓝色方框内区域。<br>非客户区：就是指蓝色方框之外的窗口区域,包括程序图标,标题栏,菜单,最大最小&#x2F;关闭按纽,左右两个框和底下的状态条。<br><img src="/img/SDL/%E5%AE%A2%E6%88%B7%E5%8C%BA_%E9%9D%9E%E5%AE%A2%E6%88%B7%E5%8C%BA.png"></p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SDL_SetWindowSize</span><span class="hljs-params">(SDL_Window * window, <span class="hljs-type">int</span> w, <span class="hljs-type">int</span> h)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>window: 需要改变的窗口<br>w: 屏幕坐标中窗口的宽度（以像素为单位）必须 &gt; 0<br>h：屏幕坐标中窗口的高度（以像素为单位）必须 &gt; 0</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_SetWindowTitle</title>
    <link href="/1999/01/03/SDL/Dictionary/SDL_SetWindowTitle/"/>
    <url>/1999/01/03/SDL/Dictionary/SDL_SetWindowTitle/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-SetWindowTitle"><a href="#SDL-SetWindowTitle" class="headerlink" title="SDL_SetWindowTitle"></a>SDL_SetWindowTitle</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_SetWindowTitle">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>设置窗口的标题。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SDL_SetWindowTitle</span><span class="hljs-params">(SDL_Window * window, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *title)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>window: 需要改变的窗口<br>title：UTF-8 格式的所需窗口标题</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDL_PumpEvents</title>
    <link href="/1999/01/03/SDL/Dictionary/SDL_PumpEvents/"/>
    <url>/1999/01/03/SDL/Dictionary/SDL_PumpEvents/</url>
    
    <content type="html"><![CDATA[<h1 id="SDL-PumpEvents"><a href="#SDL-PumpEvents" class="headerlink" title="SDL_PumpEvents"></a>SDL_PumpEvents</h1><span id="more"></span><p>参考链接：<a href="https://wiki.libsdl.org/SDL2/SDL_PumpEvents">Click to jump</a></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>泵送事件循环，从输入设备收集事件。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SDL_PumpEvents</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>SDL Dictionary</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SDL</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
